
Ayden_Boyok_SWEN_FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c7c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08009db8  08009db8  00019db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a0a0  0800a0a0  0001a0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  20000008  0800a0a4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000002c  0800a0c8  0002002c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000064  0800a0fd  00020064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000078  0800a10e  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  0800a10e  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800a10e  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002b2af  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00005b70  00000000  00000000  0004bd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002658  00000000  00000000  00051900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001d55  00000000  00000000  00053f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002aeba  00000000  00000000  00055cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002a152  00000000  00000000  00080b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f6975  00000000  00000000  000aacb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00009ff8  00000000  00000000  001a1630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006f  00000000  00000000  001ab628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000078 	.word	0x20000078
 8000158:	00000000 	.word	0x00000000
 800015c:	08009da0 	.word	0x08009da0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000007c 	.word	0x2000007c
 8000178:	08009da0 	.word	0x08009da0

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b970 	b.w	8000484 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	460f      	mov	r7, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14a      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d965      	bls.n	800029e <__udivmoddi4+0xe2>
 80001d2:	fab2 f382 	clz	r3, r2
 80001d6:	b143      	cbz	r3, 80001ea <__udivmoddi4+0x2e>
 80001d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001dc:	f1c3 0220 	rsb	r2, r3, #32
 80001e0:	409f      	lsls	r7, r3
 80001e2:	fa20 f202 	lsr.w	r2, r0, r2
 80001e6:	4317      	orrs	r7, r2
 80001e8:	409c      	lsls	r4, r3
 80001ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ee:	fa1f f58c 	uxth.w	r5, ip
 80001f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f6:	0c22      	lsrs	r2, r4, #16
 80001f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000200:	fb01 f005 	mul.w	r0, r1, r5
 8000204:	4290      	cmp	r0, r2
 8000206:	d90a      	bls.n	800021e <__udivmoddi4+0x62>
 8000208:	eb1c 0202 	adds.w	r2, ip, r2
 800020c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000210:	f080 811c 	bcs.w	800044c <__udivmoddi4+0x290>
 8000214:	4290      	cmp	r0, r2
 8000216:	f240 8119 	bls.w	800044c <__udivmoddi4+0x290>
 800021a:	3902      	subs	r1, #2
 800021c:	4462      	add	r2, ip
 800021e:	1a12      	subs	r2, r2, r0
 8000220:	b2a4      	uxth	r4, r4
 8000222:	fbb2 f0fe 	udiv	r0, r2, lr
 8000226:	fb0e 2210 	mls	r2, lr, r0, r2
 800022a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022e:	fb00 f505 	mul.w	r5, r0, r5
 8000232:	42a5      	cmp	r5, r4
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x90>
 8000236:	eb1c 0404 	adds.w	r4, ip, r4
 800023a:	f100 32ff 	add.w	r2, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x294>
 8000242:	42a5      	cmp	r5, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x294>
 8000248:	4464      	add	r4, ip
 800024a:	3802      	subs	r0, #2
 800024c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000250:	1b64      	subs	r4, r4, r5
 8000252:	2100      	movs	r1, #0
 8000254:	b11e      	cbz	r6, 800025e <__udivmoddi4+0xa2>
 8000256:	40dc      	lsrs	r4, r3
 8000258:	2300      	movs	r3, #0
 800025a:	e9c6 4300 	strd	r4, r3, [r6]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d908      	bls.n	8000278 <__udivmoddi4+0xbc>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80ed 	beq.w	8000446 <__udivmoddi4+0x28a>
 800026c:	2100      	movs	r1, #0
 800026e:	e9c6 0500 	strd	r0, r5, [r6]
 8000272:	4608      	mov	r0, r1
 8000274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000278:	fab3 f183 	clz	r1, r3
 800027c:	2900      	cmp	r1, #0
 800027e:	d149      	bne.n	8000314 <__udivmoddi4+0x158>
 8000280:	42ab      	cmp	r3, r5
 8000282:	d302      	bcc.n	800028a <__udivmoddi4+0xce>
 8000284:	4282      	cmp	r2, r0
 8000286:	f200 80f8 	bhi.w	800047a <__udivmoddi4+0x2be>
 800028a:	1a84      	subs	r4, r0, r2
 800028c:	eb65 0203 	sbc.w	r2, r5, r3
 8000290:	2001      	movs	r0, #1
 8000292:	4617      	mov	r7, r2
 8000294:	2e00      	cmp	r6, #0
 8000296:	d0e2      	beq.n	800025e <__udivmoddi4+0xa2>
 8000298:	e9c6 4700 	strd	r4, r7, [r6]
 800029c:	e7df      	b.n	800025e <__udivmoddi4+0xa2>
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xe6>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f382 	clz	r3, r2
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	f040 8090 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ac:	1a8a      	subs	r2, r1, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f fe8c 	uxth.w	lr, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002bc:	fb07 2015 	mls	r0, r7, r5, r2
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c6:	fb0e f005 	mul.w	r0, lr, r5
 80002ca:	4290      	cmp	r0, r2
 80002cc:	d908      	bls.n	80002e0 <__udivmoddi4+0x124>
 80002ce:	eb1c 0202 	adds.w	r2, ip, r2
 80002d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x122>
 80002d8:	4290      	cmp	r0, r2
 80002da:	f200 80cb 	bhi.w	8000474 <__udivmoddi4+0x2b8>
 80002de:	4645      	mov	r5, r8
 80002e0:	1a12      	subs	r2, r2, r0
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e8:	fb07 2210 	mls	r2, r7, r0, r2
 80002ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f0:	fb0e fe00 	mul.w	lr, lr, r0
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x14e>
 80002f8:	eb1c 0404 	adds.w	r4, ip, r4
 80002fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x14c>
 8000302:	45a6      	cmp	lr, r4
 8000304:	f200 80bb 	bhi.w	800047e <__udivmoddi4+0x2c2>
 8000308:	4610      	mov	r0, r2
 800030a:	eba4 040e 	sub.w	r4, r4, lr
 800030e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000312:	e79f      	b.n	8000254 <__udivmoddi4+0x98>
 8000314:	f1c1 0720 	rsb	r7, r1, #32
 8000318:	408b      	lsls	r3, r1
 800031a:	fa22 fc07 	lsr.w	ip, r2, r7
 800031e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000322:	fa05 f401 	lsl.w	r4, r5, r1
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	40fd      	lsrs	r5, r7
 800032c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000330:	4323      	orrs	r3, r4
 8000332:	fbb5 f8f9 	udiv	r8, r5, r9
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	fb09 5518 	mls	r5, r9, r8, r5
 800033e:	0c1c      	lsrs	r4, r3, #16
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	fa00 f001 	lsl.w	r0, r0, r1
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f108 3aff 	add.w	sl, r8, #4294967295
 800035c:	f080 8088 	bcs.w	8000470 <__udivmoddi4+0x2b4>
 8000360:	42a5      	cmp	r5, r4
 8000362:	f240 8085 	bls.w	8000470 <__udivmoddi4+0x2b4>
 8000366:	f1a8 0802 	sub.w	r8, r8, #2
 800036a:	4464      	add	r4, ip
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	b29d      	uxth	r5, r3
 8000370:	fbb4 f3f9 	udiv	r3, r4, r9
 8000374:	fb09 4413 	mls	r4, r9, r3, r4
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x1da>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f103 35ff 	add.w	r5, r3, #4294967295
 800038c:	d26c      	bcs.n	8000468 <__udivmoddi4+0x2ac>
 800038e:	45a6      	cmp	lr, r4
 8000390:	d96a      	bls.n	8000468 <__udivmoddi4+0x2ac>
 8000392:	3b02      	subs	r3, #2
 8000394:	4464      	add	r4, ip
 8000396:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800039a:	fba3 9502 	umull	r9, r5, r3, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	42ac      	cmp	r4, r5
 80003a4:	46c8      	mov	r8, r9
 80003a6:	46ae      	mov	lr, r5
 80003a8:	d356      	bcc.n	8000458 <__udivmoddi4+0x29c>
 80003aa:	d053      	beq.n	8000454 <__udivmoddi4+0x298>
 80003ac:	b156      	cbz	r6, 80003c4 <__udivmoddi4+0x208>
 80003ae:	ebb0 0208 	subs.w	r2, r0, r8
 80003b2:	eb64 040e 	sbc.w	r4, r4, lr
 80003b6:	fa04 f707 	lsl.w	r7, r4, r7
 80003ba:	40ca      	lsrs	r2, r1
 80003bc:	40cc      	lsrs	r4, r1
 80003be:	4317      	orrs	r7, r2
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	4618      	mov	r0, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	f1c3 0120 	rsb	r1, r3, #32
 80003d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d4:	fa20 f201 	lsr.w	r2, r0, r1
 80003d8:	fa25 f101 	lsr.w	r1, r5, r1
 80003dc:	409d      	lsls	r5, r3
 80003de:	432a      	orrs	r2, r5
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ec:	fb07 1510 	mls	r5, r7, r0, r1
 80003f0:	0c11      	lsrs	r1, r2, #16
 80003f2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f6:	fb00 f50e 	mul.w	r5, r0, lr
 80003fa:	428d      	cmp	r5, r1
 80003fc:	fa04 f403 	lsl.w	r4, r4, r3
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x258>
 8000402:	eb1c 0101 	adds.w	r1, ip, r1
 8000406:	f100 38ff 	add.w	r8, r0, #4294967295
 800040a:	d22f      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800040c:	428d      	cmp	r5, r1
 800040e:	d92d      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000410:	3802      	subs	r0, #2
 8000412:	4461      	add	r1, ip
 8000414:	1b49      	subs	r1, r1, r5
 8000416:	b292      	uxth	r2, r2
 8000418:	fbb1 f5f7 	udiv	r5, r1, r7
 800041c:	fb07 1115 	mls	r1, r7, r5, r1
 8000420:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000424:	fb05 f10e 	mul.w	r1, r5, lr
 8000428:	4291      	cmp	r1, r2
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x282>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f105 38ff 	add.w	r8, r5, #4294967295
 8000434:	d216      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 8000436:	4291      	cmp	r1, r2
 8000438:	d914      	bls.n	8000464 <__udivmoddi4+0x2a8>
 800043a:	3d02      	subs	r5, #2
 800043c:	4462      	add	r2, ip
 800043e:	1a52      	subs	r2, r2, r1
 8000440:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000444:	e738      	b.n	80002b8 <__udivmoddi4+0xfc>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e708      	b.n	800025e <__udivmoddi4+0xa2>
 800044c:	4639      	mov	r1, r7
 800044e:	e6e6      	b.n	800021e <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x90>
 8000454:	4548      	cmp	r0, r9
 8000456:	d2a9      	bcs.n	80003ac <__udivmoddi4+0x1f0>
 8000458:	ebb9 0802 	subs.w	r8, r9, r2
 800045c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000460:	3b01      	subs	r3, #1
 8000462:	e7a3      	b.n	80003ac <__udivmoddi4+0x1f0>
 8000464:	4645      	mov	r5, r8
 8000466:	e7ea      	b.n	800043e <__udivmoddi4+0x282>
 8000468:	462b      	mov	r3, r5
 800046a:	e794      	b.n	8000396 <__udivmoddi4+0x1da>
 800046c:	4640      	mov	r0, r8
 800046e:	e7d1      	b.n	8000414 <__udivmoddi4+0x258>
 8000470:	46d0      	mov	r8, sl
 8000472:	e77b      	b.n	800036c <__udivmoddi4+0x1b0>
 8000474:	3d02      	subs	r5, #2
 8000476:	4462      	add	r2, ip
 8000478:	e732      	b.n	80002e0 <__udivmoddi4+0x124>
 800047a:	4608      	mov	r0, r1
 800047c:	e70a      	b.n	8000294 <__udivmoddi4+0xd8>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	e742      	b.n	800030a <__udivmoddi4+0x14e>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <APPD_EnableCPU2+0x34>)
 8000490:	1d3c      	adds	r4, r7, #4
 8000492:	461d      	mov	r5, r3
 8000494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800049c:	c403      	stmia	r4!, {r0, r1}
 800049e:	8022      	strh	r2, [r4, #0]
 80004a0:	3402      	adds	r4, #2
 80004a2:	0c13      	lsrs	r3, r2, #16
 80004a4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80004a6:	f008 f931 	bl	800870c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4618      	mov	r0, r3
 80004ae:	f007 fbc2 	bl	8007c36 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004b2:	bf00      	nop
}
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bdb0      	pop	{r4, r5, r7, pc}
 80004ba:	bf00      	nop
 80004bc:	08009db8 	.word	0x08009db8

080004c0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80004ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004ce:	f023 0207 	bic.w	r2, r3, #7
 80004d2:	4905      	ldr	r1, [pc, #20]	; (80004e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	58000400 	.word	0x58000400

080004ec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_EXTI_EnableIT_32_63+0x24>)
 80004f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80004fa:	4905      	ldr	r1, [pc, #20]	; (8000510 <LL_EXTI_EnableIT_32_63+0x24>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4313      	orrs	r3, r2
 8000500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	58000800 	.word	0x58000800

08000514 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000522:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800052e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	021b      	lsls	r3, r3, #8
 8000536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053a:	4313      	orrs	r3, r2
 800053c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	cafecafe 	.word	0xcafecafe

08000550 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4313      	orrs	r3, r2
 800056a:	608b      	str	r3, [r1, #8]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <LL_DBGMCU_GetDeviceID+0x18>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e0042000 	.word	0xe0042000

08000594 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <LL_DBGMCU_GetRevisionID+0x18>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	0c1b      	lsrs	r3, r3, #16
 800059e:	b29b      	uxth	r3, r3
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e0042000 	.word	0xe0042000

080005b0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	22ff      	movs	r2, #255	; 0xff
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	22ca      	movs	r2, #202	; 0xca
 80005d6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2253      	movs	r2, #83	; 0x53
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f023 0207 	bic.w	r2, r3, #7
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	431a      	orrs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	609a      	str	r2, [r3, #8]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <MX_APPE_Config+0x18>)
 8000616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800061a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800061c:	f000 f824 	bl	8000668 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000620:	f000 f829 	bl	8000676 <Config_HSE>

  return;
 8000624:	bf00      	nop
}
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58004000 	.word	0x58004000

0800062c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000630:	f000 f835 	bl	800069e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000634:	f000 f84e 	bl	80006d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000638:	4903      	ldr	r1, [pc, #12]	; (8000648 <MX_APPE_Init+0x1c>)
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fd76 	bl	800112c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000640:	f000 f856 	bl	80006f0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000644:	bf00      	nop
}
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000170 	.word	0x20000170

0800064c <Init_Smps>:

void Init_Smps(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000650:	bf00      	nop
}
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <Init_Exti>:

void Init_Exti(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800065e:	2050      	movs	r0, #80	; 0x50
 8000660:	f7ff ff44 	bl	80004ec <LL_EXTI_EnableIT_32_63>

  return;
 8000664:	bf00      	nop
}
 8000666:	bd80      	pop	{r7, pc}

08000668 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800066c:	bf00      	nop
}
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800067c:	2000      	movs	r0, #0
 800067e:	f008 f8d1 	bl	8008824 <OTP_Read>
 8000682:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d005      	beq.n	8000696 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	799b      	ldrb	r3, [r3, #6]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff40 	bl	8000514 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000694:	bf00      	nop
 8000696:	bf00      	nop
}
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <System_Init>:

static void System_Init(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  Init_Smps();
 80006a2:	f7ff ffd3 	bl	800064c <Init_Smps>

  Init_Exti();
 80006a6:	f7ff ffd8 	bl	800065a <Init_Exti>

  Init_Rtc();
 80006aa:	f000 f803 	bl	80006b4 <Init_Rtc>

  return;
 80006ae:	bf00      	nop
}
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <Init_Rtc+0x1c>)
 80006ba:	f7ff ff86 	bl	80005ca <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006be:	2100      	movs	r1, #0
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <Init_Rtc+0x1c>)
 80006c2:	f7ff ff92 	bl	80005ea <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006c6:	4802      	ldr	r0, [pc, #8]	; (80006d0 <Init_Rtc+0x1c>)
 80006c8:	f7ff ff72 	bl	80005b0 <LL_RTC_EnableWriteProtection>

  return;
 80006cc:	bf00      	nop
}
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40002800 	.word	0x40002800

080006d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006dc:	f7ff ff38 	bl	8000550 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006e0:	f009 f8a4 	bl	800982c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006e4:	2004      	movs	r0, #4
 80006e6:	f7ff feeb 	bl	80004c0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80006ea:	bf00      	nop
}
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80006f6:	f007 fe53 	bl	80083a0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <appe_Tl_Init+0x50>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	2008      	movs	r0, #8
 8000700:	f009 f9d2 	bl	8009aa8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <appe_Tl_Init+0x54>)
 8000706:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <appe_Tl_Init+0x58>)
 800070a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	480e      	ldr	r0, [pc, #56]	; (800074c <appe_Tl_Init+0x5c>)
 8000712:	f007 fd07 	bl	8008124 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <appe_Tl_Init+0x60>)
 8000718:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <appe_Tl_Init+0x64>)
 800071c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <appe_Tl_Init+0x68>)
 8000720:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000722:	f240 533c 	movw	r3, #1340	; 0x53c
 8000726:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	4618      	mov	r0, r3
 800072e:	f007 ff79 	bl	8008624 <TL_MM_Init>

  TL_Enable();
 8000732:	f007 fe2f 	bl	8008394 <TL_Enable>

  return;
 8000736:	bf00      	nop
}
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	0800815d 	.word	0x0800815d
 8000744:	20030734 	.word	0x20030734
 8000748:	0800075d 	.word	0x0800075d
 800074c:	08000775 	.word	0x08000775
 8000750:	2003094c 	.word	0x2003094c
 8000754:	20030840 	.word	0x20030840
 8000758:	200301f8 	.word	0x200301f8

0800075c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000766:	bf00      	nop
}
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	330b      	adds	r3, #11
 8000782:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800078e:	2b07      	cmp	r3, #7
 8000790:	d81f      	bhi.n	80007d2 <APPE_SysUserEvtRx+0x5e>
 8000792:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <APPE_SysUserEvtRx+0x24>)
 8000794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000798:	080007b9 	.word	0x080007b9
 800079c:	080007cb 	.word	0x080007cb
 80007a0:	080007d3 	.word	0x080007d3
 80007a4:	080007d3 	.word	0x080007d3
 80007a8:	080007d3 	.word	0x080007d3
 80007ac:	080007d3 	.word	0x080007d3
 80007b0:	080007d3 	.word	0x080007d3
 80007b4:	080007d3 	.word	0x080007d3
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fa67 	bl	8007c90 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f81b 	bl	80007fe <APPE_SysEvtReadyProcessing>
    break;
 80007c8:	e004      	b.n	80007d4 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f806 	bl	80007dc <APPE_SysEvtError>
    break;
 80007d0:	e000      	b.n	80007d4 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80007d2:	bf00      	nop
  }

  return;
 80007d4:	bf00      	nop
}
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	330b      	adds	r3, #11
 80007ea:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3302      	adds	r3, #2
 80007f0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80007f2:	bf00      	nop
}
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b08a      	sub	sp, #40	; 0x28
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	330b      	adds	r3, #11
 8000822:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	3302      	adds	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d11d      	bne.n	800086e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000832:	f7ff fe29 	bl	8000488 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000836:	230f      	movs	r3, #15
 8000838:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800083a:	237f      	movs	r3, #127	; 0x7f
 800083c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800083e:	f7ff fea9 	bl	8000594 <LL_DBGMCU_GetRevisionID>
 8000842:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000846:	b29b      	uxth	r3, r3
 8000848:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800084a:	f7ff fe95 	bl	8000578 <LL_DBGMCU_GetDeviceID>
 800084e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	b29b      	uxth	r3, r3
 8000854:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4618      	mov	r0, r3
 800085c:	f007 fa02 	bl	8007c64 <SHCI_C2_Config>

    APP_BLE_Init();
 8000860:	f008 f8ea 	bl	8008a38 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000864:	2100      	movs	r1, #0
 8000866:	2001      	movs	r0, #1
 8000868:	f008 fff2 	bl	8009850 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800086c:	e007      	b.n	800087e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d103      	bne.n	800087e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
  return;
 800087c:	bf00      	nop
 800087e:	bf00      	nop
}
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800088a:	f04f 30ff 	mov.w	r0, #4294967295
 800088e:	f009 f80f 	bl	80098b0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800089a:	bf00      	nop
}
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008ae:	f04f 30ff 	mov.w	r0, #4294967295
 80008b2:	f008 fffd 	bl	80098b0 <UTIL_SEQ_Run>
  return;
 80008b6:	bf00      	nop
}
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2008      	movs	r0, #8
 80008ca:	f009 f90f 	bl	8009aec <UTIL_SEQ_SetTask>
  return;
 80008ce:	bf00      	nop
}
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008de:	2002      	movs	r0, #2
 80008e0:	f009 f970 	bl	8009bc4 <UTIL_SEQ_SetEvt>
  return;
 80008e4:	bf00      	nop
}
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008f4:	2002      	movs	r0, #2
 80008f6:	f009 f985 	bl	8009c04 <UTIL_SEQ_WaitEvt>
  return;
 80008fa:	bf00      	nop
}
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <LL_EXTI_EnableIT_0_31>:
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <LL_EXTI_EnableIT_0_31+0x24>)
 800090e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000912:	4905      	ldr	r1, [pc, #20]	; (8000928 <LL_EXTI_EnableIT_0_31+0x24>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4313      	orrs	r3, r2
 8000918:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	58000800 	.word	0x58000800

0800092c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4904      	ldr	r1, [pc, #16]	; (800094c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4313      	orrs	r3, r2
 800093e:	600b      	str	r3, [r1, #0]

}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	58000800 	.word	0x58000800

08000950 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <ReadRtcSsrValue+0x3c>)
 8000958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095a:	b29b      	uxth	r3, r3
 800095c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <ReadRtcSsrValue+0x3c>)
 8000960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000962:	b29b      	uxth	r3, r3
 8000964:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000966:	e005      	b.n	8000974 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <ReadRtcSsrValue+0x3c>)
 800096e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000970:	b29b      	uxth	r3, r3
 8000972:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	429a      	cmp	r2, r3
 800097a:	d1f5      	bne.n	8000968 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800097c:	683b      	ldr	r3, [r7, #0]
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40002800 	.word	0x40002800

08000990 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	4613      	mov	r3, r2
 800099e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80009a0:	79ba      	ldrb	r2, [r7, #6]
 80009a2:	491d      	ldr	r1, [pc, #116]	; (8000a18 <LinkTimerAfter+0x88>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3315      	adds	r3, #21
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d009      	beq.n	80009ce <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009ba:	7bfa      	ldrb	r2, [r7, #15]
 80009bc:	4916      	ldr	r1, [pc, #88]	; (8000a18 <LinkTimerAfter+0x88>)
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	440b      	add	r3, r1
 80009c8:	3314      	adds	r3, #20
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	4911      	ldr	r1, [pc, #68]	; (8000a18 <LinkTimerAfter+0x88>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3315      	adds	r3, #21
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <LinkTimerAfter+0x88>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	3314      	adds	r3, #20
 80009f2:	79ba      	ldrb	r2, [r7, #6]
 80009f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009f6:	79ba      	ldrb	r2, [r7, #6]
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <LinkTimerAfter+0x88>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	440b      	add	r3, r1
 8000a04:	3315      	adds	r3, #21
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	701a      	strb	r2, [r3, #0]

  return;
 8000a0a:	bf00      	nop
}
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000094 	.word	0x20000094

08000a1c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	460a      	mov	r2, r1
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <LinkTimerBefore+0xb8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	79ba      	ldrb	r2, [r7, #6]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d032      	beq.n	8000a9e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a38:	79ba      	ldrb	r2, [r7, #6]
 8000a3a:	4927      	ldr	r1, [pc, #156]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	440b      	add	r3, r1
 8000a46:	3314      	adds	r3, #20
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a4c:	7bfa      	ldrb	r2, [r7, #15]
 8000a4e:	4922      	ldr	r1, [pc, #136]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	3315      	adds	r3, #21
 8000a5c:	79fa      	ldrb	r2, [r7, #7]
 8000a5e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	491d      	ldr	r1, [pc, #116]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3315      	adds	r3, #21
 8000a70:	79ba      	ldrb	r2, [r7, #6]
 8000a72:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	4918      	ldr	r1, [pc, #96]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	3314      	adds	r3, #20
 8000a84:	7bfa      	ldrb	r2, [r7, #15]
 8000a86:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a88:	79ba      	ldrb	r2, [r7, #6]
 8000a8a:	4913      	ldr	r1, [pc, #76]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	3314      	adds	r3, #20
 8000a98:	79fa      	ldrb	r2, [r7, #7]
 8000a9a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a9c:	e014      	b.n	8000ac8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	440b      	add	r3, r1
 8000aac:	3315      	adds	r3, #21
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ab2:	79ba      	ldrb	r2, [r7, #6]
 8000ab4:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3314      	adds	r3, #20
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	701a      	strb	r2, [r3, #0]
  return;
 8000ac6:	bf00      	nop
}
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000124 	.word	0x20000124
 8000ad8:	20000094 	.word	0x20000094

08000adc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ae6:	4b4e      	ldr	r3, [pc, #312]	; (8000c20 <linkTimer+0x144>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b06      	cmp	r3, #6
 8000aee:	d118      	bne.n	8000b22 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000af0:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <linkTimer+0x144>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <linkTimer+0x148>)
 8000af8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000afa:	4a49      	ldr	r2, [pc, #292]	; (8000c20 <linkTimer+0x144>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000b00:	79fa      	ldrb	r2, [r7, #7]
 8000b02:	4949      	ldr	r1, [pc, #292]	; (8000c28 <linkTimer+0x14c>)
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	440b      	add	r3, r1
 8000b0e:	3315      	adds	r3, #21
 8000b10:	2206      	movs	r2, #6
 8000b12:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b14:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <linkTimer+0x150>)
 8000b16:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	81fb      	strh	r3, [r7, #14]
 8000b20:	e078      	b.n	8000c14 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b22:	f000 f909 	bl	8000d38 <ReturnTimeElapsed>
 8000b26:	4603      	mov	r3, r0
 8000b28:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	493e      	ldr	r1, [pc, #248]	; (8000c28 <linkTimer+0x14c>)
 8000b2e:	4613      	mov	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	440b      	add	r3, r1
 8000b38:	3308      	adds	r3, #8
 8000b3a:	6819      	ldr	r1, [r3, #0]
 8000b3c:	89fb      	ldrh	r3, [r7, #14]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	4419      	add	r1, r3
 8000b42:	4839      	ldr	r0, [pc, #228]	; (8000c28 <linkTimer+0x14c>)
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	4403      	add	r3, r0
 8000b4e:	3308      	adds	r3, #8
 8000b50:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b52:	79fa      	ldrb	r2, [r7, #7]
 8000b54:	4934      	ldr	r1, [pc, #208]	; (8000c28 <linkTimer+0x14c>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	440b      	add	r3, r1
 8000b60:	3308      	adds	r3, #8
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <linkTimer+0x144>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4a2e      	ldr	r2, [pc, #184]	; (8000c28 <linkTimer+0x14c>)
 8000b70:	460b      	mov	r3, r1
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	440b      	add	r3, r1
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	4413      	add	r3, r2
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d337      	bcc.n	8000bf4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <linkTimer+0x144>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b8a:	7b7a      	ldrb	r2, [r7, #13]
 8000b8c:	4926      	ldr	r1, [pc, #152]	; (8000c28 <linkTimer+0x14c>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3315      	adds	r3, #21
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b9e:	e013      	b.n	8000bc8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ba0:	7b7a      	ldrb	r2, [r7, #13]
 8000ba2:	4921      	ldr	r1, [pc, #132]	; (8000c28 <linkTimer+0x14c>)
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	440b      	add	r3, r1
 8000bae:	3315      	adds	r3, #21
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000bb4:	7b7a      	ldrb	r2, [r7, #13]
 8000bb6:	491c      	ldr	r1, [pc, #112]	; (8000c28 <linkTimer+0x14c>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3315      	adds	r3, #21
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bc8:	7b3b      	ldrb	r3, [r7, #12]
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d00b      	beq.n	8000be6 <linkTimer+0x10a>
 8000bce:	7b3a      	ldrb	r2, [r7, #12]
 8000bd0:	4915      	ldr	r1, [pc, #84]	; (8000c28 <linkTimer+0x14c>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	3308      	adds	r3, #8
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d2dc      	bcs.n	8000ba0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000be6:	7b7a      	ldrb	r2, [r7, #13]
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fecf 	bl	8000990 <LinkTimerAfter>
 8000bf2:	e00f      	b.n	8000c14 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <linkTimer+0x144>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff0c 	bl	8000a1c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <linkTimer+0x144>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <linkTimer+0x148>)
 8000c0c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <linkTimer+0x144>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c14:	89fb      	ldrh	r3, [r7, #14]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000124 	.word	0x20000124
 8000c24:	20000125 	.word	0x20000125
 8000c28:	20000094 	.word	0x20000094
 8000c2c:	20000128 	.word	0x20000128

08000c30 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	460a      	mov	r2, r1
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c40:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <UnlinkTimer+0xf8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d111      	bne.n	8000c70 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <UnlinkTimer+0xf8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <UnlinkTimer+0xfc>)
 8000c54:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	4935      	ldr	r1, [pc, #212]	; (8000d30 <UnlinkTimer+0x100>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	3315      	adds	r3, #21
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <UnlinkTimer+0xf8>)
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	e03e      	b.n	8000cee <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c70:	79fa      	ldrb	r2, [r7, #7]
 8000c72:	492f      	ldr	r1, [pc, #188]	; (8000d30 <UnlinkTimer+0x100>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	440b      	add	r3, r1
 8000c7e:	3314      	adds	r3, #20
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c84:	79fa      	ldrb	r2, [r7, #7]
 8000c86:	492a      	ldr	r1, [pc, #168]	; (8000d30 <UnlinkTimer+0x100>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	440b      	add	r3, r1
 8000c92:	3315      	adds	r3, #21
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c98:	79f9      	ldrb	r1, [r7, #7]
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	4824      	ldr	r0, [pc, #144]	; (8000d30 <UnlinkTimer+0x100>)
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	440b      	add	r3, r1
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	4403      	add	r3, r0
 8000ca8:	3315      	adds	r3, #21
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2d8      	uxtb	r0, r3
 8000cae:	4920      	ldr	r1, [pc, #128]	; (8000d30 <UnlinkTimer+0x100>)
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	440b      	add	r3, r1
 8000cba:	3315      	adds	r3, #21
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cc0:	7bbb      	ldrb	r3, [r7, #14]
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d013      	beq.n	8000cee <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cc6:	79f9      	ldrb	r1, [r7, #7]
 8000cc8:	7bba      	ldrb	r2, [r7, #14]
 8000cca:	4819      	ldr	r0, [pc, #100]	; (8000d30 <UnlinkTimer+0x100>)
 8000ccc:	460b      	mov	r3, r1
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	440b      	add	r3, r1
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	4403      	add	r3, r0
 8000cd6:	3314      	adds	r3, #20
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2d8      	uxtb	r0, r3
 8000cdc:	4914      	ldr	r1, [pc, #80]	; (8000d30 <UnlinkTimer+0x100>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3314      	adds	r3, #20
 8000cea:	4602      	mov	r2, r0
 8000cec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000cee:	79fa      	ldrb	r2, [r7, #7]
 8000cf0:	490f      	ldr	r1, [pc, #60]	; (8000d30 <UnlinkTimer+0x100>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	440b      	add	r3, r1
 8000cfc:	330c      	adds	r3, #12
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <UnlinkTimer+0xf8>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b06      	cmp	r3, #6
 8000d0a:	d107      	bne.n	8000d1c <UnlinkTimer+0xec>
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <UnlinkTimer+0x104>)
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
}
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	20000124 	.word	0x20000124
 8000d2c:	20000125 	.word	0x20000125
 8000d30:	20000094 	.word	0x20000094
 8000d34:	20000128 	.word	0x20000128

08000d38 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d46:	d026      	beq.n	8000d96 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d48:	f7ff fe02 	bl	8000950 <ReadRtcSsrValue>
 8000d4c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d805      	bhi.n	8000d64 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	e00a      	b.n	8000d7a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <ReturnTimeElapsed+0x74>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <ReturnTimeElapsed+0x78>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <ReturnTimeElapsed+0x7c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	40d3      	lsrs	r3, r2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	e001      	b.n	8000d9a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	b29b      	uxth	r3, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000128 	.word	0x20000128
 8000dac:	20000130 	.word	0x20000130
 8000db0:	2000012e 	.word	0x2000012e
 8000db4:	2000012d 	.word	0x2000012d

08000db8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d108      	bne.n	8000dda <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dc8:	f7ff fdc2 	bl	8000950 <ReadRtcSsrValue>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a21      	ldr	r2, [pc, #132]	; (8000e54 <RestartWakeupCounter+0x9c>)
 8000dd0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f001 f9c7 	bl	8002166 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dd8:	e039      	b.n	8000e4e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d803      	bhi.n	8000de8 <RestartWakeupCounter+0x30>
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <RestartWakeupCounter+0xa0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d002      	beq.n	8000dee <RestartWakeupCounter+0x36>
      Value -= 1;
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000dee:	bf00      	nop
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f8      	beq.n	8000df0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e0e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <RestartWakeupCounter+0xa8>)
 8000e12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e16:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f001 f9b2 	bl	8002182 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <RestartWakeupCounter+0xac>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	041b      	lsls	r3, r3, #16
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	490e      	ldr	r1, [pc, #56]	; (8000e64 <RestartWakeupCounter+0xac>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e2e:	f7ff fd8f 	bl	8000950 <ReadRtcSsrValue>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <RestartWakeupCounter+0x9c>)
 8000e36:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e46:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e48:	f3af 8000 	nop.w
  return ;
 8000e4c:	bf00      	nop
}
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000128 	.word	0x20000128
 8000e58:	2000012d 	.word	0x2000012d
 8000e5c:	20000170 	.word	0x20000170
 8000e60:	58000800 	.word	0x58000800
 8000e64:	40002800 	.word	0x40002800

08000e68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e6e:	4b45      	ldr	r3, [pc, #276]	; (8000f84 <RescheduleTimerList+0x11c>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7a:	d107      	bne.n	8000e8c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e7c:	bf00      	nop
 8000e7e:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <RescheduleTimerList+0x120>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f8      	bne.n	8000e7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000e8c:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <RescheduleTimerList+0x120>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <RescheduleTimerList+0x120>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e9a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000e9c:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <RescheduleTimerList+0x124>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	493a      	ldr	r1, [pc, #232]	; (8000f90 <RescheduleTimerList+0x128>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000eb6:	f7ff ff3f 	bl	8000d38 <ReturnTimeElapsed>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d205      	bcs.n	8000ed2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000eca:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e04d      	b.n	8000f6e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	4a30      	ldr	r2, [pc, #192]	; (8000f98 <RescheduleTimerList+0x130>)
 8000ed6:	8812      	ldrh	r2, [r2, #0]
 8000ed8:	b292      	uxth	r2, r2
 8000eda:	4413      	add	r3, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d906      	bls.n	8000ef2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <RescheduleTimerList+0x130>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e03d      	b.n	8000f6e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f02:	e034      	b.n	8000f6e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	4922      	ldr	r1, [pc, #136]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	440b      	add	r3, r1
 8000f12:	3308      	adds	r3, #8
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d20a      	bcs.n	8000f32 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	491c      	ldr	r1, [pc, #112]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e013      	b.n	8000f5a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	4916      	ldr	r1, [pc, #88]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	3308      	adds	r3, #8
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	1ac9      	subs	r1, r1, r3
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4403      	add	r3, r0
 8000f56:	3308      	adds	r3, #8
 8000f58:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3315      	adds	r3, #21
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b06      	cmp	r3, #6
 8000f72:	d1c7      	bne.n	8000f04 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f74:	89bb      	ldrh	r3, [r7, #12]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff1e 	bl	8000db8 <RestartWakeupCounter>

  return ;
 8000f7c:	bf00      	nop
}
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40002800 	.word	0x40002800
 8000f88:	20000170 	.word	0x20000170
 8000f8c:	20000124 	.word	0x20000124
 8000f90:	20000094 	.word	0x20000094
 8000f94:	2000012c 	.word	0x2000012c
 8000f98:	20000132 	.word	0x20000132

08000f9c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8000fa6:	617b      	str	r3, [r7, #20]
  return(result);
 8000fa8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fb0:	4b59      	ldr	r3, [pc, #356]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	22ca      	movs	r2, #202	; 0xca
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
 8000fb8:	4b57      	ldr	r3, [pc, #348]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2253      	movs	r2, #83	; 0x53
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fc0:	4b55      	ldr	r3, [pc, #340]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	4b54      	ldr	r3, [pc, #336]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fce:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fd0:	4b52      	ldr	r3, [pc, #328]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fd8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fdc:	4950      	ldr	r1, [pc, #320]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	330c      	adds	r3, #12
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d16e      	bne.n	80010d0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ff2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ff6:	494a      	ldr	r1, [pc, #296]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001006:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800100a:	4945      	ldr	r1, [pc, #276]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3310      	adds	r3, #16
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800101c:	4b41      	ldr	r3, [pc, #260]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d04c      	beq.n	80010c0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001026:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800102a:	493d      	ldr	r1, [pc, #244]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	330d      	adds	r3, #13
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d124      	bne.n	800108a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001044:	2101      	movs	r1, #1
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fdf2 	bl	8000c30 <UnlinkTimer>
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	f383 8810 	msr	PRIMASK, r3
}
 8001056:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001058:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800105c:	4930      	ldr	r1, [pc, #192]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	3304      	adds	r3, #4
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f9b8 	bl	80013e8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	22ca      	movs	r2, #202	; 0xca
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2253      	movs	r2, #83	; 0x53
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
 8001088:	e012      	b.n	80010b0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f383 8810 	msr	PRIMASK, r3
}
 8001094:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f920 	bl	80012e0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	22ca      	movs	r2, #202	; 0xca
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2253      	movs	r2, #83	; 0x53
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	4619      	mov	r1, r3
 80010b8:	69b8      	ldr	r0, [r7, #24]
 80010ba:	f000 fa1b 	bl	80014f4 <HW_TS_RTC_Int_AppNot>
 80010be:	e022      	b.n	8001106 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010c0:	f7ff fed2 	bl	8000e68 <RescheduleTimerList>
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f383 8810 	msr	PRIMASK, r3
}
 80010ce:	e01a      	b.n	8001106 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010d0:	bf00      	nop
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f8      	beq.n	80010d2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80010f0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f383 8810 	msr	PRIMASK, r3
}
 8001104:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	22ff      	movs	r2, #255	; 0xff
 800110c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800110e:	bf00      	nop
}
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000170 	.word	0x20000170
 800111c:	20000124 	.word	0x20000124
 8001120:	20000094 	.word	0x20000094
 8001124:	2000012c 	.word	0x2000012c
 8001128:	58000800 	.word	0x58000800

0800112c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001138:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <HW_TS_Init+0x188>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	22ca      	movs	r2, #202	; 0xca
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
 8001140:	4b5c      	ldr	r3, [pc, #368]	; (80012b4 <HW_TS_Init+0x188>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2253      	movs	r2, #83	; 0x53
 8001146:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001148:	4b5b      	ldr	r3, [pc, #364]	; (80012b8 <HW_TS_Init+0x18c>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a5a      	ldr	r2, [pc, #360]	; (80012b8 <HW_TS_Init+0x18c>)
 800114e:	f043 0320 	orr.w	r3, r3, #32
 8001152:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001154:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <HW_TS_Init+0x18c>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f1c3 0304 	rsb	r3, r3, #4
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b55      	ldr	r3, [pc, #340]	; (80012bc <HW_TS_Init+0x190>)
 8001168:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <HW_TS_Init+0x18c>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001172:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001176:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	fa92 f2a2 	rbit	r2, r2
 800117e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	2a00      	cmp	r2, #0
 8001188:	d101      	bne.n	800118e <HW_TS_Init+0x62>
  {
    return 32U;
 800118a:	2220      	movs	r2, #32
 800118c:	e003      	b.n	8001196 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	fab2 f282 	clz	r2, r2
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	40d3      	lsrs	r3, r2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3301      	adds	r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <HW_TS_Init+0x194>)
 80011a0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <HW_TS_Init+0x18c>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <HW_TS_Init+0x198>)
 80011b4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011b6:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HW_TS_Init+0x198>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	4a40      	ldr	r2, [pc, #256]	; (80012c0 <HW_TS_Init+0x194>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80011c8:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <HW_TS_Init+0x190>)
 80011ca:	7812      	ldrb	r2, [r2, #0]
 80011cc:	40d3      	lsrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d904      	bls.n	80011e4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HW_TS_Init+0x19c>)
 80011dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e0:	801a      	strh	r2, [r3, #0]
 80011e2:	e003      	b.n	80011ec <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <HW_TS_Init+0x19c>)
 80011ea:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011f0:	f7ff fb9c 	bl	800092c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011f8:	f7ff fb84 	bl	8000904 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d13d      	bne.n	800127e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <HW_TS_Init+0x1a0>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <HW_TS_Init+0x1a4>)
 800120a:	f04f 32ff 	mov.w	r2, #4294967295
 800120e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001210:	2300      	movs	r3, #0
 8001212:	77fb      	strb	r3, [r7, #31]
 8001214:	e00c      	b.n	8001230 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001216:	7ffa      	ldrb	r2, [r7, #31]
 8001218:	492e      	ldr	r1, [pc, #184]	; (80012d4 <HW_TS_Init+0x1a8>)
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	440b      	add	r3, r1
 8001224:	330c      	adds	r3, #12
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	3301      	adds	r3, #1
 800122e:	77fb      	strb	r3, [r7, #31]
 8001230:	7ffb      	ldrb	r3, [r7, #31]
 8001232:	2b05      	cmp	r3, #5
 8001234:	d9ef      	bls.n	8001216 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HW_TS_Init+0x1ac>)
 8001238:	2206      	movs	r2, #6
 800123a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HW_TS_Init+0x188>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HW_TS_Init+0x188>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800124a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HW_TS_Init+0x188>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HW_TS_Init+0x188>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800125c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <HW_TS_Init+0x1b0>)
 8001260:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001264:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001266:	2003      	movs	r0, #3
 8001268:	f000 ff8b 	bl	8002182 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HW_TS_Init+0x188>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HW_TS_Init+0x188>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	e009      	b.n	8001292 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HW_TS_Init+0x188>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 ff6a 	bl	8002166 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HW_TS_Init+0x188>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	22ff      	movs	r2, #255	; 0xff
 8001298:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800129a:	2200      	movs	r2, #0
 800129c:	2103      	movs	r1, #3
 800129e:	2003      	movs	r0, #3
 80012a0:	f000 ff1f 	bl	80020e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 ff36 	bl	8002116 <HAL_NVIC_EnableIRQ>

  return;
 80012aa:	bf00      	nop
}
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000170 	.word	0x20000170
 80012b8:	40002800 	.word	0x40002800
 80012bc:	2000012d 	.word	0x2000012d
 80012c0:	2000012e 	.word	0x2000012e
 80012c4:	20000130 	.word	0x20000130
 80012c8:	20000132 	.word	0x20000132
 80012cc:	2000012c 	.word	0x2000012c
 80012d0:	20000128 	.word	0x20000128
 80012d4:	20000094 	.word	0x20000094
 80012d8:	20000124 	.word	0x20000124
 80012dc:	58000800 	.word	0x58000800

080012e0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012ea:	f3ef 8310 	mrs	r3, PRIMASK
 80012ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80012f0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 ff1a 	bl	8002132 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	22ca      	movs	r2, #202	; 0xca
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2253      	movs	r2, #83	; 0x53
 800130c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	4930      	ldr	r1, [pc, #192]	; (80013d4 <HW_TS_Stop+0xf4>)
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	330c      	adds	r3, #12
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d142      	bne.n	80013ac <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fc80 	bl	8000c30 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HW_TS_Stop+0xf8>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001336:	7cfb      	ldrb	r3, [r7, #19]
 8001338:	2b06      	cmp	r3, #6
 800133a:	d12f      	bne.n	800139c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HW_TS_Stop+0xfc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001348:	d107      	bne.n	800135a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800134a:	bf00      	nop
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HW_TS_Stop+0xf0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f8      	bne.n	800134c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HW_TS_Stop+0xf0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001368:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800136a:	bf00      	nop
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HW_TS_Stop+0xf0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f8      	beq.n	800136c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HW_TS_Stop+0xf0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800138a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HW_TS_Stop+0x100>)
 800138e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001392:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001394:	2003      	movs	r0, #3
 8001396:	f000 fef4 	bl	8002182 <HAL_NVIC_ClearPendingIRQ>
 800139a:	e007      	b.n	80013ac <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HW_TS_Stop+0x104>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	7cfa      	ldrb	r2, [r7, #19]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80013a8:	f7ff fd5e 	bl	8000e68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HW_TS_Stop+0xf0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	22ff      	movs	r2, #255	; 0xff
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 feae 	bl	8002116 <HAL_NVIC_EnableIRQ>
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	f383 8810 	msr	PRIMASK, r3
}
 80013c4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013c6:	bf00      	nop
}
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000170 	.word	0x20000170
 80013d4:	20000094 	.word	0x20000094
 80013d8:	20000124 	.word	0x20000124
 80013dc:	40002800 	.word	0x40002800
 80013e0:	58000800 	.word	0x58000800
 80013e4:	20000125 	.word	0x20000125

080013e8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	493b      	ldr	r1, [pc, #236]	; (80014e4 <HW_TS_Start+0xfc>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	330c      	adds	r3, #12
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d103      	bne.n	8001414 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff66 	bl	80012e0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001414:	f3ef 8310 	mrs	r3, PRIMASK
 8001418:	60fb      	str	r3, [r7, #12]
  return(result);
 800141a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800141c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800141e:	b672      	cpsid	i
}
 8001420:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001422:	2003      	movs	r0, #3
 8001424:	f000 fe85 	bl	8002132 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <HW_TS_Start+0x100>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	22ca      	movs	r2, #202	; 0xca
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HW_TS_Start+0x100>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2253      	movs	r2, #83	; 0x53
 8001436:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	492a      	ldr	r1, [pc, #168]	; (80014e4 <HW_TS_Start+0xfc>)
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	330c      	adds	r3, #12
 8001448:	2202      	movs	r2, #2
 800144a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	4925      	ldr	r1, [pc, #148]	; (80014e4 <HW_TS_Start+0xfc>)
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	3308      	adds	r3, #8
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	4920      	ldr	r1, [pc, #128]	; (80014e4 <HW_TS_Start+0xfc>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3304      	adds	r3, #4
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fb30 	bl	8000adc <linkTimer>
 800147c:	4603      	mov	r3, r0
 800147e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HW_TS_Start+0x104>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HW_TS_Start+0x108>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	7c7a      	ldrb	r2, [r7, #17]
 800148e:	429a      	cmp	r2, r3
 8001490:	d002      	beq.n	8001498 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001492:	f7ff fce9 	bl	8000e68 <RescheduleTimerList>
 8001496:	e013      	b.n	80014c0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	4912      	ldr	r1, [pc, #72]	; (80014e4 <HW_TS_Start+0xfc>)
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	3308      	adds	r3, #8
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	8a7b      	ldrh	r3, [r7, #18]
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	1ac9      	subs	r1, r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <HW_TS_Start+0xfc>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4403      	add	r3, r0
 80014bc:	3308      	adds	r3, #8
 80014be:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HW_TS_Start+0x100>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	22ff      	movs	r2, #255	; 0xff
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 fe24 	bl	8002116 <HAL_NVIC_EnableIRQ>
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f383 8810 	msr	PRIMASK, r3
}
 80014d8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014da:	bf00      	nop
}
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000094 	.word	0x20000094
 80014e8:	20000170 	.word	0x20000170
 80014ec:	20000124 	.word	0x20000124
 80014f0:	20000125 	.word	0x20000125

080014f4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	460b      	mov	r3, r1
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4798      	blx	r3

  return;
 8001506:	bf00      	nop
}
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <LL_RCC_LSE_SetDriveCapability>:
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151e:	f023 0218 	bic.w	r2, r3, #24
 8001522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4313      	orrs	r3, r2
 800152a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4313      	orrs	r3, r2
 8001550:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4013      	ands	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b09a      	sub	sp, #104	; 0x68
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001572:	f000 fbf5 	bl	8001d60 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001576:	f7ff f84b 	bl	8000610 <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157a:	f000 f81b 	bl	80015b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800157e:	f000 f87b 	bl	8001678 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001582:	f000 f899 	bl	80016b8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001586:	f000 f933 	bl	80017f0 <MX_GPIO_Init>
  MX_RTC_Init();
 800158a:	f000 f8b1 	bl	80016f0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800158e:	f000 f8e3 	bl	8001758 <MX_USART1_UART_Init>
  MX_RF_Init();
 8001592:	f000 f8a5 	bl	80016e0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, data, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	4904      	ldr	r1, [pc, #16]	; (80015ac <main+0x40>)
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <main+0x44>)
 800159c:	f003 f9a8 	bl	80048f0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80015a0:	f7ff f844 	bl	800062c <MX_APPE_Init>

  while (1)
  {
    /* USER CODE END WHILE */
	//printf("test \n\r");
    MX_APPE_Process();
 80015a4:	f7ff f96f 	bl	8000886 <MX_APPE_Process>
 80015a8:	e7fc      	b.n	80015a4 <main+0x38>
 80015aa:	bf00      	nop
 80015ac:	2000022c 	.word	0x2000022c
 80015b0:	20000194 	.word	0x20000194

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b09a      	sub	sp, #104	; 0x68
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0320 	add.w	r3, r7, #32
 80015be:	2248      	movs	r2, #72	; 0x48
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f008 fbb2 	bl	8009d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015da:	f001 f903 	bl	80027e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80015de:	2010      	movs	r0, #16
 80015e0:	f7ff ff95 	bl	800150e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <SystemClock_Config+0xc0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ec:	4a21      	ldr	r2, [pc, #132]	; (8001674 <SystemClock_Config+0xc0>)
 80015ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <SystemClock_Config+0xc0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001600:	2327      	movs	r3, #39	; 0x27
 8001602:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800160a:	2301      	movs	r3, #1
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001614:	2301      	movs	r3, #1
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001618:	2340      	movs	r3, #64	; 0x40
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800161c:	2300      	movs	r3, #0
 800161e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001620:	23a0      	movs	r3, #160	; 0xa0
 8001622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001624:	2300      	movs	r3, #0
 8001626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001628:	f107 0320 	add.w	r3, r7, #32
 800162c:	4618      	mov	r0, r3
 800162e:	f001 fc6d 	bl	8002f0c <HAL_RCC_OscConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001638:	f000 f98a 	bl	8001950 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800163c:	236f      	movs	r3, #111	; 0x6f
 800163e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2101      	movs	r1, #1
 800165c:	4618      	mov	r0, r3
 800165e:	f001 ffc9 	bl	80035f4 <HAL_RCC_ClockConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001668:	f000 f972 	bl	8001950 <Error_Handler>
  }
}
 800166c:	bf00      	nop
 800166e:	3768      	adds	r7, #104	; 0x68
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	58000400 	.word	0x58000400

08001678 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	; 0x50
 800167c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800167e:	463b      	mov	r3, r7
 8001680:	2250      	movs	r2, #80	; 0x50
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f008 fb51 	bl	8009d2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800168a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800168e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001694:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001696:	2300      	movs	r3, #0
 8001698:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800169a:	2300      	movs	r3, #0
 800169c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169e:	463b      	mov	r3, r7
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 fbe4 	bl	8003e6e <HAL_RCCEx_PeriphCLKConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80016ac:	f000 f950 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016b0:	bf00      	nop
 80016b2:	3750      	adds	r7, #80	; 0x50
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_IPCC_Init+0x20>)
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <MX_IPCC_Init+0x24>)
 80016c0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_IPCC_Init+0x20>)
 80016c4:	f001 f808 	bl	80026d8 <HAL_IPCC_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80016ce:	f000 f93f 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000134 	.word	0x20000134
 80016dc:	58000c00 	.word	0x58000c00

080016e0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_RTC_Init+0x60>)
 80016f6:	4a17      	ldr	r2, [pc, #92]	; (8001754 <MX_RTC_Init+0x64>)
 80016f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_RTC_Init+0x60>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_RTC_Init+0x60>)
 8001702:	220f      	movs	r2, #15
 8001704:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_RTC_Init+0x60>)
 8001708:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800170c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <MX_RTC_Init+0x60>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_RTC_Init+0x60>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <MX_RTC_Init+0x60>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_RTC_Init+0x60>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001726:	480a      	ldr	r0, [pc, #40]	; (8001750 <MX_RTC_Init+0x60>)
 8001728:	f002 fe28 	bl	800437c <HAL_RTC_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001732:	f000 f90d 	bl	8001950 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_RTC_Init+0x60>)
 800173c:	f002 ff1e 	bl	800457c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001746:	f000 f903 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000170 	.word	0x20000170
 8001754:	40002800 	.word	0x40002800

08001758 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800175c:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 800175e:	4a23      	ldr	r2, [pc, #140]	; (80017ec <MX_USART1_UART_Init+0x94>)
 8001760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 8001764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179a:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a0:	4811      	ldr	r0, [pc, #68]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 80017a2:	f002 ffc7 	bl	8004734 <HAL_UART_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017ac:	f000 f8d0 	bl	8001950 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b0:	2100      	movs	r1, #0
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 80017b4:	f004 ff4b 	bl	800664e <HAL_UARTEx_SetTxFifoThreshold>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017be:	f000 f8c7 	bl	8001950 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c2:	2100      	movs	r1, #0
 80017c4:	4808      	ldr	r0, [pc, #32]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 80017c6:	f004 ff80 	bl	80066ca <HAL_UARTEx_SetRxFifoThreshold>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017d0:	f000 f8be 	bl	8001950 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_USART1_UART_Init+0x90>)
 80017d6:	f004 ff01 	bl	80065dc <HAL_UARTEx_DisableFifoMode>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017e0:	f000 f8b6 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000194 	.word	0x20000194
 80017ec:	40013800 	.word	0x40013800

080017f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001804:	2004      	movs	r0, #4
 8001806:	f7ff fe98 	bl	800153a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	2002      	movs	r0, #2
 800180c:	f7ff fe95 	bl	800153a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	2001      	movs	r0, #1
 8001812:	f7ff fe92 	bl	800153a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001816:	2008      	movs	r0, #8
 8001818:	f7ff fe8f 	bl	800153a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	2123      	movs	r1, #35	; 0x23
 8001820:	481d      	ldr	r0, [pc, #116]	; (8001898 <MX_GPIO_Init+0xa8>)
 8001822:	f000 ff03 	bl	800262c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001826:	2310      	movs	r3, #16
 8001828:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182e:	2301      	movs	r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4819      	ldr	r0, [pc, #100]	; (800189c <MX_GPIO_Init+0xac>)
 8001838:	f000 fd70 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800183c:	2323      	movs	r3, #35	; 0x23
 800183e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4811      	ldr	r0, [pc, #68]	; (8001898 <MX_GPIO_Init+0xa8>)
 8001852:	f000 fd63 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001856:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800185a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001868:	230a      	movs	r3, #10
 800186a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001874:	f000 fd52 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001878:	2303      	movs	r3, #3
 800187a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_GPIO_Init+0xb0>)
 800188a:	f000 fd47 	bl	800231c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	48000400 	.word	0x48000400
 800189c:	48000800 	.word	0x48000800
 80018a0:	48000c00 	.word	0x48000c00

080018a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  uint8_t i;
  if (huart->Instance == USART1){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a20      	ldr	r2, [pc, #128]	; (8001934 <HAL_UART_RxCpltCallback+0x90>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d139      	bne.n	800192a <HAL_UART_RxCpltCallback+0x86>
	  if (buffer_index == 0){
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_UART_RxCpltCallback+0x94>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10c      	bne.n	80018d8 <HAL_UART_RxCpltCallback+0x34>
		  for (i=0; i<100; i++){
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e006      	b.n	80018d2 <HAL_UART_RxCpltCallback+0x2e>
			  other_buffer[i] = 0;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_UART_RxCpltCallback+0x98>)
 80018c8:	2100      	movs	r1, #0
 80018ca:	54d1      	strb	r1, [r2, r3]
		  for (i=0; i<100; i++){
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	3301      	adds	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b63      	cmp	r3, #99	; 0x63
 80018d6:	d9f5      	bls.n	80018c4 <HAL_UART_RxCpltCallback+0x20>
		  }
	  }
	  if (data[0] != 13){
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_UART_RxCpltCallback+0x9c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b0d      	cmp	r3, #13
 80018de:	d00d      	beq.n	80018fc <HAL_UART_RxCpltCallback+0x58>
		  other_buffer[++buffer_index] = data[0];
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_UART_RxCpltCallback+0x94>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_UART_RxCpltCallback+0x94>)
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_UART_RxCpltCallback+0x94>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_UART_RxCpltCallback+0x9c>)
 80018f4:	7819      	ldrb	r1, [r3, #0]
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_UART_RxCpltCallback+0x98>)
 80018f8:	5499      	strb	r1, [r3, r2]
 80018fa:	e00b      	b.n	8001914 <HAL_UART_RxCpltCallback+0x70>
	  }
	  else{
		  buffer_index = 0;
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_UART_RxCpltCallback+0x94>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
		  complete = 1;
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_UART_RxCpltCallback+0xa0>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t*) "\n\r", 2, 100);
 8001908:	2364      	movs	r3, #100	; 0x64
 800190a:	2202      	movs	r2, #2
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <HAL_UART_RxCpltCallback+0xa4>)
 800190e:	480f      	ldr	r0, [pc, #60]	; (800194c <HAL_UART_RxCpltCallback+0xa8>)
 8001910:	f002 ff60 	bl	80047d4 <HAL_UART_Transmit>
	  }
	  HAL_UART_Receive_IT(&huart1, data, 1);
 8001914:	2201      	movs	r2, #1
 8001916:	490a      	ldr	r1, [pc, #40]	; (8001940 <HAL_UART_RxCpltCallback+0x9c>)
 8001918:	480c      	ldr	r0, [pc, #48]	; (800194c <HAL_UART_RxCpltCallback+0xa8>)
 800191a:	f002 ffe9 	bl	80048f0 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart1, data, sizeof(data), 100);
 800191e:	2364      	movs	r3, #100	; 0x64
 8001920:	2202      	movs	r2, #2
 8001922:	4907      	ldr	r1, [pc, #28]	; (8001940 <HAL_UART_RxCpltCallback+0x9c>)
 8001924:	4809      	ldr	r0, [pc, #36]	; (800194c <HAL_UART_RxCpltCallback+0xa8>)
 8001926:	f002 ff55 	bl	80047d4 <HAL_UART_Transmit>
  }
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40013800 	.word	0x40013800
 8001938:	20000228 	.word	0x20000228
 800193c:	20000230 	.word	0x20000230
 8001940:	2000022c 	.word	0x2000022c
 8001944:	20000250 	.word	0x20000250
 8001948:	08009dd4 	.word	0x08009dd4
 800194c:	20000194 	.word	0x20000194

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	e7fe      	b.n	8001958 <Error_Handler+0x8>

0800195a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_AHB2_GRP1_EnableClock>:
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800198a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001998:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019a0:	68fb      	ldr	r3, [r7, #12]
}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4013      	ands	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001a48:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001a4c:	f7ff ffaf 	bl	80019ae <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	202e      	movs	r0, #46	; 0x2e
 8001a56:	f000 fb44 	bl	80020e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001a5a:	202e      	movs	r0, #46	; 0x2e
 8001a5c:	f000 fb5b 	bl	8002116 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <HAL_IPCC_MspInit+0x44>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d113      	bne.n	8001a9e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001a76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a7a:	f7ff ff98 	bl	80019ae <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	202c      	movs	r0, #44	; 0x2c
 8001a84:	f000 fb2d 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001a88:	202c      	movs	r0, #44	; 0x2c
 8001a8a:	f000 fb44 	bl	8002116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	202d      	movs	r0, #45	; 0x2d
 8001a94:	f000 fb25 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001a98:	202d      	movs	r0, #45	; 0x2d
 8001a9a:	f000 fb3c 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	58000c00 	.word	0x58000c00

08001aac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b096      	sub	sp, #88	; 0x58
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	2250      	movs	r2, #80	; 0x50
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f008 f935 	bl	8009d2c <memset>
  if(hrtc->Instance==RTC)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_RTC_MspInit+0x64>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d11d      	bne.n	8001b08 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001acc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ad0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad8:	f107 0308 	add.w	r3, r7, #8
 8001adc:	4618      	mov	r0, r3
 8001ade:	f002 f9c6 	bl	8003e6e <HAL_RCCEx_PeriphCLKConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ae8:	f7ff ff32 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aec:	f7ff ff35 	bl	800195a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001af0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001af4:	f7ff ff74 	bl	80019e0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	2003      	movs	r0, #3
 8001afe:	f000 faf0 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001b02:	2003      	movs	r0, #3
 8001b04:	f000 fb07 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b08:	bf00      	nop
 8001b0a:	3758      	adds	r7, #88	; 0x58
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40002800 	.word	0x40002800

08001b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b09c      	sub	sp, #112	; 0x70
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	2250      	movs	r2, #80	; 0x50
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f008 f8f9 	bl	8009d2c <memset>
  if(huart->Instance==USART1)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ba8 <HAL_UART_MspInit+0x94>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d12c      	bne.n	8001b9e <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b44:	2301      	movs	r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 f98c 	bl	8003e6e <HAL_RCCEx_PeriphCLKConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b5c:	f7ff fef8 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b64:	f7ff ff55 	bl	8001a12 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b68:	2002      	movs	r0, #2
 8001b6a:	f7ff ff07 	bl	800197c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b6e:	23c0      	movs	r3, #192	; 0xc0
 8001b70:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b86:	4619      	mov	r1, r3
 8001b88:	4808      	ldr	r0, [pc, #32]	; (8001bac <HAL_UART_MspInit+0x98>)
 8001b8a:	f000 fbc7 	bl	800231c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	2024      	movs	r0, #36	; 0x24
 8001b94:	f000 faa5 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b98:	2024      	movs	r0, #36	; 0x24
 8001b9a:	f000 fabc 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3770      	adds	r7, #112	; 0x70
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40013800 	.word	0x40013800
 8001bac:	48000400 	.word	0x48000400

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfc:	f000 f90a 	bl	8001e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001c08:	f7ff f9c8 	bl	8000f9c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <USART1_IRQHandler+0x10>)
 8001c16:	f002 feb7 	bl	8004988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000194 	.word	0x20000194

08001c24 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001c28:	f007 fcc2 	bl	80095b0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001c34:	f007 fcf2 	bl	800961c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001c40:	f000 fd26 	bl	8002690 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001c4c:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <SystemInit+0x98>)
 8001c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c52:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <SystemInit+0x98>)
 8001c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c70:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001c74:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <SystemInit+0x9c>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c92:	f023 0305 	bic.w	r3, r3, #5
 8001c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca6:	f023 0301 	bic.w	r3, r3, #1
 8001caa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <SystemInit+0xa0>)
 8001cb4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cba:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <SystemInit+0xa0>)
 8001cbc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00
 8001ce4:	faf6fefb 	.word	0xfaf6fefb
 8001ce8:	22041000 	.word	0x22041000

08001cec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001cec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf0:	3304      	adds	r3, #4

08001cf2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001cf6:	d3f9      	bcc.n	8001cec <CopyDataInit>
  bx lr
 8001cf8:	4770      	bx	lr

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001cfa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001cfc:	3004      	adds	r0, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001cfe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>
  bx lr
 8001d02:	4770      	bx	lr

08001d04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d08:	f7ff ff9e 	bl	8001c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001d0c:	480b      	ldr	r0, [pc, #44]	; (8001d3c <LoopForever+0x6>)
 8001d0e:	490c      	ldr	r1, [pc, #48]	; (8001d40 <LoopForever+0xa>)
 8001d10:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <LoopForever+0xe>)
 8001d12:	2300      	movs	r3, #0
 8001d14:	f7ff ffed 	bl	8001cf2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <LoopForever+0x12>)
 8001d1a:	490c      	ldr	r1, [pc, #48]	; (8001d4c <LoopForever+0x16>)
 8001d1c:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <LoopForever+0x1a>)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f7ff ffe7 	bl	8001cf2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <LoopForever+0x1e>)
 8001d26:	490c      	ldr	r1, [pc, #48]	; (8001d58 <LoopForever+0x22>)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f7ff ffe8 	bl	8001cfe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d2e:	f008 f805 	bl	8009d3c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d32:	f7ff fc1b 	bl	800156c <main>

08001d36 <LoopForever>:

LoopForever:
  b LoopForever
 8001d36:	e7fe      	b.n	8001d36 <LoopForever>
  ldr   r0, =_estack
 8001d38:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	2000002c 	.word	0x2000002c
 8001d44:	0800a0a4 	.word	0x0800a0a4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001d48:	200301e4 	.word	0x200301e4
 8001d4c:	20030a67 	.word	0x20030a67
 8001d50:	0800a10e 	.word	0x0800a10e
  INIT_BSS _sbss, _ebss
 8001d54:	20000078 	.word	0x20000078
 8001d58:	20000508 	.word	0x20000508

08001d5c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC1_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_Init+0x3c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <HAL_Init+0x3c>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d76:	2003      	movs	r0, #3
 8001d78:	f000 f9a8 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 f80f 	bl	8001da0 <HAL_InitTick>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	71fb      	strb	r3, [r7, #7]
 8001d8c:	e001      	b.n	8001d92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d8e:	f7ff fe59 	bl	8001a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d92:	79fb      	ldrb	r3, [r7, #7]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	58004000 	.word	0x58004000

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_InitTick+0x6c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d024      	beq.n	8001dfe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001db4:	f001 fdca 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_InitTick+0x6c>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 f9be 	bl	800214e <HAL_SYSTICK_Config>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10f      	bne.n	8001df8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	d809      	bhi.n	8001df2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dde:	2200      	movs	r2, #0
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	f04f 30ff 	mov.w	r0, #4294967295
 8001de6:	f000 f97c 	bl	80020e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dea:	4a09      	ldr	r2, [pc, #36]	; (8001e10 <HAL_InitTick+0x70>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e007      	b.n	8001e02 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	e004      	b.n	8001e02 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e001      	b.n	8001e02 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000010 	.word	0x20000010
 8001e10:	2000000c 	.word	0x2000000c

08001e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000010 	.word	0x20000010
 8001e38:	20000254 	.word	0x20000254

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000254 	.word	0x20000254

08001e54 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_GetTickPrio+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	2000000c 	.word	0x2000000c

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	; (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db12      	blt.n	8001f44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	490a      	ldr	r1, [pc, #40]	; (8001f50 <__NVIC_DisableIRQ+0x44>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	3320      	adds	r3, #32
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f38:	f3bf 8f4f 	dsb	sy
}
 8001f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f3e:	f3bf 8f6f 	isb	sy
}
 8001f42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db0c      	blt.n	8001f80 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	4907      	ldr	r1, [pc, #28]	; (8001f8c <__NVIC_SetPendingIRQ+0x38>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	2001      	movs	r0, #1
 8001f76:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7a:	3340      	adds	r3, #64	; 0x40
 8001f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0c      	blt.n	8001fbc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4907      	ldr	r1, [pc, #28]	; (8001fc8 <__NVIC_ClearPendingIRQ+0x38>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	3360      	adds	r3, #96	; 0x60
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	; (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7ff ff8e 	bl	8001fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fec9 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020f0:	f7ff fee0 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 80020f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	f7ff ff90 	bl	8002020 <NVIC_EncodePriority>
 8002100:	4602      	mov	r2, r0
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff5f 	bl	8001fcc <__NVIC_SetPriority>
}
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fed3 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fee3 	bl	8001f0c <__NVIC_DisableIRQ>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ff96 	bl	8002088 <SysTick_Config>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff feed 	bl	8001f54 <__NVIC_SetPendingIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fefd 	bl	8001f90 <__NVIC_ClearPendingIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e04f      	b.n	8002250 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d008      	beq.n	80021ce <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2204      	movs	r2, #4
 80021c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e040      	b.n	8002250 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 020e 	bic.w	r2, r2, #14
 80021dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f003 021c 	and.w	r2, r3, #28
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	2101      	movs	r1, #1
 800220c:	fa01 f202 	lsl.w	r2, r1, r2
 8002210:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800221a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00c      	beq.n	800223e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002232:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800223c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d005      	beq.n	8002280 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2204      	movs	r2, #4
 8002278:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	e047      	b.n	8002310 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 020e 	bic.w	r2, r2, #14
 800228e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	f003 021c 	and.w	r2, r3, #28
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	2101      	movs	r1, #1
 80022be:	fa01 f202 	lsl.w	r2, r1, r2
 80022c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
    }
  }
  return status;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232a:	e14c      	b.n	80025c6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 813e 	beq.w	80025c0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d005      	beq.n	800235c <HAL_GPIO_Init+0x40>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d130      	bne.n	80023be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002392:	2201      	movs	r2, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 0201 	and.w	r2, r3, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d017      	beq.n	80023fa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	2203      	movs	r2, #3
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d123      	bne.n	800244e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	08da      	lsrs	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3208      	adds	r2, #8
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0203 	and.w	r2, r3, #3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8098 	beq.w	80025c0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002490:	4a54      	ldr	r2, [pc, #336]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024ba:	d019      	beq.n	80024f0 <HAL_GPIO_Init+0x1d4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a4a      	ldr	r2, [pc, #296]	; (80025e8 <HAL_GPIO_Init+0x2cc>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d013      	beq.n	80024ec <HAL_GPIO_Init+0x1d0>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a49      	ldr	r2, [pc, #292]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00d      	beq.n	80024e8 <HAL_GPIO_Init+0x1cc>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a48      	ldr	r2, [pc, #288]	; (80025f0 <HAL_GPIO_Init+0x2d4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d007      	beq.n	80024e4 <HAL_GPIO_Init+0x1c8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a47      	ldr	r2, [pc, #284]	; (80025f4 <HAL_GPIO_Init+0x2d8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_GPIO_Init+0x1c4>
 80024dc:	2304      	movs	r3, #4
 80024de:	e008      	b.n	80024f2 <HAL_GPIO_Init+0x1d6>
 80024e0:	2307      	movs	r3, #7
 80024e2:	e006      	b.n	80024f2 <HAL_GPIO_Init+0x1d6>
 80024e4:	2303      	movs	r3, #3
 80024e6:	e004      	b.n	80024f2 <HAL_GPIO_Init+0x1d6>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e002      	b.n	80024f2 <HAL_GPIO_Init+0x1d6>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_GPIO_Init+0x1d6>
 80024f0:	2300      	movs	r3, #0
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	f002 0203 	and.w	r2, r2, #3
 80024f8:	0092      	lsls	r2, r2, #2
 80024fa:	4093      	lsls	r3, r2
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002502:	4938      	ldr	r1, [pc, #224]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002510:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <HAL_GPIO_Init+0x2dc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002534:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <HAL_GPIO_Init+0x2dc>)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800253a:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_GPIO_Init+0x2dc>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800255e:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <HAL_GPIO_Init+0x2dc>)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_GPIO_Init+0x2dc>)
 8002566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800258a:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_GPIO_Init+0x2dc>)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_GPIO_Init+0x2dc>)
 8002594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025b8:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <HAL_GPIO_Init+0x2dc>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3301      	adds	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f47f aeab 	bne.w	800232c <HAL_GPIO_Init+0x10>
  }
}
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40010000 	.word	0x40010000
 80025e8:	48000400 	.word	0x48000400
 80025ec:	48000800 	.word	0x48000800
 80025f0:	48000c00 	.word	0x48000c00
 80025f4:	48001000 	.word	0x48001000
 80025f8:	58000800 	.word	0x58000800

080025fc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	e001      	b.n	800261e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800261e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
 8002638:	4613      	mov	r3, r2
 800263a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800263c:	787b      	ldrb	r3, [r7, #1]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002642:	887a      	ldrh	r2, [r7, #2]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002648:	e002      	b.n	8002650 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4013      	ands	r3, r2
 8002674:	041a      	lsls	r2, r3, #16
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43d9      	mvns	r1, r3
 800267a:	887b      	ldrh	r3, [r7, #2]
 800267c:	400b      	ands	r3, r1
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	619a      	str	r2, [r3, #24]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_HSEM_IRQHandler+0x30>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_HSEM_IRQHandler+0x30>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	4906      	ldr	r1, [pc, #24]	; (80026c0 <HAL_HSEM_IRQHandler+0x30>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <HAL_HSEM_IRQHandler+0x30>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f807 	bl	80026c4 <HAL_HSEM_FreeCallback>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	58001500 	.word	0x58001500

080026c4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01e      	beq.n	8002728 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_IPCC_Init+0x60>)
 80026ec:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff f9b2 	bl	8001a64 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002700:	68b8      	ldr	r0, [r7, #8]
 8002702:	f000 f85b 	bl	80027bc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f82c 	bl	8002770 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002726:	e001      	b.n	800272c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	58000c00 	.word	0x58000c00

0800273c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	4613      	mov	r3, r2
 8002748:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	4613      	mov	r3, r2
 8002762:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e00f      	b.n	800279e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	4a0b      	ldr	r2, [pc, #44]	; (80027b4 <IPCC_SetDefaultCallbacks+0x44>)
 8002788:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3306      	adds	r3, #6
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <IPCC_SetDefaultCallbacks+0x48>)
 8002796:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3301      	adds	r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d9ec      	bls.n	800277e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	0800273d 	.word	0x0800273d
 80027b8:	08002757 	.word	0x08002757

080027bc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80027d0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	223f      	movs	r2, #63	; 0x3f
 80027d6:	609a      	str	r2, [r3, #8]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	58000400 	.word	0x58000400

08002804 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <HAL_PWREx_GetVoltageRange+0x18>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	58000400 	.word	0x58000400

08002820 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002832:	d101      	bne.n	8002838 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_RCC_HSE_Enable>:
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LL_RCC_HSE_Disable>:
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_RCC_HSE_IsReady>:
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002892:	d101      	bne.n	8002898 <LL_RCC_HSE_IsReady+0x18>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <LL_RCC_HSE_IsReady+0x1a>
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_RCC_HSI_Enable>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_RCC_HSI_Disable>:
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d4:	6013      	str	r3, [r2, #0]
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_RCC_HSI_IsReady>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80028e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f2:	d101      	bne.n	80028f8 <LL_RCC_HSI_IsReady+0x18>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <LL_RCC_HSI_IsReady+0x1a>
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_RCC_HSI48_Enable>:
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800293a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_RCC_HSI48_Disable>:
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002958:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800295c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_RCC_HSI48_IsReady>:
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	d101      	bne.n	800298a <LL_RCC_HSI48_IsReady+0x18>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <LL_RCC_HSI48_IsReady+0x1a>
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_RCC_LSE_Enable>:
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800299a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_RCC_LSE_Disable>:
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <LL_RCC_LSE_EnableBypass>:
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_RCC_LSE_DisableBypass>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_RCC_LSE_IsReady>:
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d101      	bne.n	8002a36 <LL_RCC_LSE_IsReady+0x18>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <LL_RCC_LSE_IsReady+0x1a>
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_RCC_LSI1_Enable>:
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_RCC_LSI1_Disable>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_RCC_LSI1_IsReady>:
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d101      	bne.n	8002a9e <LL_RCC_LSI1_IsReady+0x18>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <LL_RCC_LSI1_IsReady+0x1a>
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_RCC_LSI2_Enable>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_RCC_LSI2_Disable>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <LL_RCC_LSI2_IsReady>:
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d101      	bne.n	8002b06 <LL_RCC_LSI2_IsReady+0x18>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <LL_RCC_LSI2_IsReady+0x1a>
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LL_RCC_LSI2_SetTrimming>:
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_RCC_MSI_Enable>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6013      	str	r3, [r2, #0]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_RCC_MSI_Disable>:
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6013      	str	r3, [r2, #0]
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_RCC_MSI_IsReady>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d101      	bne.n	8002b92 <LL_RCC_MSI_IsReady+0x16>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <LL_RCC_MSI_IsReady+0x18>
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_RCC_MSI_SetRange>:
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_RCC_MSI_GetRange>:
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2bb0      	cmp	r3, #176	; 0xb0
 8002bdc:	d901      	bls.n	8002be2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002bde:	23b0      	movs	r3, #176	; 0xb0
 8002be0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002be2:	687b      	ldr	r3, [r7, #4]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_SetSysClkSource>:
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f023 0203 	bic.w	r2, r3, #3
 8002c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_RCC_GetSysClkSource>:
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_RCC_SetAHBPrescaler>:
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_RCC_SetAHB4Prescaler>:
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cbe:	f023 020f 	bic.w	r2, r3, #15
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_RCC_SetAPB1Prescaler>:
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	608b      	str	r3, [r1, #8]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_RCC_SetAPB2Prescaler>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_RCC_GetAHBPrescaler>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_GetAHB4Prescaler>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_RCC_GetAPB1Prescaler>:
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_RCC_GetAPB2Prescaler>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc0:	6013      	str	r3, [r2, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dde:	d101      	bne.n	8002de4 <LL_RCC_PLL_IsReady+0x18>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <LL_RCC_PLL_IsReady+0x1a>
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0303 	and.w	r3, r3, #3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e64:	d101      	bne.n	8002e6a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e8a:	d101      	bne.n	8002e90 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb0:	d101      	bne.n	8002eb6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ed4:	d101      	bne.n	8002eda <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ef8:	d101      	bne.n	8002efe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b08d      	sub	sp, #52	; 0x34
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e363      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 808d 	beq.w	8003046 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f2c:	f7ff fe89 	bl	8002c42 <LL_RCC_GetSysClkSource>
 8002f30:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f32:	f7ff ff82 	bl	8002e3a <LL_RCC_PLL_GetMainSource>
 8002f36:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_RCC_OscConfig+0x3e>
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	2b0c      	cmp	r3, #12
 8002f42:	d147      	bne.n	8002fd4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d144      	bne.n	8002fd4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e347      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002f5a:	f7ff fe34 	bl	8002bc6 <LL_RCC_MSI_GetRange>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	429c      	cmp	r4, r3
 8002f62:	d914      	bls.n	8002f8e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fd2f 	bl	80039cc <RCC_SetFlashLatencyFromMSIRange>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e336      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fe0e 	bl	8002b9e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fe32 	bl	8002bf0 <LL_RCC_MSI_SetCalibTrimming>
 8002f8c:	e013      	b.n	8002fb6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fe03 	bl	8002b9e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fe27 	bl	8002bf0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fd10 	bl	80039cc <RCC_SetFlashLatencyFromMSIRange>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e317      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fb6:	f000 fcc9 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4aa4      	ldr	r2, [pc, #656]	; (8003250 <HAL_RCC_OscConfig+0x344>)
 8002fbe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fc0:	4ba4      	ldr	r3, [pc, #656]	; (8003254 <HAL_RCC_OscConfig+0x348>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe feeb 	bl	8001da0 <HAL_InitTick>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d039      	beq.n	8003044 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e308      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01e      	beq.n	800301a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fdc:	f7ff fdb0 	bl	8002b40 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe ff2c 	bl	8001e3c <HAL_GetTick>
 8002fe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe8:	f7fe ff28 	bl	8001e3c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e2f5      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ffa:	f7ff fdbf 	bl	8002b7c <LL_RCC_MSI_IsReady>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f1      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fdc8 	bl	8002b9e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fdec 	bl	8002bf0 <LL_RCC_MSI_SetCalibTrimming>
 8003018:	e015      	b.n	8003046 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800301a:	f7ff fda0 	bl	8002b5e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800301e:	f7fe ff0d 	bl	8001e3c <HAL_GetTick>
 8003022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003026:	f7fe ff09 	bl	8001e3c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e2d6      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003038:	f7ff fda0 	bl	8002b7c <LL_RCC_MSI_IsReady>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f1      	bne.n	8003026 <HAL_RCC_OscConfig+0x11a>
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003044:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d047      	beq.n	80030e2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003052:	f7ff fdf6 	bl	8002c42 <LL_RCC_GetSysClkSource>
 8003056:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003058:	f7ff feef 	bl	8002e3a <LL_RCC_PLL_GetMainSource>
 800305c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d005      	beq.n	8003070 <HAL_RCC_OscConfig+0x164>
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d108      	bne.n	800307c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d105      	bne.n	800307c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d134      	bne.n	80030e2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e2b4      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003084:	d102      	bne.n	800308c <HAL_RCC_OscConfig+0x180>
 8003086:	f7ff fbdd 	bl	8002844 <LL_RCC_HSE_Enable>
 800308a:	e001      	b.n	8003090 <HAL_RCC_OscConfig+0x184>
 800308c:	f7ff fbe9 	bl	8002862 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d012      	beq.n	80030be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fed0 	bl	8001e3c <HAL_GetTick>
 800309c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe fecc 	bl	8001e3c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e299      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80030b2:	f7ff fbe5 	bl	8002880 <LL_RCC_HSE_IsReady>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f1      	beq.n	80030a0 <HAL_RCC_OscConfig+0x194>
 80030bc:	e011      	b.n	80030e2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fe febd 	bl	8001e3c <HAL_GetTick>
 80030c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c6:	f7fe feb9 	bl	8001e3c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	; 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e286      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80030d8:	f7ff fbd2 	bl	8002880 <LL_RCC_HSE_IsReady>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f1      	bne.n	80030c6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d04c      	beq.n	8003188 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ee:	f7ff fda8 	bl	8002c42 <LL_RCC_GetSysClkSource>
 80030f2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f4:	f7ff fea1 	bl	8002e3a <LL_RCC_PLL_GetMainSource>
 80030f8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d005      	beq.n	800310c <HAL_RCC_OscConfig+0x200>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d10e      	bne.n	8003124 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d10b      	bne.n	8003124 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e266      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fbf1 	bl	8002904 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003122:	e031      	b.n	8003188 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d019      	beq.n	8003160 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800312c:	f7ff fbba 	bl	80028a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe fe84 	bl	8001e3c <HAL_GetTick>
 8003134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003138:	f7fe fe80 	bl	8001e3c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e24d      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800314a:	f7ff fbc9 	bl	80028e0 <LL_RCC_HSI_IsReady>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f1      	beq.n	8003138 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fbd3 	bl	8002904 <LL_RCC_HSI_SetCalibTrimming>
 800315e:	e013      	b.n	8003188 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003160:	f7ff fbaf 	bl	80028c2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fe6a 	bl	8001e3c <HAL_GetTick>
 8003168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316c:	f7fe fe66 	bl	8001e3c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e233      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800317e:	f7ff fbaf 	bl	80028e0 <LL_RCC_HSI_IsReady>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f1      	bne.n	800316c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80a3 	beq.w	80032e8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d076      	beq.n	8003298 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d046      	beq.n	8003244 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80031b6:	f7ff fc66 	bl	8002a86 <LL_RCC_LSI1_IsReady>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d113      	bne.n	80031e8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80031c0:	f7ff fc3f 	bl	8002a42 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031c4:	f7fe fe3a 	bl	8001e3c <HAL_GetTick>
 80031c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80031cc:	f7fe fe36 	bl	8001e3c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e203      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80031de:	f7ff fc52 	bl	8002a86 <LL_RCC_LSI1_IsReady>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f1      	beq.n	80031cc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80031e8:	f7ff fc5f 	bl	8002aaa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe fe26 	bl	8001e3c <HAL_GetTick>
 80031f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80031f4:	f7fe fe22 	bl	8001e3c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1ef      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003206:	f7ff fc72 	bl	8002aee <LL_RCC_LSI2_IsReady>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f1      	beq.n	80031f4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fc7c 	bl	8002b12 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800321a:	f7ff fc23 	bl	8002a64 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fe fe0d 	bl	8001e3c <HAL_GetTick>
 8003222:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003226:	f7fe fe09 	bl	8001e3c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e1d6      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003238:	f7ff fc25 	bl	8002a86 <LL_RCC_LSI1_IsReady>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f1      	bne.n	8003226 <HAL_RCC_OscConfig+0x31a>
 8003242:	e051      	b.n	80032e8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003244:	f7ff fbfd 	bl	8002a42 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fe fdf8 	bl	8001e3c <HAL_GetTick>
 800324c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800324e:	e00c      	b.n	800326a <HAL_RCC_OscConfig+0x35e>
 8003250:	20000008 	.word	0x20000008
 8003254:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003258:	f7fe fdf0 	bl	8001e3c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e1bd      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800326a:	f7ff fc0c 	bl	8002a86 <LL_RCC_LSI1_IsReady>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f1      	beq.n	8003258 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003274:	f7ff fc2a 	bl	8002acc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800327a:	f7fe fddf 	bl	8001e3c <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b03      	cmp	r3, #3
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e1ac      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800328c:	f7ff fc2f 	bl	8002aee <LL_RCC_LSI2_IsReady>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f1      	bne.n	800327a <HAL_RCC_OscConfig+0x36e>
 8003296:	e027      	b.n	80032e8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003298:	f7ff fc18 	bl	8002acc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fe fdce 	bl	8001e3c <HAL_GetTick>
 80032a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032a4:	f7fe fdca 	bl	8001e3c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e197      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80032b6:	f7ff fc1a 	bl	8002aee <LL_RCC_LSI2_IsReady>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f1      	bne.n	80032a4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80032c0:	f7ff fbd0 	bl	8002a64 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fe fdba 	bl	8001e3c <HAL_GetTick>
 80032c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80032cc:	f7fe fdb6 	bl	8001e3c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e183      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80032de:	f7ff fbd2 	bl	8002a86 <LL_RCC_LSI1_IsReady>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f1      	bne.n	80032cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d05b      	beq.n	80033ac <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f4:	4ba7      	ldr	r3, [pc, #668]	; (8003594 <HAL_RCC_OscConfig+0x688>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d114      	bne.n	800332a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003300:	f7ff fa70 	bl	80027e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003304:	f7fe fd9a 	bl	8001e3c <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330c:	f7fe fd96 	bl	8001e3c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e163      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800331e:	4b9d      	ldr	r3, [pc, #628]	; (8003594 <HAL_RCC_OscConfig+0x688>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d102      	bne.n	8003338 <HAL_RCC_OscConfig+0x42c>
 8003332:	f7ff fb30 	bl	8002996 <LL_RCC_LSE_Enable>
 8003336:	e00c      	b.n	8003352 <HAL_RCC_OscConfig+0x446>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d104      	bne.n	800334a <HAL_RCC_OscConfig+0x43e>
 8003340:	f7ff fb4b 	bl	80029da <LL_RCC_LSE_EnableBypass>
 8003344:	f7ff fb27 	bl	8002996 <LL_RCC_LSE_Enable>
 8003348:	e003      	b.n	8003352 <HAL_RCC_OscConfig+0x446>
 800334a:	f7ff fb35 	bl	80029b8 <LL_RCC_LSE_Disable>
 800334e:	f7ff fb55 	bl	80029fc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d014      	beq.n	8003384 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335a:	f7fe fd6f 	bl	8001e3c <HAL_GetTick>
 800335e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7fe fd6b 	bl	8001e3c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e136      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003378:	f7ff fb51 	bl	8002a1e <LL_RCC_LSE_IsReady>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0ef      	beq.n	8003362 <HAL_RCC_OscConfig+0x456>
 8003382:	e013      	b.n	80033ac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fe fd5a 	bl	8001e3c <HAL_GetTick>
 8003388:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7fe fd56 	bl	8001e3c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e121      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80033a2:	f7ff fb3c 	bl	8002a1e <LL_RCC_LSE_IsReady>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ef      	bne.n	800338c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02c      	beq.n	8003412 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d014      	beq.n	80033ea <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033c0:	f7ff fab5 	bl	800292e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fe fd3a 	bl	8001e3c <HAL_GetTick>
 80033c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033cc:	f7fe fd36 	bl	8001e3c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e103      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80033de:	f7ff fac8 	bl	8002972 <LL_RCC_HSI48_IsReady>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f1      	beq.n	80033cc <HAL_RCC_OscConfig+0x4c0>
 80033e8:	e013      	b.n	8003412 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033ea:	f7ff fab1 	bl	8002950 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ee:	f7fe fd25 	bl	8001e3c <HAL_GetTick>
 80033f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033f6:	f7fe fd21 	bl	8001e3c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0ee      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003408:	f7ff fab3 	bl	8002972 <LL_RCC_HSI48_IsReady>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f1      	bne.n	80033f6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 80e4 	beq.w	80035e4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341c:	f7ff fc11 	bl	8002c42 <LL_RCC_GetSysClkSource>
 8003420:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	2b02      	cmp	r3, #2
 8003430:	f040 80b4 	bne.w	800359c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0203 	and.w	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	429a      	cmp	r2, r3
 8003440:	d123      	bne.n	800348a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d11c      	bne.n	800348a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d114      	bne.n	800348a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d10d      	bne.n	800348a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d106      	bne.n	800348a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d05d      	beq.n	8003546 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d058      	beq.n	8003542 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0a1      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034a2:	f7ff fc84 	bl	8002dae <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034a6:	f7fe fcc9 	bl	8001e3c <HAL_GetTick>
 80034aa:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe fcc5 	bl	8001e3c <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e092      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ef      	bne.n	80034ae <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	4b30      	ldr	r3, [pc, #192]	; (8003598 <HAL_RCC_OscConfig+0x68c>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034e0:	4311      	orrs	r1, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034e6:	0212      	lsls	r2, r2, #8
 80034e8:	4311      	orrs	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034ee:	4311      	orrs	r1, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034fa:	430a      	orrs	r2, r1
 80034fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003500:	4313      	orrs	r3, r2
 8003502:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003504:	f7ff fc44 	bl	8002d90 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003516:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003518:	f7fe fc90 	bl	8001e3c <HAL_GetTick>
 800351c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe fc8c 	bl	8001e3c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e059      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ef      	beq.n	8003520 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003540:	e050      	b.n	80035e4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e04f      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d147      	bne.n	80035e4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003554:	f7ff fc1c 	bl	8002d90 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003566:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003568:	f7fe fc68 	bl	8001e3c <HAL_GetTick>
 800356c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe fc64 	bl	8001e3c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e031      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ef      	beq.n	8003570 <HAL_RCC_OscConfig+0x664>
 8003590:	e028      	b.n	80035e4 <HAL_RCC_OscConfig+0x6d8>
 8003592:	bf00      	nop
 8003594:	58000400 	.word	0x58000400
 8003598:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d01e      	beq.n	80035e0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a2:	f7ff fc04 	bl	8002dae <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7fe fc49 	bl	8001e3c <HAL_GetTick>
 80035aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ae:	f7fe fc45 	bl	8001e3c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e012      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ef      	bne.n	80035ae <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_OscConfig+0x6e4>)
 80035da:	4013      	ands	r3, r2
 80035dc:	60cb      	str	r3, [r1, #12]
 80035de:	e001      	b.n	80035e4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3734      	adds	r7, #52	; 0x34
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd90      	pop	{r4, r7, pc}
 80035ee:	bf00      	nop
 80035f0:	eefefffc 	.word	0xeefefffc

080035f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e12d      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b98      	ldr	r3, [pc, #608]	; (800386c <HAL_RCC_ClockConfig+0x278>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d91b      	bls.n	800364e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b95      	ldr	r3, [pc, #596]	; (800386c <HAL_RCC_ClockConfig+0x278>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 0207 	bic.w	r2, r3, #7
 800361e:	4993      	ldr	r1, [pc, #588]	; (800386c <HAL_RCC_ClockConfig+0x278>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003626:	f7fe fc09 	bl	8001e3c <HAL_GetTick>
 800362a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362c:	e008      	b.n	8003640 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800362e:	f7fe fc05 	bl	8001e3c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e111      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003640:	4b8a      	ldr	r3, [pc, #552]	; (800386c <HAL_RCC_ClockConfig+0x278>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d1ef      	bne.n	800362e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fafb 	bl	8002c5a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003664:	f7fe fbea 	bl	8001e3c <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800366c:	f7fe fbe6 	bl	8001e3c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e0f2      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800367e:	f7ff fbe8 	bl	8002e52 <LL_RCC_IsActiveFlag_HPRE>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f1      	beq.n	800366c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d016      	beq.n	80036c2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff faf2 	bl	8002c82 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800369e:	f7fe fbcd 	bl	8001e3c <HAL_GetTick>
 80036a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036a6:	f7fe fbc9 	bl	8001e3c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e0d5      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80036b8:	f7ff fbdd 	bl	8002e76 <LL_RCC_IsActiveFlag_C2HPRE>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f1      	beq.n	80036a6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff faeb 	bl	8002cae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036d8:	f7fe fbb0 	bl	8001e3c <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036e0:	f7fe fbac 	bl	8001e3c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0b8      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80036f2:	f7ff fbd3 	bl	8002e9c <LL_RCC_IsActiveFlag_SHDHPRE>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f1      	beq.n	80036e0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d016      	beq.n	8003736 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fae5 	bl	8002cdc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003712:	f7fe fb93 	bl	8001e3c <HAL_GetTick>
 8003716:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800371a:	f7fe fb8f 	bl	8001e3c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e09b      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800372c:	f7ff fbc9 	bl	8002ec2 <LL_RCC_IsActiveFlag_PPRE1>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f1      	beq.n	800371a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d017      	beq.n	8003772 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fadb 	bl	8002d04 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800374e:	f7fe fb75 	bl	8001e3c <HAL_GetTick>
 8003752:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003756:	f7fe fb71 	bl	8001e3c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e07d      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003768:	f7ff fbbd 	bl	8002ee6 <LL_RCC_IsActiveFlag_PPRE2>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f1      	beq.n	8003756 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d043      	beq.n	8003806 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d106      	bne.n	8003794 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003786:	f7ff f87b 	bl	8002880 <LL_RCC_HSE_IsReady>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11e      	bne.n	80037ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e067      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d106      	bne.n	80037aa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800379c:	f7ff fb16 	bl	8002dcc <LL_RCC_PLL_IsReady>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d113      	bne.n	80037ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e05c      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80037b2:	f7ff f9e3 	bl	8002b7c <LL_RCC_MSI_IsReady>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d108      	bne.n	80037ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e051      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80037c0:	f7ff f88e 	bl	80028e0 <LL_RCC_HSI_IsReady>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e04a      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fa21 	bl	8002c1a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d8:	f7fe fb30 	bl	8001e3c <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e0:	f7fe fb2c 	bl	8001e3c <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e036      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	f7ff fa24 	bl	8002c42 <LL_RCC_GetSysClkSource>
 80037fa:	4602      	mov	r2, r0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	429a      	cmp	r2, r3
 8003804:	d1ec      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003806:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_RCC_ClockConfig+0x278>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d21b      	bcs.n	800384c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003814:	4b15      	ldr	r3, [pc, #84]	; (800386c <HAL_RCC_ClockConfig+0x278>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f023 0207 	bic.w	r2, r3, #7
 800381c:	4913      	ldr	r1, [pc, #76]	; (800386c <HAL_RCC_ClockConfig+0x278>)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003824:	f7fe fb0a 	bl	8001e3c <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	e008      	b.n	800383e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800382c:	f7fe fb06 	bl	8001e3c <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e012      	b.n	8003864 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_ClockConfig+0x278>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d1ef      	bne.n	800382c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800384c:	f000 f87e 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8003850:	4603      	mov	r3, r0
 8003852:	4a07      	ldr	r2, [pc, #28]	; (8003870 <HAL_RCC_ClockConfig+0x27c>)
 8003854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003856:	f7fe fafd 	bl	8001e54 <HAL_GetTickPrio>
 800385a:	4603      	mov	r3, r0
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe fa9f 	bl	8001da0 <HAL_InitTick>
 8003862:	4603      	mov	r3, r0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	58004000 	.word	0x58004000
 8003870:	20000008 	.word	0x20000008

08003874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387a:	f7ff f9e2 	bl	8002c42 <LL_RCC_GetSysClkSource>
 800387e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003886:	f7ff f99e 	bl	8002bc6 <LL_RCC_MSI_GetRange>
 800388a:	4603      	mov	r3, r0
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	4a2b      	ldr	r2, [pc, #172]	; (8003940 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	e04b      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d102      	bne.n	80038a8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038a2:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e045      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d10a      	bne.n	80038c4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80038ae:	f7fe ffb7 	bl	8002820 <LL_RCC_HSE_IsEnabledDiv2>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d102      	bne.n	80038be <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80038b8:	4b22      	ldr	r3, [pc, #136]	; (8003944 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e03a      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80038be:	4b22      	ldr	r3, [pc, #136]	; (8003948 <HAL_RCC_GetSysClockFreq+0xd4>)
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	e037      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80038c4:	f7ff fab9 	bl	8002e3a <LL_RCC_PLL_GetMainSource>
 80038c8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d003      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0x64>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d003      	beq.n	80038de <HAL_RCC_GetSysClockFreq+0x6a>
 80038d6:	e00d      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038da:	60bb      	str	r3, [r7, #8]
        break;
 80038dc:	e015      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80038de:	f7fe ff9f 	bl	8002820 <LL_RCC_HSE_IsEnabledDiv2>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d102      	bne.n	80038ee <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80038e8:	4b16      	ldr	r3, [pc, #88]	; (8003944 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038ea:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80038ec:	e00d      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80038ee:	4b16      	ldr	r3, [pc, #88]	; (8003948 <HAL_RCC_GetSysClockFreq+0xd4>)
 80038f0:	60bb      	str	r3, [r7, #8]
        break;
 80038f2:	e00a      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80038f4:	f7ff f967 	bl	8002bc6 <LL_RCC_MSI_GetRange>
 80038f8:	4603      	mov	r3, r0
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	4a0f      	ldr	r2, [pc, #60]	; (8003940 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003906:	60bb      	str	r3, [r7, #8]
        break;
 8003908:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800390a:	f7ff fa71 	bl	8002df0 <LL_RCC_PLL_GetN>
 800390e:	4602      	mov	r2, r0
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	fb03 f402 	mul.w	r4, r3, r2
 8003916:	f7ff fa84 	bl	8002e22 <LL_RCC_PLL_GetDivider>
 800391a:	4603      	mov	r3, r0
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	3301      	adds	r3, #1
 8003920:	fbb4 f4f3 	udiv	r4, r4, r3
 8003924:	f7ff fa71 	bl	8002e0a <LL_RCC_PLL_GetR>
 8003928:	4603      	mov	r3, r0
 800392a:	0f5b      	lsrs	r3, r3, #29
 800392c:	3301      	adds	r3, #1
 800392e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003932:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003934:	68fb      	ldr	r3, [r7, #12]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bd90      	pop	{r4, r7, pc}
 800393e:	bf00      	nop
 8003940:	08009ff4 	.word	0x08009ff4
 8003944:	00f42400 	.word	0x00f42400
 8003948:	01e84800 	.word	0x01e84800

0800394c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800394c:	b598      	push	{r3, r4, r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003950:	f7ff ff90 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8003954:	4604      	mov	r4, r0
 8003956:	f7ff f9e9 	bl	8002d2c <LL_RCC_GetAHBPrescaler>
 800395a:	4603      	mov	r3, r0
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	4a03      	ldr	r2, [pc, #12]	; (8003970 <HAL_RCC_GetHCLKFreq+0x24>)
 8003964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003968:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	bd98      	pop	{r3, r4, r7, pc}
 8003970:	08009f94 	.word	0x08009f94

08003974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003974:	b598      	push	{r3, r4, r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003978:	f7ff ffe8 	bl	800394c <HAL_RCC_GetHCLKFreq>
 800397c:	4604      	mov	r4, r0
 800397e:	f7ff f9ef 	bl	8002d60 <LL_RCC_GetAPB1Prescaler>
 8003982:	4603      	mov	r3, r0
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	4a04      	ldr	r2, [pc, #16]	; (800399c <HAL_RCC_GetPCLK1Freq+0x28>)
 800398c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd98      	pop	{r3, r4, r7, pc}
 800399c:	08009fd4 	.word	0x08009fd4

080039a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a0:	b598      	push	{r3, r4, r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80039a4:	f7ff ffd2 	bl	800394c <HAL_RCC_GetHCLKFreq>
 80039a8:	4604      	mov	r4, r0
 80039aa:	f7ff f9e5 	bl	8002d78 <LL_RCC_GetAPB2Prescaler>
 80039ae:	4603      	mov	r3, r0
 80039b0:	0adb      	lsrs	r3, r3, #11
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd98      	pop	{r3, r4, r7, pc}
 80039c8:	08009fd4 	.word	0x08009fd4

080039cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2bb0      	cmp	r3, #176	; 0xb0
 80039d8:	d903      	bls.n	80039e2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e007      	b.n	80039f2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	4a11      	ldr	r2, [pc, #68]	; (8003a30 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80039ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80039f2:	f7ff f9a7 	bl	8002d44 <LL_RCC_GetAHB4Prescaler>
 80039f6:	4603      	mov	r3, r0
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	4a0d      	ldr	r2, [pc, #52]	; (8003a34 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	0c9c      	lsrs	r4, r3, #18
 8003a16:	f7fe fef5 	bl	8002804 <HAL_PWREx_GetVoltageRange>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f000 f80c 	bl	8003a3c <RCC_SetFlashLatency>
 8003a24:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd90      	pop	{r4, r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	08009ff4 	.word	0x08009ff4
 8003a34:	08009f94 	.word	0x08009f94
 8003a38:	431bde83 	.word	0x431bde83

08003a3c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b093      	sub	sp, #76	; 0x4c
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003a46:	4b37      	ldr	r3, [pc, #220]	; (8003b24 <RCC_SetFlashLatency+0xe8>)
 8003a48:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003a4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003a52:	4a35      	ldr	r2, [pc, #212]	; (8003b28 <RCC_SetFlashLatency+0xec>)
 8003a54:	f107 031c 	add.w	r3, r7, #28
 8003a58:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003a5e:	4b33      	ldr	r3, [pc, #204]	; (8003b2c <RCC_SetFlashLatency+0xf0>)
 8003a60:	f107 040c 	add.w	r4, r7, #12
 8003a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a74:	d11a      	bne.n	8003aac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	643b      	str	r3, [r7, #64]	; 0x40
 8003a7a:	e013      	b.n	8003aa4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	3348      	adds	r3, #72	; 0x48
 8003a82:	443b      	add	r3, r7
 8003a84:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d807      	bhi.n	8003a9e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	3348      	adds	r3, #72	; 0x48
 8003a94:	443b      	add	r3, r7
 8003a96:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003a9a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003a9c:	e020      	b.n	8003ae0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8003aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d9e8      	bls.n	8003a7c <RCC_SetFlashLatency+0x40>
 8003aaa:	e019      	b.n	8003ae0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003aac:	2300      	movs	r3, #0
 8003aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab0:	e013      	b.n	8003ada <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	3348      	adds	r3, #72	; 0x48
 8003ab8:	443b      	add	r3, r7
 8003aba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d807      	bhi.n	8003ad4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	3348      	adds	r3, #72	; 0x48
 8003aca:	443b      	add	r3, r7
 8003acc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003ad0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003ad2:	e005      	b.n	8003ae0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d9e8      	bls.n	8003ab2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <RCC_SetFlashLatency+0xf4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 0207 	bic.w	r2, r3, #7
 8003ae8:	4911      	ldr	r1, [pc, #68]	; (8003b30 <RCC_SetFlashLatency+0xf4>)
 8003aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aec:	4313      	orrs	r3, r2
 8003aee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003af0:	f7fe f9a4 	bl	8001e3c <HAL_GetTick>
 8003af4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003af6:	e008      	b.n	8003b0a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003af8:	f7fe f9a0 	bl	8001e3c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e007      	b.n	8003b1a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <RCC_SetFlashLatency+0xf4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d1ef      	bne.n	8003af8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	374c      	adds	r7, #76	; 0x4c
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd90      	pop	{r4, r7, pc}
 8003b22:	bf00      	nop
 8003b24:	08009dd8 	.word	0x08009dd8
 8003b28:	08009de8 	.word	0x08009de8
 8003b2c:	08009df4 	.word	0x08009df4
 8003b30:	58004000 	.word	0x58004000

08003b34 <LL_RCC_LSE_IsEnabled>:
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <LL_RCC_LSE_IsEnabled+0x18>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <LL_RCC_LSE_IsEnabled+0x1a>
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_RCC_LSE_IsReady>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d101      	bne.n	8003b70 <LL_RCC_LSE_IsReady+0x18>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <LL_RCC_LSE_IsReady+0x1a>
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_RCC_SetRFWKPClockSource>:
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <LL_RCC_SetSMPSClockSource>:
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	f023 0203 	bic.w	r2, r3, #3
 8003bba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <LL_RCC_SetSMPSPrescaler>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_RCC_SetUSARTClockSource>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f023 0203 	bic.w	r2, r3, #3
 8003c0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_RCC_SetLPUARTClockSource>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_RCC_SetI2CClockSource>:
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003c74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_RCC_SetLPTIMClockSource>:
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	401a      	ands	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_RCC_SetSAIClockSource>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LL_RCC_SetRNGClockSource>:
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <LL_RCC_SetCLK48ClockSource>:
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_RCC_SetUSBClockSource>:
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ffe3 	bl	8003d16 <LL_RCC_SetCLK48ClockSource>
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <LL_RCC_SetADCClockSource>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_RCC_SetRTCClockSource>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_RCC_GetRTCClockSource>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <LL_RCC_ForceBackupDomainReset>:
{
 8003dca:	b480      	push	{r7}
 8003dcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_RCC_ReleaseBackupDomainReset>:
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <LL_RCC_PLLSAI1_Enable>:
{
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e20:	6013      	str	r3, [r2, #0]
}
 8003e22:	bf00      	nop
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <LL_RCC_PLLSAI1_Disable>:
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e3e:	6013      	str	r3, [r2, #0]
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_RCC_PLLSAI1_IsReady>:
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e5c:	d101      	bne.n	8003e62 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b088      	sub	sp, #32
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003e76:	2300      	movs	r3, #0
 8003e78:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d034      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e92:	d021      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003e94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e98:	d81b      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e9e:	d01d      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003ea0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ea4:	d815      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eae:	d110      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebe:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ec0:	e00d      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f947 	bl	800415a <RCCEx_PLLSAI1_ConfigNP>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ed0:	e005      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	77fb      	strb	r3, [r7, #31]
        break;
 8003ed6:	e002      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003ed8:	bf00      	nop
 8003eda:	e000      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ede:	7ffb      	ldrb	r3, [r7, #31]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fee8 	bl	8003cbe <LL_RCC_SetSAIClockSource>
 8003eee:	e001      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	7ffb      	ldrb	r3, [r7, #31]
 8003ef2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d046      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003f00:	f7ff ff56 	bl	8003db0 <LL_RCC_GetRTCClockSource>
 8003f04:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d03c      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003f10:	f7fe fc68 	bl	80027e4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d105      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ff30 	bl	8003d84 <LL_RCC_SetRTCClockSource>
 8003f24:	e02e      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003f30:	f7ff ff4b 	bl	8003dca <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003f34:	f7ff ff5a 	bl	8003dec <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003f50:	f7ff fdf0 	bl	8003b34 <LL_RCC_LSE_IsEnabled>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d114      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f5a:	f7fd ff6f 	bl	8001e3c <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003f60:	e00b      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7fd ff6b 	bl	8001e3c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d902      	bls.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	77fb      	strb	r3, [r7, #31]
              break;
 8003f78:	e004      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003f7a:	f7ff fded 	bl	8003b58 <LL_RCC_LSE_IsReady>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d1ee      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
 8003f86:	77bb      	strb	r3, [r7, #30]
 8003f88:	e001      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8a:	7ffb      	ldrb	r3, [r7, #31]
 8003f8c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fe2a 	bl	8003bf8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d004      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fe35 	bl	8003c24 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fe5d 	bl	8003c8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fe52 	bl	8003c8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fe2a 	bl	8003c50 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fe1f 	bl	8003c50 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d022      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fe8d 	bl	8003d42 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004030:	d107      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800403c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004040:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800404a:	d10b      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f8dd 	bl	8004210 <RCCEx_PLLSAI1_ConfigNQ>
 8004056:	4603      	mov	r3, r0
 8004058:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800405a:	7ffb      	ldrb	r3, [r7, #31]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004060:	7ffb      	ldrb	r3, [r7, #31]
 8004062:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02b      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004078:	d008      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004082:	d003      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fe2a 	bl	8003cea <LL_RCC_SetRNGClockSource>
 8004096:	e00a      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	2000      	movs	r0, #0
 80040a4:	f7ff fe21 	bl	8003cea <LL_RCC_SetRNGClockSource>
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff fe34 	bl	8003d16 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80040b6:	d107      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d022      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff fe3d 	bl	8003d58 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e6:	d107      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004100:	d10b      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f8dd 	bl	80042c6 <RCCEx_PLLSAI1_ConfigNR>
 800410c:	4603      	mov	r3, r0
 800410e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004110:	7ffb      	ldrb	r3, [r7, #31]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004116:	7ffb      	ldrb	r3, [r7, #31]
 8004118:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fd26 	bl	8003b7c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d009      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fd45 	bl	8003bd0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fd2c 	bl	8003ba8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004150:	7fbb      	ldrb	r3, [r7, #30]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004166:	f7ff fe61 	bl	8003e2c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800416a:	f7fd fe67 	bl	8001e3c <HAL_GetTick>
 800416e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004170:	e009      	b.n	8004186 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004172:	f7fd fe63 	bl	8001e3c <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d902      	bls.n	8004186 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	73fb      	strb	r3, [r7, #15]
      break;
 8004184:	e004      	b.n	8004190 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004186:	f7ff fe60 	bl	8003e4a <LL_RCC_PLLSAI1_IsReady>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d137      	bne.n	8004206 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041aa:	4313      	orrs	r3, r2
 80041ac:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80041ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041c0:	4313      	orrs	r3, r2
 80041c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80041c4:	f7ff fe23 	bl	8003e0e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c8:	f7fd fe38 	bl	8001e3c <HAL_GetTick>
 80041cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041ce:	e009      	b.n	80041e4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041d0:	f7fd fe34 	bl	8001e3c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d902      	bls.n	80041e4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	73fb      	strb	r3, [r7, #15]
        break;
 80041e2:	e004      	b.n	80041ee <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041e4:	f7ff fe31 	bl	8003e4a <LL_RCC_PLLSAI1_IsReady>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d1f0      	bne.n	80041d0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d108      	bne.n	8004206 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004202:	4313      	orrs	r3, r2
 8004204:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004206:	7bfb      	ldrb	r3, [r7, #15]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800421c:	f7ff fe06 	bl	8003e2c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004220:	f7fd fe0c 	bl	8001e3c <HAL_GetTick>
 8004224:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004226:	e009      	b.n	800423c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004228:	f7fd fe08 	bl	8001e3c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d902      	bls.n	800423c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	73fb      	strb	r3, [r7, #15]
      break;
 800423a:	e004      	b.n	8004246 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800423c:	f7ff fe05 	bl	8003e4a <LL_RCC_PLLSAI1_IsReady>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d137      	bne.n	80042bc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004260:	4313      	orrs	r3, r2
 8004262:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004276:	4313      	orrs	r3, r2
 8004278:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800427a:	f7ff fdc8 	bl	8003e0e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427e:	f7fd fddd 	bl	8001e3c <HAL_GetTick>
 8004282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004284:	e009      	b.n	800429a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004286:	f7fd fdd9 	bl	8001e3c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d902      	bls.n	800429a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	73fb      	strb	r3, [r7, #15]
        break;
 8004298:	e004      	b.n	80042a4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800429a:	f7ff fdd6 	bl	8003e4a <LL_RCC_PLLSAI1_IsReady>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d1f0      	bne.n	8004286 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d108      	bne.n	80042bc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80042aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b8:	4313      	orrs	r3, r2
 80042ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042d2:	f7ff fdab 	bl	8003e2c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042d6:	f7fd fdb1 	bl	8001e3c <HAL_GetTick>
 80042da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042dc:	e009      	b.n	80042f2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042de:	f7fd fdad 	bl	8001e3c <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d902      	bls.n	80042f2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	73fb      	strb	r3, [r7, #15]
      break;
 80042f0:	e004      	b.n	80042fc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042f2:	f7ff fdaa 	bl	8003e4a <LL_RCC_PLLSAI1_IsReady>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f0      	bne.n	80042de <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d137      	bne.n	8004372 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004316:	4313      	orrs	r3, r2
 8004318:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800432c:	4313      	orrs	r3, r2
 800432e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004330:	f7ff fd6d 	bl	8003e0e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004334:	f7fd fd82 	bl	8001e3c <HAL_GetTick>
 8004338:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800433a:	e009      	b.n	8004350 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800433c:	f7fd fd7e 	bl	8001e3c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d902      	bls.n	8004350 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	73fb      	strb	r3, [r7, #15]
        break;
 800434e:	e004      	b.n	800435a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004350:	f7ff fd7b 	bl	8003e4a <LL_RCC_PLLSAI1_IsReady>
 8004354:	4603      	mov	r3, r0
 8004356:	2b01      	cmp	r3, #1
 8004358:	d1f0      	bne.n	800433c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d108      	bne.n	8004372 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800436e:	4313      	orrs	r3, r2
 8004370:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004372:	7bfb      	ldrb	r3, [r7, #15]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e09f      	b.n	80044ce <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fd fb82 	bl	8001aac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80043b0:	4b49      	ldr	r3, [pc, #292]	; (80044d8 <HAL_RTC_Init+0x15c>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d07e      	beq.n	80044ba <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	22ca      	movs	r2, #202	; 0xca
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2253      	movs	r2, #83	; 0x53
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f8ab 	bl	8004528 <RTC_EnterInitMode>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	22ff      	movs	r2, #255	; 0xff
 80043de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2204      	movs	r2, #4
 80043e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
 80043ec:	e067      	b.n	80044be <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80043fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004400:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6899      	ldr	r1, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	68d2      	ldr	r2, [r2, #12]
 8004428:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6919      	ldr	r1, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	041a      	lsls	r2, r3, #16
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800444c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0203 	bic.w	r2, r2, #3
 800445c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b00      	cmp	r3, #0
 8004482:	d113      	bne.n	80044ac <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f829 	bl	80044dc <HAL_RTC_WaitForSynchro>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00d      	beq.n	80044ac <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	22ff      	movs	r2, #255	; 0xff
 8004496:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2204      	movs	r2, #4
 800449c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e010      	b.n	80044ce <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	22ff      	movs	r2, #255	; 0xff
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	73fb      	strb	r3, [r7, #15]
 80044b8:	e001      	b.n	80044be <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d103      	bne.n	80044cc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40002800 	.word	0x40002800

080044dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80044f4:	f7fd fca2 	bl	8001e3c <HAL_GetTick>
 80044f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044fa:	e009      	b.n	8004510 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044fc:	f7fd fc9e 	bl	8001e3c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800450a:	d901      	bls.n	8004510 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e007      	b.n	8004520 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0ee      	beq.n	80044fc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d119      	bne.n	8004572 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f04f 32ff 	mov.w	r2, #4294967295
 8004546:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004548:	f7fd fc78 	bl	8001e3c <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800454e:	e009      	b.n	8004564 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004550:	f7fd fc74 	bl	8001e3c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800455e:	d901      	bls.n	8004564 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e007      	b.n	8004574 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0ee      	beq.n	8004550 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004592:	2302      	movs	r3, #2
 8004594:	e0a8      	b.n	80046e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2202      	movs	r2, #2
 80045a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	22ca      	movs	r2, #202	; 0xca
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2253      	movs	r2, #83	; 0x53
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d020      	beq.n	8004606 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80045c4:	f7fd fc3a 	bl	8001e3c <HAL_GetTick>
 80045c8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80045ca:	e015      	b.n	80045f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045cc:	f7fd fc36 	bl	8001e3c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045da:	d90d      	bls.n	80045f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	22ff      	movs	r2, #255	; 0xff
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2203      	movs	r2, #3
 80045e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e077      	b.n	80046e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e2      	bne.n	80045cc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004614:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004626:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004628:	f7fd fc08 	bl	8001e3c <HAL_GetTick>
 800462c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800462e:	e015      	b.n	800465c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004630:	f7fd fc04 	bl	8001e3c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800463e:	d90d      	bls.n	800465c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	22ff      	movs	r2, #255	; 0xff
 8004646:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2203      	movs	r2, #3
 800464c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e045      	b.n	80046e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0e2      	beq.n	8004630 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0207 	bic.w	r2, r2, #7
 8004680:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6899      	ldr	r1, [r3, #8]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004692:	4b17      	ldr	r3, [pc, #92]	; (80046f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004698:	4a15      	ldr	r2, [pc, #84]	; (80046f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800469a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800469e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80046a2:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a12      	ldr	r2, [pc, #72]	; (80046f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80046a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ac:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046bc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046cc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	22ff      	movs	r2, #255	; 0xff
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	58000800 	.word	0x58000800

080046f4 <LL_RCC_GetUSARTClockSource>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80046fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004700:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4013      	ands	r3, r2
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_RCC_GetLPUARTClockSource>:
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800471c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004720:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4013      	ands	r3, r2
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e042      	b.n	80047cc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fd f9db 	bl	8001b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2224      	movs	r2, #36	; 0x24
 8004762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fe6e 	bl	8005460 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fc43 	bl	8005010 <UART_SetConfig>
 800478a:	4603      	mov	r3, r0
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e01b      	b.n	80047cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 feed 	bl	80055a4 <UART_CheckIdleState>
 80047ca:	4603      	mov	r3, r0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d17b      	bne.n	80048e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_UART_Transmit+0x26>
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e074      	b.n	80048e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2221      	movs	r2, #33	; 0x21
 800480a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800480e:	f7fd fb15 	bl	8001e3c <HAL_GetTick>
 8004812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	88fa      	ldrh	r2, [r7, #6]
 8004818:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482c:	d108      	bne.n	8004840 <HAL_UART_Transmit+0x6c>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d104      	bne.n	8004840 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	e003      	b.n	8004848 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004844:	2300      	movs	r3, #0
 8004846:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004848:	e030      	b.n	80048ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2200      	movs	r2, #0
 8004852:	2180      	movs	r1, #128	; 0x80
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 ff4f 	bl	80056f8 <UART_WaitOnFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e03d      	b.n	80048e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004880:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	3302      	adds	r3, #2
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e007      	b.n	800489a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	781a      	ldrb	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	3301      	adds	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1c8      	bne.n	800484a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2200      	movs	r2, #0
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 ff18 	bl	80056f8 <UART_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e006      	b.n	80048e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e000      	b.n	80048e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
  }
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08a      	sub	sp, #40	; 0x28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004904:	2b20      	cmp	r3, #32
 8004906:	d137      	bne.n	8004978 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_UART_Receive_IT+0x24>
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e030      	b.n	800497a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a18      	ldr	r2, [pc, #96]	; (8004984 <HAL_UART_Receive_IT+0x94>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d01f      	beq.n	8004968 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d018      	beq.n	8004968 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	613b      	str	r3, [r7, #16]
   return(result);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	623b      	str	r3, [r7, #32]
 8004956:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	69f9      	ldr	r1, [r7, #28]
 800495a:	6a3a      	ldr	r2, [r7, #32]
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	61bb      	str	r3, [r7, #24]
   return(result);
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e6      	bne.n	8004936 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	461a      	mov	r2, r3
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 ff30 	bl	80057d4 <UART_Start_Receive_IT>
 8004974:	4603      	mov	r3, r0
 8004976:	e000      	b.n	800497a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004978:	2302      	movs	r3, #2
  }
}
 800497a:	4618      	mov	r0, r3
 800497c:	3728      	adds	r7, #40	; 0x28
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40008000 	.word	0x40008000

08004988 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b0ba      	sub	sp, #232	; 0xe8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80049b6:	4013      	ands	r3, r2
 80049b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d11b      	bne.n	80049fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d015      	beq.n	80049fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d105      	bne.n	80049e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d009      	beq.n	80049fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 82e3 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	4798      	blx	r3
      }
      return;
 80049fa:	e2dd      	b.n	8004fb8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8123 	beq.w	8004c4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a0a:	4b8d      	ldr	r3, [pc, #564]	; (8004c40 <HAL_UART_IRQHandler+0x2b8>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a16:	4b8b      	ldr	r3, [pc, #556]	; (8004c44 <HAL_UART_IRQHandler+0x2bc>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8116 	beq.w	8004c4c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d011      	beq.n	8004a50 <HAL_UART_IRQHandler+0xc8>
 8004a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00b      	beq.n	8004a50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f043 0201 	orr.w	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d011      	beq.n	8004a80 <HAL_UART_IRQHandler+0xf8>
 8004a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00b      	beq.n	8004a80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	f043 0204 	orr.w	r2, r3, #4
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d011      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x128>
 8004a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00b      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	f043 0202 	orr.w	r2, r3, #2
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d017      	beq.n	8004aec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ac8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004acc:	4b5c      	ldr	r3, [pc, #368]	; (8004c40 <HAL_UART_IRQHandler+0x2b8>)
 8004ace:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00b      	beq.n	8004aec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2208      	movs	r2, #8
 8004ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae2:	f043 0208 	orr.w	r2, r3, #8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d012      	beq.n	8004b1e <HAL_UART_IRQHandler+0x196>
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00c      	beq.n	8004b1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b14:	f043 0220 	orr.w	r2, r3, #32
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8249 	beq.w	8004fbc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d013      	beq.n	8004b5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d105      	bne.n	8004b4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b72:	2b40      	cmp	r3, #64	; 0x40
 8004b74:	d005      	beq.n	8004b82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d054      	beq.n	8004c2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 ff48 	bl	8005a18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	d146      	bne.n	8004c24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1d9      	bne.n	8004b96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d017      	beq.n	8004c1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf2:	4a15      	ldr	r2, [pc, #84]	; (8004c48 <HAL_UART_IRQHandler+0x2c0>)
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fd fb2d 	bl	800225c <HAL_DMA_Abort_IT>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d019      	beq.n	8004c3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004c16:	4610      	mov	r0, r2
 8004c18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1a:	e00f      	b.n	8004c3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f9e1 	bl	8004fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c22:	e00b      	b.n	8004c3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f9dd 	bl	8004fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2a:	e007      	b.n	8004c3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f9d9 	bl	8004fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004c3a:	e1bf      	b.n	8004fbc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	bf00      	nop
    return;
 8004c3e:	e1bd      	b.n	8004fbc <HAL_UART_IRQHandler+0x634>
 8004c40:	10000001 	.word	0x10000001
 8004c44:	04000120 	.word	0x04000120
 8004c48:	08005ae5 	.word	0x08005ae5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	f040 8153 	bne.w	8004efc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 814c 	beq.w	8004efc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8145 	beq.w	8004efc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2210      	movs	r2, #16
 8004c78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	f040 80bb 	bne.w	8004e00 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 818f 	beq.w	8004fc0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ca8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cac:	429a      	cmp	r2, r3
 8004cae:	f080 8187 	bcs.w	8004fc0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f040 8087 	bne.w	8004dde <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1da      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3308      	adds	r3, #8
 8004d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e1      	bne.n	8004d1a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3308      	adds	r3, #8
 8004d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e3      	bne.n	8004d56 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dac:	f023 0310 	bic.w	r3, r3, #16
 8004db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dc0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e4      	bne.n	8004d9c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fd f9e0 	bl	800219e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f8fd 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dfe:	e0df      	b.n	8004fc0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 80d1 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004e22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80cc 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e4      	bne.n	8004e2c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	623b      	str	r3, [r7, #32]
   return(result);
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3308      	adds	r3, #8
 8004e86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e8a:	633a      	str	r2, [r7, #48]	; 0x30
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e1      	bne.n	8004e62 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0310 	bic.w	r3, r3, #16
 8004ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	69b9      	ldr	r1, [r7, #24]
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e4      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f87f 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004efa:	e063      	b.n	8004fc4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00e      	beq.n	8004f26 <HAL_UART_IRQHandler+0x59e>
 8004f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f001 fb3e 	bl	80065a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f24:	e051      	b.n	8004fca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d014      	beq.n	8004f5c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d105      	bne.n	8004f4a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d03a      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
    }
    return;
 8004f5a:	e035      	b.n	8004fc8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d009      	beq.n	8004f7c <HAL_UART_IRQHandler+0x5f4>
 8004f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fdcb 	bl	8005b10 <UART_EndTransmit_IT>
    return;
 8004f7a:	e026      	b.n	8004fca <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d009      	beq.n	8004f9c <HAL_UART_IRQHandler+0x614>
 8004f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f001 fb17 	bl	80065c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f9a:	e016      	b.n	8004fca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d010      	beq.n	8004fca <HAL_UART_IRQHandler+0x642>
 8004fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	da0c      	bge.n	8004fca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 faff 	bl	80065b4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fb6:	e008      	b.n	8004fca <HAL_UART_IRQHandler+0x642>
      return;
 8004fb8:	bf00      	nop
 8004fba:	e006      	b.n	8004fca <HAL_UART_IRQHandler+0x642>
    return;
 8004fbc:	bf00      	nop
 8004fbe:	e004      	b.n	8004fca <HAL_UART_IRQHandler+0x642>
      return;
 8004fc0:	bf00      	nop
 8004fc2:	e002      	b.n	8004fca <HAL_UART_IRQHandler+0x642>
      return;
 8004fc4:	bf00      	nop
 8004fc6:	e000      	b.n	8004fca <HAL_UART_IRQHandler+0x642>
    return;
 8004fc8:	bf00      	nop
  }
}
 8004fca:	37e8      	adds	r7, #232	; 0xe8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005014:	b08c      	sub	sp, #48	; 0x30
 8005016:	af00      	add	r7, sp, #0
 8005018:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	431a      	orrs	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	431a      	orrs	r2, r3
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	4313      	orrs	r3, r2
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4baf      	ldr	r3, [pc, #700]	; (80052fc <UART_SetConfig+0x2ec>)
 8005040:	4013      	ands	r3, r2
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	6812      	ldr	r2, [r2, #0]
 8005046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005048:	430b      	orrs	r3, r1
 800504a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4aa4      	ldr	r2, [pc, #656]	; (8005300 <UART_SetConfig+0x2f0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005078:	4313      	orrs	r3, r2
 800507a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005086:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005090:	430b      	orrs	r3, r1
 8005092:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	f023 010f 	bic.w	r1, r3, #15
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a95      	ldr	r2, [pc, #596]	; (8005304 <UART_SetConfig+0x2f4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d125      	bne.n	8005100 <UART_SetConfig+0xf0>
 80050b4:	2003      	movs	r0, #3
 80050b6:	f7ff fb1d 	bl	80046f4 <LL_RCC_GetUSARTClockSource>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d81b      	bhi.n	80050f8 <UART_SetConfig+0xe8>
 80050c0:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <UART_SetConfig+0xb8>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050d9 	.word	0x080050d9
 80050cc:	080050e9 	.word	0x080050e9
 80050d0:	080050e1 	.word	0x080050e1
 80050d4:	080050f1 	.word	0x080050f1
 80050d8:	2301      	movs	r3, #1
 80050da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050de:	e042      	b.n	8005166 <UART_SetConfig+0x156>
 80050e0:	2302      	movs	r3, #2
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e6:	e03e      	b.n	8005166 <UART_SetConfig+0x156>
 80050e8:	2304      	movs	r3, #4
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ee:	e03a      	b.n	8005166 <UART_SetConfig+0x156>
 80050f0:	2308      	movs	r3, #8
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f6:	e036      	b.n	8005166 <UART_SetConfig+0x156>
 80050f8:	2310      	movs	r3, #16
 80050fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050fe:	e032      	b.n	8005166 <UART_SetConfig+0x156>
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a7e      	ldr	r2, [pc, #504]	; (8005300 <UART_SetConfig+0x2f0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d12a      	bne.n	8005160 <UART_SetConfig+0x150>
 800510a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800510e:	f7ff fb01 	bl	8004714 <LL_RCC_GetLPUARTClockSource>
 8005112:	4603      	mov	r3, r0
 8005114:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005118:	d01a      	beq.n	8005150 <UART_SetConfig+0x140>
 800511a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800511e:	d81b      	bhi.n	8005158 <UART_SetConfig+0x148>
 8005120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005124:	d00c      	beq.n	8005140 <UART_SetConfig+0x130>
 8005126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800512a:	d815      	bhi.n	8005158 <UART_SetConfig+0x148>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <UART_SetConfig+0x128>
 8005130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005134:	d008      	beq.n	8005148 <UART_SetConfig+0x138>
 8005136:	e00f      	b.n	8005158 <UART_SetConfig+0x148>
 8005138:	2300      	movs	r3, #0
 800513a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513e:	e012      	b.n	8005166 <UART_SetConfig+0x156>
 8005140:	2302      	movs	r3, #2
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005146:	e00e      	b.n	8005166 <UART_SetConfig+0x156>
 8005148:	2304      	movs	r3, #4
 800514a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800514e:	e00a      	b.n	8005166 <UART_SetConfig+0x156>
 8005150:	2308      	movs	r3, #8
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005156:	e006      	b.n	8005166 <UART_SetConfig+0x156>
 8005158:	2310      	movs	r3, #16
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800515e:	e002      	b.n	8005166 <UART_SetConfig+0x156>
 8005160:	2310      	movs	r3, #16
 8005162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a65      	ldr	r2, [pc, #404]	; (8005300 <UART_SetConfig+0x2f0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	f040 8097 	bne.w	80052a0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005172:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005176:	2b08      	cmp	r3, #8
 8005178:	d823      	bhi.n	80051c2 <UART_SetConfig+0x1b2>
 800517a:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <UART_SetConfig+0x170>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051c3 	.word	0x080051c3
 8005188:	080051ad 	.word	0x080051ad
 800518c:	080051c3 	.word	0x080051c3
 8005190:	080051b3 	.word	0x080051b3
 8005194:	080051c3 	.word	0x080051c3
 8005198:	080051c3 	.word	0x080051c3
 800519c:	080051c3 	.word	0x080051c3
 80051a0:	080051bb 	.word	0x080051bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a4:	f7fe fbe6 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 80051a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051aa:	e010      	b.n	80051ce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051ac:	4b56      	ldr	r3, [pc, #344]	; (8005308 <UART_SetConfig+0x2f8>)
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051b0:	e00d      	b.n	80051ce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051b2:	f7fe fb5f 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 80051b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051b8:	e009      	b.n	80051ce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051c0:	e005      	b.n	80051ce <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 812b 	beq.w	800542c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	4a4c      	ldr	r2, [pc, #304]	; (800530c <UART_SetConfig+0x2fc>)
 80051dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e0:	461a      	mov	r2, r3
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	4413      	add	r3, r2
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d305      	bcc.n	8005206 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	429a      	cmp	r2, r3
 8005204:	d903      	bls.n	800520e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800520c:	e10e      	b.n	800542c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	2200      	movs	r2, #0
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	60fa      	str	r2, [r7, #12]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	4a3c      	ldr	r2, [pc, #240]	; (800530c <UART_SetConfig+0x2fc>)
 800521c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005220:	b29b      	uxth	r3, r3
 8005222:	2200      	movs	r2, #0
 8005224:	603b      	str	r3, [r7, #0]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800522c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005230:	f7fa ffac 	bl	800018c <__aeabi_uldivmod>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4610      	mov	r0, r2
 800523a:	4619      	mov	r1, r3
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	020b      	lsls	r3, r1, #8
 8005246:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800524a:	0202      	lsls	r2, r0, #8
 800524c:	6979      	ldr	r1, [r7, #20]
 800524e:	6849      	ldr	r1, [r1, #4]
 8005250:	0849      	lsrs	r1, r1, #1
 8005252:	2000      	movs	r0, #0
 8005254:	460c      	mov	r4, r1
 8005256:	4605      	mov	r5, r0
 8005258:	eb12 0804 	adds.w	r8, r2, r4
 800525c:	eb43 0905 	adc.w	r9, r3, r5
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	469a      	mov	sl, r3
 8005268:	4693      	mov	fp, r2
 800526a:	4652      	mov	r2, sl
 800526c:	465b      	mov	r3, fp
 800526e:	4640      	mov	r0, r8
 8005270:	4649      	mov	r1, r9
 8005272:	f7fa ff8b 	bl	800018c <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4613      	mov	r3, r2
 800527c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005284:	d308      	bcc.n	8005298 <UART_SetConfig+0x288>
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800528c:	d204      	bcs.n	8005298 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a3a      	ldr	r2, [r7, #32]
 8005294:	60da      	str	r2, [r3, #12]
 8005296:	e0c9      	b.n	800542c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800529e:	e0c5      	b.n	800542c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a8:	d16d      	bne.n	8005386 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80052aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052ae:	3b01      	subs	r3, #1
 80052b0:	2b07      	cmp	r3, #7
 80052b2:	d82d      	bhi.n	8005310 <UART_SetConfig+0x300>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0x2ac>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052dd 	.word	0x080052dd
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	08005311 	.word	0x08005311
 80052c8:	080052eb 	.word	0x080052eb
 80052cc:	08005311 	.word	0x08005311
 80052d0:	08005311 	.word	0x08005311
 80052d4:	08005311 	.word	0x08005311
 80052d8:	080052f3 	.word	0x080052f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052dc:	f7fe fb60 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 80052e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052e2:	e01b      	b.n	800531c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e4:	4b08      	ldr	r3, [pc, #32]	; (8005308 <UART_SetConfig+0x2f8>)
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052e8:	e018      	b.n	800531c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ea:	f7fe fac3 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 80052ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052f0:	e014      	b.n	800531c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052f8:	e010      	b.n	800531c <UART_SetConfig+0x30c>
 80052fa:	bf00      	nop
 80052fc:	cfff69f3 	.word	0xcfff69f3
 8005300:	40008000 	.word	0x40008000
 8005304:	40013800 	.word	0x40013800
 8005308:	00f42400 	.word	0x00f42400
 800530c:	0800a034 	.word	0x0800a034
      default:
        pclk = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800531a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8084 	beq.w	800542c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	4a4b      	ldr	r2, [pc, #300]	; (8005458 <UART_SetConfig+0x448>)
 800532a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800532e:	461a      	mov	r2, r3
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	fbb3 f3f2 	udiv	r3, r3, r2
 8005336:	005a      	lsls	r2, r3, #1
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	085b      	lsrs	r3, r3, #1
 800533e:	441a      	add	r2, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	2b0f      	cmp	r3, #15
 800534e:	d916      	bls.n	800537e <UART_SetConfig+0x36e>
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005356:	d212      	bcs.n	800537e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	b29b      	uxth	r3, r3
 800535c:	f023 030f 	bic.w	r3, r3, #15
 8005360:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	085b      	lsrs	r3, r3, #1
 8005366:	b29b      	uxth	r3, r3
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	b29a      	uxth	r2, r3
 800536e:	8bfb      	ldrh	r3, [r7, #30]
 8005370:	4313      	orrs	r3, r2
 8005372:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	8bfa      	ldrh	r2, [r7, #30]
 800537a:	60da      	str	r2, [r3, #12]
 800537c:	e056      	b.n	800542c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005384:	e052      	b.n	800542c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800538a:	3b01      	subs	r3, #1
 800538c:	2b07      	cmp	r3, #7
 800538e:	d822      	bhi.n	80053d6 <UART_SetConfig+0x3c6>
 8005390:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <UART_SetConfig+0x388>)
 8005392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005396:	bf00      	nop
 8005398:	080053b9 	.word	0x080053b9
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053d7 	.word	0x080053d7
 80053a4:	080053c7 	.word	0x080053c7
 80053a8:	080053d7 	.word	0x080053d7
 80053ac:	080053d7 	.word	0x080053d7
 80053b0:	080053d7 	.word	0x080053d7
 80053b4:	080053cf 	.word	0x080053cf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b8:	f7fe faf2 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 80053bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053be:	e010      	b.n	80053e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c0:	4b26      	ldr	r3, [pc, #152]	; (800545c <UART_SetConfig+0x44c>)
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053c4:	e00d      	b.n	80053e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c6:	f7fe fa55 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 80053ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053cc:	e009      	b.n	80053e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053d4:	e005      	b.n	80053e2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053e0:	bf00      	nop
    }

    if (pclk != 0U)
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d021      	beq.n	800542c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	4a1a      	ldr	r2, [pc, #104]	; (8005458 <UART_SetConfig+0x448>)
 80053ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f2:	461a      	mov	r2, r3
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	085b      	lsrs	r3, r3, #1
 8005400:	441a      	add	r2, r3
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	fbb2 f3f3 	udiv	r3, r2, r3
 800540a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	2b0f      	cmp	r3, #15
 8005410:	d909      	bls.n	8005426 <UART_SetConfig+0x416>
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d205      	bcs.n	8005426 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	b29a      	uxth	r2, r3
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60da      	str	r2, [r3, #12]
 8005424:	e002      	b.n	800542c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2201      	movs	r2, #1
 8005430:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2201      	movs	r2, #1
 8005438:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2200      	movs	r2, #0
 8005440:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2200      	movs	r2, #0
 8005446:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005448:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800544c:	4618      	mov	r0, r3
 800544e:	3730      	adds	r7, #48	; 0x30
 8005450:	46bd      	mov	sp, r7
 8005452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005456:	bf00      	nop
 8005458:	0800a034 	.word	0x0800a034
 800545c:	00f42400 	.word	0x00f42400

08005460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	f003 0310 	and.w	r3, r3, #16
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01a      	beq.n	8005576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800555e:	d10a      	bne.n	8005576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	605a      	str	r2, [r3, #4]
  }
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b098      	sub	sp, #96	; 0x60
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055b4:	f7fc fc42 	bl	8001e3c <HAL_GetTick>
 80055b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d12f      	bne.n	8005628 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d0:	2200      	movs	r2, #0
 80055d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f88e 	bl	80056f8 <UART_WaitOnFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d022      	beq.n	8005628 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f6:	653b      	str	r3, [r7, #80]	; 0x50
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005600:	647b      	str	r3, [r7, #68]	; 0x44
 8005602:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800560e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e6      	bne.n	80055e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e063      	b.n	80056f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b04      	cmp	r3, #4
 8005634:	d149      	bne.n	80056ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005636:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800563e:	2200      	movs	r2, #0
 8005640:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f857 	bl	80056f8 <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d03c      	beq.n	80056ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	623b      	str	r3, [r7, #32]
   return(result);
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005664:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566e:	633b      	str	r3, [r7, #48]	; 0x30
 8005670:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e6      	bne.n	8005650 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	60fb      	str	r3, [r7, #12]
   return(result);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	64bb      	str	r3, [r7, #72]	; 0x48
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056a2:	61fa      	str	r2, [r7, #28]
 80056a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	69b9      	ldr	r1, [r7, #24]
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	617b      	str	r3, [r7, #20]
   return(result);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e5      	bne.n	8005682 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e012      	b.n	80056f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3758      	adds	r7, #88	; 0x58
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005708:	e04f      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d04b      	beq.n	80057aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005712:	f7fc fb93 	bl	8001e3c <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	429a      	cmp	r2, r3
 8005720:	d302      	bcc.n	8005728 <UART_WaitOnFlagUntilTimeout+0x30>
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e04e      	b.n	80057ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	2b00      	cmp	r3, #0
 8005738:	d037      	beq.n	80057aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	d034      	beq.n	80057aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b40      	cmp	r3, #64	; 0x40
 8005744:	d031      	beq.n	80057aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	2b08      	cmp	r3, #8
 8005752:	d110      	bne.n	8005776 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2208      	movs	r2, #8
 800575a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f95b 	bl	8005a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2208      	movs	r2, #8
 8005766:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e029      	b.n	80057ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005784:	d111      	bne.n	80057aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800578e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f941 	bl	8005a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e00f      	b.n	80057ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4013      	ands	r3, r2
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	bf0c      	ite	eq
 80057ba:	2301      	moveq	r3, #1
 80057bc:	2300      	movne	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d0a0      	beq.n	800570a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b0a3      	sub	sp, #140	; 0x8c
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	4613      	mov	r3, r2
 80057e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	88fa      	ldrh	r2, [r7, #6]
 80057ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	88fa      	ldrh	r2, [r7, #6]
 80057f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005806:	d10e      	bne.n	8005826 <UART_Start_Receive_IT+0x52>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <UART_Start_Receive_IT+0x48>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005816:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800581a:	e02d      	b.n	8005878 <UART_Start_Receive_IT+0xa4>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	22ff      	movs	r2, #255	; 0xff
 8005820:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005824:	e028      	b.n	8005878 <UART_Start_Receive_IT+0xa4>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10d      	bne.n	800584a <UART_Start_Receive_IT+0x76>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <UART_Start_Receive_IT+0x6c>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	22ff      	movs	r2, #255	; 0xff
 800583a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800583e:	e01b      	b.n	8005878 <UART_Start_Receive_IT+0xa4>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	227f      	movs	r2, #127	; 0x7f
 8005844:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005848:	e016      	b.n	8005878 <UART_Start_Receive_IT+0xa4>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005852:	d10d      	bne.n	8005870 <UART_Start_Receive_IT+0x9c>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d104      	bne.n	8005866 <UART_Start_Receive_IT+0x92>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	227f      	movs	r2, #127	; 0x7f
 8005860:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005864:	e008      	b.n	8005878 <UART_Start_Receive_IT+0xa4>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	223f      	movs	r2, #63	; 0x3f
 800586a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800586e:	e003      	b.n	8005878 <UART_Start_Receive_IT+0xa4>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2222      	movs	r2, #34	; 0x22
 8005884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3308      	adds	r3, #8
 800588e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3308      	adds	r3, #8
 80058a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80058ac:	673a      	str	r2, [r7, #112]	; 0x70
 80058ae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80058b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80058ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e3      	bne.n	8005888 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058c8:	d14f      	bne.n	800596a <UART_Start_Receive_IT+0x196>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80058d0:	88fa      	ldrh	r2, [r7, #6]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d349      	bcc.n	800596a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058de:	d107      	bne.n	80058f0 <UART_Start_Receive_IT+0x11c>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d103      	bne.n	80058f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4a47      	ldr	r2, [pc, #284]	; (8005a08 <UART_Start_Receive_IT+0x234>)
 80058ec:	675a      	str	r2, [r3, #116]	; 0x74
 80058ee:	e002      	b.n	80058f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a46      	ldr	r2, [pc, #280]	; (8005a0c <UART_Start_Receive_IT+0x238>)
 80058f4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01a      	beq.n	8005934 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800590c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005920:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005922:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005924:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005926:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005928:	e841 2300 	strex	r3, r2, [r1]
 800592c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800592e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1e4      	bne.n	80058fe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3308      	adds	r3, #8
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3308      	adds	r3, #8
 8005952:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005954:	64ba      	str	r2, [r7, #72]	; 0x48
 8005956:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800595a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e5      	bne.n	8005934 <UART_Start_Receive_IT+0x160>
 8005968:	e046      	b.n	80059f8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005972:	d107      	bne.n	8005984 <UART_Start_Receive_IT+0x1b0>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d103      	bne.n	8005984 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a24      	ldr	r2, [pc, #144]	; (8005a10 <UART_Start_Receive_IT+0x23c>)
 8005980:	675a      	str	r2, [r3, #116]	; 0x74
 8005982:	e002      	b.n	800598a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4a23      	ldr	r2, [pc, #140]	; (8005a14 <UART_Start_Receive_IT+0x240>)
 8005988:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d019      	beq.n	80059c6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80059a6:	677b      	str	r3, [r7, #116]	; 0x74
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
 80059b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e6      	bne.n	8005992 <UART_Start_Receive_IT+0x1be>
 80059c4:	e018      	b.n	80059f8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	613b      	str	r3, [r7, #16]
   return(result);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f043 0320 	orr.w	r3, r3, #32
 80059da:	67bb      	str	r3, [r7, #120]	; 0x78
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	461a      	mov	r2, r3
 80059e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059e4:	623b      	str	r3, [r7, #32]
 80059e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	69f9      	ldr	r1, [r7, #28]
 80059ea:	6a3a      	ldr	r2, [r7, #32]
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e6      	bne.n	80059c6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	378c      	adds	r7, #140	; 0x8c
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	08006239 	.word	0x08006239
 8005a0c:	08005ed9 	.word	0x08005ed9
 8005a10:	08005d21 	.word	0x08005d21
 8005a14:	08005b69 	.word	0x08005b69

08005a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b095      	sub	sp, #84	; 0x54
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e6      	bne.n	8005a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a68:	f023 0301 	bic.w	r3, r3, #1
 8005a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e3      	bne.n	8005a52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d118      	bne.n	8005ac4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f023 0310 	bic.w	r3, r3, #16
 8005aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6979      	ldr	r1, [r7, #20]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	613b      	str	r3, [r7, #16]
   return(result);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e6      	bne.n	8005a92 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005ad8:	bf00      	nop
 8005ada:	3754      	adds	r7, #84	; 0x54
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff fa6e 	bl	8004fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2c:	61fb      	str	r3, [r7, #28]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	6979      	ldr	r1, [r7, #20]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	613b      	str	r3, [r7, #16]
   return(result);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e6      	bne.n	8005b18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fa39 	bl	8004fd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b5e:	bf00      	nop
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b09c      	sub	sp, #112	; 0x70
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b76:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b80:	2b22      	cmp	r3, #34	; 0x22
 8005b82:	f040 80be 	bne.w	8005d02 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b94:	b2d9      	uxtb	r1, r3
 8005b96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba0:	400a      	ands	r2, r1
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f040 80a1 	bne.w	8005d12 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005be4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bf0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e6      	bne.n	8005bd0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3308      	adds	r3, #8
 8005c08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	667b      	str	r3, [r7, #100]	; 0x64
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c22:	647a      	str	r2, [r7, #68]	; 0x44
 8005c24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e5      	bne.n	8005c02 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a33      	ldr	r2, [pc, #204]	; (8005d1c <UART_RxISR_8BIT+0x1b4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d01f      	beq.n	8005c94 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d018      	beq.n	8005c94 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c76:	663b      	str	r3, [r7, #96]	; 0x60
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c80:	633b      	str	r3, [r7, #48]	; 0x30
 8005c82:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e6      	bne.n	8005c62 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d12e      	bne.n	8005cfa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0310 	bic.w	r3, r3, #16
 8005cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc0:	61fb      	str	r3, [r7, #28]
 8005cc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	69b9      	ldr	r1, [r7, #24]
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e6      	bne.n	8005ca2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b10      	cmp	r3, #16
 8005ce0:	d103      	bne.n	8005cea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2210      	movs	r2, #16
 8005ce8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff f980 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cf8:	e00b      	b.n	8005d12 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fb fdd2 	bl	80018a4 <HAL_UART_RxCpltCallback>
}
 8005d00:	e007      	b.n	8005d12 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	699a      	ldr	r2, [r3, #24]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0208 	orr.w	r2, r2, #8
 8005d10:	619a      	str	r2, [r3, #24]
}
 8005d12:	bf00      	nop
 8005d14:	3770      	adds	r7, #112	; 0x70
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40008000 	.word	0x40008000

08005d20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b09c      	sub	sp, #112	; 0x70
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d2e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d38:	2b22      	cmp	r3, #34	; 0x22
 8005d3a:	f040 80be 	bne.w	8005eba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d4e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005d52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005d56:	4013      	ands	r3, r2
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d62:	1c9a      	adds	r2, r3, #2
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f040 80a1 	bne.w	8005eca <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005da6:	657b      	str	r3, [r7, #84]	; 0x54
 8005da8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e6      	bne.n	8005d88 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	f023 0301 	bic.w	r3, r3, #1
 8005dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dda:	643a      	str	r2, [r7, #64]	; 0x40
 8005ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005de0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e5      	bne.n	8005dba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a33      	ldr	r2, [pc, #204]	; (8005ed4 <UART_RxISR_16BIT+0x1b4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d01f      	beq.n	8005e4c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d018      	beq.n	8005e4c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e3a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e6      	bne.n	8005e1a <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d12e      	bne.n	8005eb2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f023 0310 	bic.w	r3, r3, #16
 8005e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	6979      	ldr	r1, [r7, #20]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	613b      	str	r3, [r7, #16]
   return(result);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e6      	bne.n	8005e5a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	f003 0310 	and.w	r3, r3, #16
 8005e96:	2b10      	cmp	r3, #16
 8005e98:	d103      	bne.n	8005ea2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2210      	movs	r2, #16
 8005ea0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff f8a4 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005eb0:	e00b      	b.n	8005eca <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fb fcf6 	bl	80018a4 <HAL_UART_RxCpltCallback>
}
 8005eb8:	e007      	b.n	8005eca <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0208 	orr.w	r2, r2, #8
 8005ec8:	619a      	str	r2, [r3, #24]
}
 8005eca:	bf00      	nop
 8005ecc:	3770      	adds	r7, #112	; 0x70
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40008000 	.word	0x40008000

08005ed8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b0ac      	sub	sp, #176	; 0xb0
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005ee6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f0e:	2b22      	cmp	r3, #34	; 0x22
 8005f10:	f040 8182 	bne.w	8006218 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f1a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f1e:	e125      	b.n	800616c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f2a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005f2e:	b2d9      	uxtb	r1, r3
 8005f30:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3a:	400a      	ands	r2, r1
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d053      	beq.n	800601a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d011      	beq.n	8005fa2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005f7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00b      	beq.n	8005fa2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f98:	f043 0201 	orr.w	r2, r3, #1
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d011      	beq.n	8005fd2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00b      	beq.n	8005fd2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc8:	f043 0204 	orr.w	r2, r3, #4
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fd6:	f003 0304 	and.w	r3, r3, #4
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d011      	beq.n	8006002 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2204      	movs	r2, #4
 8005ff0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff8:	f043 0202 	orr.w	r2, r3, #2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006008:	2b00      	cmp	r3, #0
 800600a:	d006      	beq.n	800601a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7fe ffe9 	bl	8004fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	f040 80a2 	bne.w	800616c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800603c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800604a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800604c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006050:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e4      	bne.n	8006028 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800606e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006074:	f023 0301 	bic.w	r3, r3, #1
 8006078:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3308      	adds	r3, #8
 8006082:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006086:	66ba      	str	r2, [r7, #104]	; 0x68
 8006088:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800608c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e1      	bne.n	800605e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a5f      	ldr	r2, [pc, #380]	; (8006230 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d021      	beq.n	80060fc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01a      	beq.n	80060fc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80060d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060e8:	657b      	str	r3, [r7, #84]	; 0x54
 80060ea:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e4      	bne.n	80060c6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006100:	2b01      	cmp	r3, #1
 8006102:	d130      	bne.n	8006166 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006112:	e853 3f00 	ldrex	r3, [r3]
 8006116:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	f023 0310 	bic.w	r3, r3, #16
 800611e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800612c:	643b      	str	r3, [r7, #64]	; 0x40
 800612e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e4      	bne.n	800610a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2b10      	cmp	r3, #16
 800614c:	d103      	bne.n	8006156 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2210      	movs	r2, #16
 8006154:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fe ff4a 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
 8006164:	e002      	b.n	800616c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fb fb9c 	bl	80018a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800616c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006170:	2b00      	cmp	r3, #0
 8006172:	d006      	beq.n	8006182 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	f47f aecf 	bne.w	8005f20 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006188:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800618c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006190:	2b00      	cmp	r3, #0
 8006192:	d049      	beq.n	8006228 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800619a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800619e:	429a      	cmp	r2, r3
 80061a0:	d242      	bcs.n	8006228 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3308      	adds	r3, #8
 80061a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3308      	adds	r3, #8
 80061c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80061c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e3      	bne.n	80061a2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a15      	ldr	r2, [pc, #84]	; (8006234 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80061de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f043 0320 	orr.w	r3, r3, #32
 80061f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	461a      	mov	r2, r3
 80061fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6979      	ldr	r1, [r7, #20]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	613b      	str	r3, [r7, #16]
   return(result);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e4      	bne.n	80061e0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006216:	e007      	b.n	8006228 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0208 	orr.w	r2, r2, #8
 8006226:	619a      	str	r2, [r3, #24]
}
 8006228:	bf00      	nop
 800622a:	37b0      	adds	r7, #176	; 0xb0
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40008000 	.word	0x40008000
 8006234:	08005b69 	.word	0x08005b69

08006238 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b0ae      	sub	sp, #184	; 0xb8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006246:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800626e:	2b22      	cmp	r3, #34	; 0x22
 8006270:	f040 8186 	bne.w	8006580 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800627a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800627e:	e129      	b.n	80064d4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006292:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006296:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800629a:	4013      	ands	r3, r2
 800629c:	b29a      	uxth	r2, r3
 800629e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a8:	1c9a      	adds	r2, r3, #2
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80062ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d053      	beq.n	800637e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d011      	beq.n	8006306 <UART_RxISR_16BIT_FIFOEN+0xce>
 80062e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2201      	movs	r2, #1
 80062f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fc:	f043 0201 	orr.w	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d011      	beq.n	8006336 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006312:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00b      	beq.n	8006336 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2202      	movs	r2, #2
 8006324:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632c:	f043 0204 	orr.w	r2, r3, #4
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006336:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b00      	cmp	r3, #0
 8006340:	d011      	beq.n	8006366 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00b      	beq.n	8006366 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2204      	movs	r2, #4
 8006354:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635c:	f043 0202 	orr.w	r2, r3, #2
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636c:	2b00      	cmp	r3, #0
 800636e:	d006      	beq.n	800637e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7fe fe37 	bl	8004fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	f040 80a4 	bne.w	80064d4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800639a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800639c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063b2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e2      	bne.n	800638c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3308      	adds	r3, #8
 80063cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063dc:	f023 0301 	bic.w	r3, r3, #1
 80063e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3308      	adds	r3, #8
 80063ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80063ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e1      	bne.n	80063c6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2220      	movs	r2, #32
 8006406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a5f      	ldr	r2, [pc, #380]	; (8006598 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d021      	beq.n	8006464 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d01a      	beq.n	8006464 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800643c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800643e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006450:	65bb      	str	r3, [r7, #88]	; 0x58
 8006452:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006456:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800645e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e4      	bne.n	800642e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d130      	bne.n	80064ce <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006482:	f023 0310 	bic.w	r3, r3, #16
 8006486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006494:	647b      	str	r3, [r7, #68]	; 0x44
 8006496:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800649a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e4      	bne.n	8006472 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f003 0310 	and.w	r3, r3, #16
 80064b2:	2b10      	cmp	r3, #16
 80064b4:	d103      	bne.n	80064be <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2210      	movs	r2, #16
 80064bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fe fd96 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
 80064cc:	e002      	b.n	80064d4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fb f9e8 	bl	80018a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80064d4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d006      	beq.n	80064ea <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80064dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f47f aecb 	bne.w	8006280 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064f0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80064f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d049      	beq.n	8006590 <UART_RxISR_16BIT_FIFOEN+0x358>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006502:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006506:	429a      	cmp	r2, r3
 8006508:	d242      	bcs.n	8006590 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3308      	adds	r3, #8
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	623b      	str	r3, [r7, #32]
   return(result);
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3308      	adds	r3, #8
 800652a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800652e:	633a      	str	r2, [r7, #48]	; 0x30
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e3      	bne.n	800650a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a15      	ldr	r2, [pc, #84]	; (800659c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006546:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	60fb      	str	r3, [r7, #12]
   return(result);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f043 0320 	orr.w	r3, r3, #32
 800655c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	461a      	mov	r2, r3
 8006566:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800656a:	61fb      	str	r3, [r7, #28]
 800656c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	69b9      	ldr	r1, [r7, #24]
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	617b      	str	r3, [r7, #20]
   return(result);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e4      	bne.n	8006548 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800657e:	e007      	b.n	8006590 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0208 	orr.w	r2, r2, #8
 800658e:	619a      	str	r2, [r3, #24]
}
 8006590:	bf00      	nop
 8006592:	37b8      	adds	r7, #184	; 0xb8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40008000 	.word	0x40008000
 800659c:	08005d21 	.word	0x08005d21

080065a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e027      	b.n	8006642 <HAL_UARTEx_DisableFifoMode+0x66>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2224      	movs	r2, #36	; 0x24
 80065fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0201 	bic.w	r2, r2, #1
 8006618:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006620:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2220      	movs	r2, #32
 8006634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006662:	2302      	movs	r3, #2
 8006664:	e02d      	b.n	80066c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2224      	movs	r2, #36	; 0x24
 8006672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f850 	bl	8006748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066de:	2302      	movs	r3, #2
 80066e0:	e02d      	b.n	800673e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2224      	movs	r2, #36	; 0x24
 80066ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0201 	bic.w	r2, r2, #1
 8006708:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f812 	bl	8006748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006754:	2b00      	cmp	r3, #0
 8006756:	d108      	bne.n	800676a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006768:	e031      	b.n	80067ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800676a:	2308      	movs	r3, #8
 800676c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800676e:	2308      	movs	r3, #8
 8006770:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	0e5b      	lsrs	r3, r3, #25
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	0f5b      	lsrs	r3, r3, #29
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	7b3a      	ldrb	r2, [r7, #12]
 8006796:	4911      	ldr	r1, [pc, #68]	; (80067dc <UARTEx_SetNbDataToProcess+0x94>)
 8006798:	5c8a      	ldrb	r2, [r1, r2]
 800679a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800679e:	7b3a      	ldrb	r2, [r7, #12]
 80067a0:	490f      	ldr	r1, [pc, #60]	; (80067e0 <UARTEx_SetNbDataToProcess+0x98>)
 80067a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	7b7a      	ldrb	r2, [r7, #13]
 80067b4:	4909      	ldr	r1, [pc, #36]	; (80067dc <UARTEx_SetNbDataToProcess+0x94>)
 80067b6:	5c8a      	ldrb	r2, [r1, r2]
 80067b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067bc:	7b7a      	ldrb	r2, [r7, #13]
 80067be:	4908      	ldr	r1, [pc, #32]	; (80067e0 <UARTEx_SetNbDataToProcess+0x98>)
 80067c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067ce:	bf00      	nop
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	0800a04c 	.word	0x0800a04c
 80067e0:	0800a054 	.word	0x0800a054

080067e4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067ee:	f107 0308 	add.w	r3, r7, #8
 80067f2:	2218      	movs	r2, #24
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 f8d8 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 80067fc:	233f      	movs	r3, #63	; 0x3f
 80067fe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006800:	2381      	movs	r3, #129	; 0x81
 8006802:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006804:	1dfb      	adds	r3, r7, #7
 8006806:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006808:	2301      	movs	r3, #1
 800680a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800680c:	f107 0308 	add.w	r3, r7, #8
 8006810:	2100      	movs	r1, #0
 8006812:	4618      	mov	r0, r3
 8006814:	f001 fb54 	bl	8007ec0 <hci_send_req>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	da01      	bge.n	8006822 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800681e:	23ff      	movs	r3, #255	; 0xff
 8006820:	e000      	b.n	8006824 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006822:	79fb      	ldrb	r3, [r7, #7]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3720      	adds	r7, #32
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800682c:	b5b0      	push	{r4, r5, r7, lr}
 800682e:	b0ce      	sub	sp, #312	; 0x138
 8006830:	af00      	add	r7, sp, #0
 8006832:	4605      	mov	r5, r0
 8006834:	460c      	mov	r4, r1
 8006836:	4610      	mov	r0, r2
 8006838:	4619      	mov	r1, r3
 800683a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800683e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006842:	462a      	mov	r2, r5
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800684a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800684e:	4622      	mov	r2, r4
 8006850:	801a      	strh	r2, [r3, #0]
 8006852:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006856:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800685a:	4602      	mov	r2, r0
 800685c:	801a      	strh	r2, [r3, #0]
 800685e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006862:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006866:	460a      	mov	r2, r1
 8006868:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800686a:	f107 0310 	add.w	r3, r7, #16
 800686e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006872:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006876:	3308      	adds	r3, #8
 8006878:	f107 0210 	add.w	r2, r7, #16
 800687c:	4413      	add	r3, r2
 800687e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006882:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006886:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800688a:	4413      	add	r3, r2
 800688c:	3309      	adds	r3, #9
 800688e:	f107 0210 	add.w	r2, r7, #16
 8006892:	4413      	add	r3, r2
 8006894:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006898:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800689c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80068aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068ae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80068b2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80068b6:	7812      	ldrb	r2, [r2, #0]
 80068b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80068ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068be:	3301      	adds	r3, #1
 80068c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80068c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068c8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80068cc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80068d0:	8812      	ldrh	r2, [r2, #0]
 80068d2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80068d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068da:	3302      	adds	r3, #2
 80068dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80068e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068e4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80068e8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80068ec:	8812      	ldrh	r2, [r2, #0]
 80068ee:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80068f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068f6:	3302      	adds	r3, #2
 80068f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80068fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006900:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006904:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006908:	7812      	ldrb	r2, [r2, #0]
 800690a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800690c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006910:	3301      	adds	r3, #1
 8006912:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006916:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800691a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800691e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006920:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006924:	3301      	adds	r3, #1
 8006926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800692a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800692e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006932:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006934:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006938:	3301      	adds	r3, #1
 800693a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800693e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006942:	3308      	adds	r3, #8
 8006944:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006948:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800694c:	4618      	mov	r0, r3
 800694e:	f001 f81d 	bl	800798c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006952:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006956:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800695a:	4413      	add	r3, r2
 800695c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006960:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006964:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006968:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800696a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800696e:	3301      	adds	r3, #1
 8006970:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006974:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006978:	3301      	adds	r3, #1
 800697a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800697e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006982:	4618      	mov	r0, r3
 8006984:	f001 f802 	bl	800798c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006988:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800698c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006990:	4413      	add	r3, r2
 8006992:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8006996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800699a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800699e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80069a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069a4:	3302      	adds	r3, #2
 80069a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80069aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ae:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80069b2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80069b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069b8:	3302      	adds	r3, #2
 80069ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80069be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069c2:	2218      	movs	r2, #24
 80069c4:	2100      	movs	r1, #0
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fff0 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 80069cc:	233f      	movs	r3, #63	; 0x3f
 80069ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80069d2:	2383      	movs	r3, #131	; 0x83
 80069d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80069d8:	f107 0310 	add.w	r3, r7, #16
 80069dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80069e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80069e8:	f107 030f 	add.w	r3, r7, #15
 80069ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069fa:	2100      	movs	r1, #0
 80069fc:	4618      	mov	r0, r3
 80069fe:	f001 fa5f 	bl	8007ec0 <hci_send_req>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	da01      	bge.n	8006a0c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006a08:	23ff      	movs	r3, #255	; 0xff
 8006a0a:	e004      	b.n	8006a16 <aci_gap_set_discoverable+0x1ea>
  return status;
 8006a0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a10:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006a14:	781b      	ldrb	r3, [r3, #0]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bdb0      	pop	{r4, r5, r7, pc}

08006a20 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b0cc      	sub	sp, #304	; 0x130
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4602      	mov	r2, r0
 8006a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006a30:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006a32:	f107 0310 	add.w	r3, r7, #16
 8006a36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006a42:	2200      	movs	r2, #0
 8006a44:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a54:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006a58:	7812      	ldrb	r2, [r2, #0]
 8006a5a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a60:	3301      	adds	r3, #1
 8006a62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a6a:	2218      	movs	r2, #24
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 ff9c 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a74:	233f      	movs	r3, #63	; 0x3f
 8006a76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8006a7a:	2385      	movs	r3, #133	; 0x85
 8006a7c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006a80:	f107 0310 	add.w	r3, r7, #16
 8006a84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a90:	f107 030f 	add.w	r3, r7, #15
 8006a94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 fa0b 	bl	8007ec0 <hci_send_req>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da01      	bge.n	8006ab4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006ab0:	23ff      	movs	r3, #255	; 0xff
 8006ab2:	e004      	b.n	8006abe <aci_gap_set_io_capability+0x9e>
  return status;
 8006ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006abc:	781b      	ldrb	r3, [r3, #0]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006ac8:	b5b0      	push	{r4, r5, r7, lr}
 8006aca:	b0cc      	sub	sp, #304	; 0x130
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4605      	mov	r5, r0
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ada:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006ade:	462a      	mov	r2, r5
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006aea:	4622      	mov	r2, r4
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006af6:	4602      	mov	r2, r0
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b02:	460a      	mov	r2, r1
 8006b04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006b06:	f107 0310 	add.w	r3, r7, #16
 8006b0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b12:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006b16:	2200      	movs	r2, #0
 8006b18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b28:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006b2c:	7812      	ldrb	r2, [r2, #0]
 8006b2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b34:	3301      	adds	r3, #1
 8006b36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b42:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006b46:	7812      	ldrb	r2, [r2, #0]
 8006b48:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006b4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b4e:	3301      	adds	r3, #1
 8006b50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8006b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b5c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006b60:	7812      	ldrb	r2, [r2, #0]
 8006b62:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006b64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b68:	3301      	adds	r3, #1
 8006b6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b76:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006b7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b82:	3301      	adds	r3, #1
 8006b84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006b90:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006b92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b96:	3301      	adds	r3, #1
 8006b98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006ba4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006ba6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006baa:	3301      	adds	r3, #1
 8006bac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006bb8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006bba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006bcc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bde:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006be2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006be4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006be8:	3301      	adds	r3, #1
 8006bea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006bee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bf2:	2218      	movs	r2, #24
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fed8 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8006bfc:	233f      	movs	r3, #63	; 0x3f
 8006bfe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8006c02:	2386      	movs	r3, #134	; 0x86
 8006c04:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c08:	f107 0310 	add.w	r3, r7, #16
 8006c0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006c18:	f107 030f 	add.w	r3, r7, #15
 8006c1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f001 f947 	bl	8007ec0 <hci_send_req>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	da01      	bge.n	8006c3c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006c38:	23ff      	movs	r3, #255	; 0xff
 8006c3a:	e004      	b.n	8006c46 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c40:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006c44:	781b      	ldrb	r3, [r3, #0]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bdb0      	pop	{r4, r5, r7, pc}

08006c50 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b0cc      	sub	sp, #304	; 0x130
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4602      	mov	r2, r0
 8006c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c60:	6019      	str	r1, [r3, #0]
 8006c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c66:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006c6a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006c6c:	f107 0310 	add.w	r3, r7, #16
 8006c70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c78:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c8e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006c92:	8812      	ldrh	r2, [r2, #0]
 8006c94:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006c96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c9a:	3302      	adds	r3, #2
 8006c9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8006ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ca8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006cac:	6812      	ldr	r2, [r2, #0]
 8006cae:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006cb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006cbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cc0:	2218      	movs	r2, #24
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fe71 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8006cca:	233f      	movs	r3, #63	; 0x3f
 8006ccc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8006cd0:	2388      	movs	r3, #136	; 0x88
 8006cd2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006cd6:	f107 0310 	add.w	r3, r7, #16
 8006cda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006cde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ce2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006ce6:	f107 030f 	add.w	r3, r7, #15
 8006cea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006cf4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f001 f8e0 	bl	8007ec0 <hci_send_req>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	da01      	bge.n	8006d0a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8006d06:	23ff      	movs	r3, #255	; 0xff
 8006d08:	e004      	b.n	8006d14 <aci_gap_pass_key_resp+0xc4>
  return status;
 8006d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006d12:	781b      	ldrb	r3, [r3, #0]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006d1e:	b590      	push	{r4, r7, lr}
 8006d20:	b0cd      	sub	sp, #308	; 0x134
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	4604      	mov	r4, r0
 8006d26:	4608      	mov	r0, r1
 8006d28:	4611      	mov	r1, r2
 8006d2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d2e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d38:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d44:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006d48:	4602      	mov	r2, r0
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d50:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006d54:	460a      	mov	r2, r1
 8006d56:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006d58:	f107 0310 	add.w	r3, r7, #16
 8006d5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006d60:	f107 0308 	add.w	r3, r7, #8
 8006d64:	2207      	movs	r2, #7
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fe1f 	bl	80079ac <Osal_MemSet>
  int index_input = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d78:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d7c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006d80:	7812      	ldrb	r2, [r2, #0]
 8006d82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d88:	3301      	adds	r3, #1
 8006d8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d96:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006d9a:	7812      	ldrb	r2, [r2, #0]
 8006d9c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006da2:	3301      	adds	r3, #1
 8006da4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006db0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006db4:	7812      	ldrb	r2, [r2, #0]
 8006db6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006db8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006dc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dc6:	2218      	movs	r2, #24
 8006dc8:	2100      	movs	r1, #0
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fdee 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8006dd0:	233f      	movs	r3, #63	; 0x3f
 8006dd2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006dd6:	238a      	movs	r3, #138	; 0x8a
 8006dd8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006ddc:	f107 0310 	add.w	r3, r7, #16
 8006de0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006de4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006de8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006dec:	f107 0308 	add.w	r3, r7, #8
 8006df0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006df4:	2307      	movs	r3, #7
 8006df6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006dfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f001 f85d 	bl	8007ec0 <hci_send_req>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	da01      	bge.n	8006e10 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006e0c:	23ff      	movs	r3, #255	; 0xff
 8006e0e:	e02e      	b.n	8006e6e <aci_gap_init+0x150>
  if ( resp.Status )
 8006e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e14:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <aci_gap_init+0x10c>
    return resp.Status;
 8006e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	e021      	b.n	8006e6e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006e32:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e48:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006e4c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006e56:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006e60:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006e6a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd90      	pop	{r4, r7, pc}

08006e78 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b0cc      	sub	sp, #304	; 0x130
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4602      	mov	r2, r0
 8006e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e88:	6019      	str	r1, [r3, #0]
 8006e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006e92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006e94:	f107 0310 	add.w	r3, r7, #16
 8006e98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006eb6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006eba:	7812      	ldrb	r2, [r2, #0]
 8006ebc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ecc:	1c58      	adds	r0, r3, #1
 8006ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006ed6:	781a      	ldrb	r2, [r3, #0]
 8006ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee0:	6819      	ldr	r1, [r3, #0]
 8006ee2:	f000 fd53 	bl	800798c <Osal_MemCpy>
  index_input += AdvDataLen;
 8006ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eea:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006efa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006efe:	2218      	movs	r2, #24
 8006f00:	2100      	movs	r1, #0
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 fd52 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f08:	233f      	movs	r3, #63	; 0x3f
 8006f0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006f0e:	238e      	movs	r3, #142	; 0x8e
 8006f10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006f14:	f107 0310 	add.w	r3, r7, #16
 8006f18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006f1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006f24:	f107 030f 	add.w	r3, r7, #15
 8006f28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f36:	2100      	movs	r1, #0
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 ffc1 	bl	8007ec0 <hci_send_req>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da01      	bge.n	8006f48 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006f44:	23ff      	movs	r3, #255	; 0xff
 8006f46:	e004      	b.n	8006f52 <aci_gap_update_adv_data+0xda>
  return status;
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f50:	781b      	ldrb	r3, [r3, #0]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f66:	f107 0308 	add.w	r3, r7, #8
 8006f6a:	2218      	movs	r2, #24
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fd1c 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f74:	233f      	movs	r3, #63	; 0x3f
 8006f76:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006f78:	2392      	movs	r3, #146	; 0x92
 8006f7a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006f7c:	1dfb      	adds	r3, r7, #7
 8006f7e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006f80:	2301      	movs	r3, #1
 8006f82:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f84:	f107 0308 	add.w	r3, r7, #8
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 ff98 	bl	8007ec0 <hci_send_req>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	da01      	bge.n	8006f9a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006f96:	23ff      	movs	r3, #255	; 0xff
 8006f98:	e000      	b.n	8006f9c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3720      	adds	r7, #32
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b0cc      	sub	sp, #304	; 0x130
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4602      	mov	r2, r0
 8006fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006fb4:	801a      	strh	r2, [r3, #0]
 8006fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fba:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006fbe:	460a      	mov	r2, r1
 8006fc0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006fc2:	f107 0310 	add.w	r3, r7, #16
 8006fc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fe4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006fe8:	8812      	ldrh	r2, [r2, #0]
 8006fea:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006fec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ff0:	3302      	adds	r3, #2
 8006ff2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ffe:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007002:	7812      	ldrb	r2, [r2, #0]
 8007004:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007006:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800700a:	3301      	adds	r3, #1
 800700c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007010:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007014:	2218      	movs	r2, #24
 8007016:	2100      	movs	r1, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f000 fcc7 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800701e:	233f      	movs	r3, #63	; 0x3f
 8007020:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007024:	23a5      	movs	r3, #165	; 0xa5
 8007026:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800702a:	f107 0310 	add.w	r3, r7, #16
 800702e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007032:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007036:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800703a:	f107 030f 	add.w	r3, r7, #15
 800703e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007042:	2301      	movs	r3, #1
 8007044:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007048:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800704c:	2100      	movs	r1, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f000 ff36 	bl	8007ec0 <hci_send_req>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	da01      	bge.n	800705e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800705a:	23ff      	movs	r3, #255	; 0xff
 800705c:	e004      	b.n	8007068 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800705e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007062:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007066:	781b      	ldrb	r3, [r3, #0]
}
 8007068:	4618      	mov	r0, r3
 800706a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b088      	sub	sp, #32
 8007076:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800707c:	f107 0308 	add.w	r3, r7, #8
 8007080:	2218      	movs	r2, #24
 8007082:	2100      	movs	r1, #0
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fc91 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800708a:	233f      	movs	r3, #63	; 0x3f
 800708c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800708e:	f240 1301 	movw	r3, #257	; 0x101
 8007092:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007094:	1dfb      	adds	r3, r7, #7
 8007096:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007098:	2301      	movs	r3, #1
 800709a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800709c:	f107 0308 	add.w	r3, r7, #8
 80070a0:	2100      	movs	r1, #0
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 ff0c 	bl	8007ec0 <hci_send_req>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da01      	bge.n	80070b2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80070ae:	23ff      	movs	r3, #255	; 0xff
 80070b0:	e000      	b.n	80070b4 <aci_gatt_init+0x42>
  return status;
 80070b2:	79fb      	ldrb	r3, [r7, #7]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3720      	adds	r7, #32
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80070bc:	b590      	push	{r4, r7, lr}
 80070be:	b0cf      	sub	sp, #316	; 0x13c
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4604      	mov	r4, r0
 80070c4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80070c8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80070cc:	6001      	str	r1, [r0, #0]
 80070ce:	4610      	mov	r0, r2
 80070d0:	4619      	mov	r1, r3
 80070d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80070d6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80070da:	4622      	mov	r2, r4
 80070dc:	701a      	strb	r2, [r3, #0]
 80070de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80070e2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80070e6:	4602      	mov	r2, r0
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80070ee:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80070f2:	460a      	mov	r2, r1
 80070f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80070f6:	f107 0310 	add.w	r3, r7, #16
 80070fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80070fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007102:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d00a      	beq.n	8007122 <aci_gatt_add_service+0x66>
 800710c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007110:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d101      	bne.n	800711e <aci_gatt_add_service+0x62>
 800711a:	2311      	movs	r3, #17
 800711c:	e002      	b.n	8007124 <aci_gatt_add_service+0x68>
 800711e:	2301      	movs	r3, #1
 8007120:	e000      	b.n	8007124 <aci_gatt_add_service+0x68>
 8007122:	2303      	movs	r3, #3
 8007124:	f107 0210 	add.w	r2, r7, #16
 8007128:	4413      	add	r3, r2
 800712a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800712e:	f107 030c 	add.w	r3, r7, #12
 8007132:	2203      	movs	r2, #3
 8007134:	2100      	movs	r1, #0
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fc38 	bl	80079ac <Osal_MemSet>
  int index_input = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007142:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007146:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800714a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800714e:	7812      	ldrb	r2, [r2, #0]
 8007150:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007152:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007156:	3301      	adds	r3, #1
 8007158:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800715c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007160:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d002      	beq.n	8007170 <aci_gatt_add_service+0xb4>
 800716a:	2b02      	cmp	r3, #2
 800716c:	d004      	beq.n	8007178 <aci_gatt_add_service+0xbc>
 800716e:	e007      	b.n	8007180 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007170:	2302      	movs	r3, #2
 8007172:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007176:	e005      	b.n	8007184 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007178:	2310      	movs	r3, #16
 800717a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800717e:	e001      	b.n	8007184 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007180:	2397      	movs	r3, #151	; 0x97
 8007182:	e06c      	b.n	800725e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007184:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007188:	1c58      	adds	r0, r3, #1
 800718a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800718e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007192:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007196:	6819      	ldr	r1, [r3, #0]
 8007198:	f000 fbf8 	bl	800798c <Osal_MemCpy>
    index_input += size;
 800719c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80071a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80071a4:	4413      	add	r3, r2
 80071a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80071aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80071b2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80071b6:	7812      	ldrb	r2, [r2, #0]
 80071b8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80071ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071be:	3301      	adds	r3, #1
 80071c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80071c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80071cc:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80071d0:	7812      	ldrb	r2, [r2, #0]
 80071d2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80071d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071d8:	3301      	adds	r3, #1
 80071da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071e2:	2218      	movs	r2, #24
 80071e4:	2100      	movs	r1, #0
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 fbe0 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 80071ec:	233f      	movs	r3, #63	; 0x3f
 80071ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80071f2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80071f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80071fa:	f107 0310 	add.w	r3, r7, #16
 80071fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007202:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007206:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800720a:	f107 030c 	add.w	r3, r7, #12
 800720e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007212:	2303      	movs	r3, #3
 8007214:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007218:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800721c:	2100      	movs	r1, #0
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fe4e 	bl	8007ec0 <hci_send_req>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	da01      	bge.n	800722e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800722a:	23ff      	movs	r3, #255	; 0xff
 800722c:	e017      	b.n	800725e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800722e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800723c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	e00a      	b.n	800725e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007248:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800724c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007250:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007254:	b29a      	uxth	r2, r3
 8007256:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800725a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007264:	46bd      	mov	sp, r7
 8007266:	bd90      	pop	{r4, r7, pc}

08007268 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007268:	b590      	push	{r4, r7, lr}
 800726a:	b0d1      	sub	sp, #324	; 0x144
 800726c:	af00      	add	r7, sp, #0
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007276:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800727a:	600a      	str	r2, [r1, #0]
 800727c:	4619      	mov	r1, r3
 800727e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007282:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007286:	4622      	mov	r2, r4
 8007288:	801a      	strh	r2, [r3, #0]
 800728a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800728e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007292:	4602      	mov	r2, r0
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800729a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800729e:	460a      	mov	r2, r1
 80072a0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80072a2:	f107 0318 	add.w	r3, r7, #24
 80072a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80072aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80072ae:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d00a      	beq.n	80072ce <aci_gatt_add_char+0x66>
 80072b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80072bc:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d101      	bne.n	80072ca <aci_gatt_add_char+0x62>
 80072c6:	2313      	movs	r3, #19
 80072c8:	e002      	b.n	80072d0 <aci_gatt_add_char+0x68>
 80072ca:	2303      	movs	r3, #3
 80072cc:	e000      	b.n	80072d0 <aci_gatt_add_char+0x68>
 80072ce:	2305      	movs	r3, #5
 80072d0:	f107 0218 	add.w	r2, r7, #24
 80072d4:	4413      	add	r3, r2
 80072d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80072da:	f107 0314 	add.w	r3, r7, #20
 80072de:	2203      	movs	r2, #3
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fb62 	bl	80079ac <Osal_MemSet>
  int index_input = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80072ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80072f2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80072f6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80072fa:	8812      	ldrh	r2, [r2, #0]
 80072fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80072fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007302:	3302      	adds	r3, #2
 8007304:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007308:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800730c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007310:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007314:	7812      	ldrb	r2, [r2, #0]
 8007316:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007318:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800731c:	3301      	adds	r3, #1
 800731e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007322:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007326:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d002      	beq.n	8007336 <aci_gatt_add_char+0xce>
 8007330:	2b02      	cmp	r3, #2
 8007332:	d004      	beq.n	800733e <aci_gatt_add_char+0xd6>
 8007334:	e007      	b.n	8007346 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007336:	2302      	movs	r3, #2
 8007338:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800733c:	e005      	b.n	800734a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800733e:	2310      	movs	r3, #16
 8007340:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007344:	e001      	b.n	800734a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007346:	2397      	movs	r3, #151	; 0x97
 8007348:	e091      	b.n	800746e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800734a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800734e:	1cd8      	adds	r0, r3, #3
 8007350:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007354:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007358:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800735c:	6819      	ldr	r1, [r3, #0]
 800735e:	f000 fb15 	bl	800798c <Osal_MemCpy>
    index_input += size;
 8007362:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007366:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800736a:	4413      	add	r3, r2
 800736c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007370:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007374:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007378:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800737c:	8812      	ldrh	r2, [r2, #0]
 800737e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007380:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007384:	3302      	adds	r3, #2
 8007386:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800738a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800738e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007392:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007394:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007398:	3301      	adds	r3, #1
 800739a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800739e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073a2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80073a6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80073a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073ac:	3301      	adds	r3, #1
 80073ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80073b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073b6:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80073ba:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80073bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073c0:	3301      	adds	r3, #1
 80073c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80073c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073ca:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80073ce:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80073d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073d4:	3301      	adds	r3, #1
 80073d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80073da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073de:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80073e2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80073e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073e8:	3301      	adds	r3, #1
 80073ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80073f2:	2218      	movs	r2, #24
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fad8 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 80073fc:	233f      	movs	r3, #63	; 0x3f
 80073fe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007402:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007406:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800740a:	f107 0318 	add.w	r3, r7, #24
 800740e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007412:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007416:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800741a:	f107 0314 	add.w	r3, r7, #20
 800741e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007422:	2303      	movs	r3, #3
 8007424:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007428:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800742c:	2100      	movs	r1, #0
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fd46 	bl	8007ec0 <hci_send_req>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	da01      	bge.n	800743e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800743a:	23ff      	movs	r3, #255	; 0xff
 800743c:	e017      	b.n	800746e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800743e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800744c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	e00a      	b.n	800746e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007458:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800745c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007460:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007464:	b29a      	uxth	r2, r3
 8007466:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800746a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007474:	46bd      	mov	sp, r7
 8007476:	bd90      	pop	{r4, r7, pc}

08007478 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007478:	b5b0      	push	{r4, r5, r7, lr}
 800747a:	b0cc      	sub	sp, #304	; 0x130
 800747c:	af00      	add	r7, sp, #0
 800747e:	4605      	mov	r5, r0
 8007480:	460c      	mov	r4, r1
 8007482:	4610      	mov	r0, r2
 8007484:	4619      	mov	r1, r3
 8007486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800748e:	462a      	mov	r2, r5
 8007490:	801a      	strh	r2, [r3, #0]
 8007492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007496:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800749a:	4622      	mov	r2, r4
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80074a6:	4602      	mov	r2, r0
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ae:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80074b2:	460a      	mov	r2, r1
 80074b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80074b6:	f107 0310 	add.w	r3, r7, #16
 80074ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80074be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80074d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074d8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80074dc:	8812      	ldrh	r2, [r2, #0]
 80074de:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80074e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074e4:	3302      	adds	r3, #2
 80074e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80074ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074f2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80074f6:	8812      	ldrh	r2, [r2, #0]
 80074f8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80074fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074fe:	3302      	adds	r3, #2
 8007500:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007508:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800750c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007510:	7812      	ldrb	r2, [r2, #0]
 8007512:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007514:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007518:	3301      	adds	r3, #1
 800751a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800751e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007522:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007526:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800752a:	7812      	ldrb	r2, [r2, #0]
 800752c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800752e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007532:	3301      	adds	r3, #1
 8007534:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753c:	1d98      	adds	r0, r3, #6
 800753e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007542:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800754e:	f000 fa1d 	bl	800798c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007556:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007560:	4413      	add	r3, r2
 8007562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007566:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800756a:	2218      	movs	r2, #24
 800756c:	2100      	movs	r1, #0
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fa1c 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8007574:	233f      	movs	r3, #63	; 0x3f
 8007576:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800757a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800757e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007582:	f107 0310 	add.w	r3, r7, #16
 8007586:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800758a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800758e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007592:	f107 030f 	add.w	r3, r7, #15
 8007596:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800759a:	2301      	movs	r3, #1
 800759c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075a4:	2100      	movs	r1, #0
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fc8a 	bl	8007ec0 <hci_send_req>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da01      	bge.n	80075b6 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80075b2:	23ff      	movs	r3, #255	; 0xff
 80075b4:	e004      	b.n	80075c0 <aci_gatt_update_char_value+0x148>
  return status;
 80075b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80075be:	781b      	ldrb	r3, [r3, #0]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bdb0      	pop	{r4, r5, r7, pc}

080075ca <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b0cc      	sub	sp, #304	; 0x130
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80075e2:	4602      	mov	r2, r0
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80075ee:	460a      	mov	r2, r1
 80075f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80075f2:	f107 0310 	add.w	r3, r7, #16
 80075f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80075fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800760c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007610:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007614:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007618:	7812      	ldrb	r2, [r2, #0]
 800761a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800761c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007620:	3301      	adds	r3, #1
 8007622:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800762a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800762e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007632:	7812      	ldrb	r2, [r2, #0]
 8007634:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007636:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800763a:	3301      	adds	r3, #1
 800763c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007644:	1c98      	adds	r0, r3, #2
 8007646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800764e:	781a      	ldrb	r2, [r3, #0]
 8007650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007658:	6819      	ldr	r1, [r3, #0]
 800765a:	f000 f997 	bl	800798c <Osal_MemCpy>
  index_input += Length;
 800765e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007662:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800766c:	4413      	add	r3, r2
 800766e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007672:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007676:	2218      	movs	r2, #24
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f996 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8007680:	233f      	movs	r3, #63	; 0x3f
 8007682:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007686:	230c      	movs	r3, #12
 8007688:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800768c:	f107 0310 	add.w	r3, r7, #16
 8007690:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007698:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800769c:	f107 030f 	add.w	r3, r7, #15
 80076a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80076a4:	2301      	movs	r3, #1
 80076a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076ae:	2100      	movs	r1, #0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 fc05 	bl	8007ec0 <hci_send_req>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	da01      	bge.n	80076c0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80076bc:	23ff      	movs	r3, #255	; 0xff
 80076be:	e004      	b.n	80076ca <aci_hal_write_config_data+0x100>
  return status;
 80076c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80076c8:	781b      	ldrb	r3, [r3, #0]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b0cc      	sub	sp, #304	; 0x130
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4602      	mov	r2, r0
 80076dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80076ee:	460a      	mov	r2, r1
 80076f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80076f2:	f107 0310 	add.w	r3, r7, #16
 80076f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80076fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007702:	2200      	movs	r2, #0
 8007704:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800770c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007710:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007714:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007718:	7812      	ldrb	r2, [r2, #0]
 800771a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800771c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007720:	3301      	adds	r3, #1
 8007722:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800772e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007732:	7812      	ldrb	r2, [r2, #0]
 8007734:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800773a:	3301      	adds	r3, #1
 800773c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007740:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007744:	2218      	movs	r2, #24
 8007746:	2100      	movs	r1, #0
 8007748:	4618      	mov	r0, r3
 800774a:	f000 f92f 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800774e:	233f      	movs	r3, #63	; 0x3f
 8007750:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007754:	230f      	movs	r3, #15
 8007756:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800775a:	f107 0310 	add.w	r3, r7, #16
 800775e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007762:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007766:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800776a:	f107 030f 	add.w	r3, r7, #15
 800776e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007772:	2301      	movs	r3, #1
 8007774:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007778:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800777c:	2100      	movs	r1, #0
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fb9e 	bl	8007ec0 <hci_send_req>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	da01      	bge.n	800778e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800778a:	23ff      	movs	r3, #255	; 0xff
 800778c:	e004      	b.n	8007798 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800778e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007792:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007796:	781b      	ldrb	r3, [r3, #0]
}
 8007798:	4618      	mov	r0, r3
 800779a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b0cc      	sub	sp, #304	; 0x130
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	4602      	mov	r2, r0
 80077aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80077b2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80077b4:	f107 0310 	add.w	r3, r7, #16
 80077b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80077bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80077c4:	2200      	movs	r2, #0
 80077c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80077ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077d6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80077da:	8812      	ldrh	r2, [r2, #0]
 80077dc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80077de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077e2:	3302      	adds	r3, #2
 80077e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077ec:	2218      	movs	r2, #24
 80077ee:	2100      	movs	r1, #0
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 f8db 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 80077f6:	233f      	movs	r3, #63	; 0x3f
 80077f8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80077fc:	2318      	movs	r3, #24
 80077fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007802:	f107 0310 	add.w	r3, r7, #16
 8007806:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800780a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800780e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007812:	f107 030f 	add.w	r3, r7, #15
 8007816:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800781a:	2301      	movs	r3, #1
 800781c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007820:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007824:	2100      	movs	r1, #0
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fb4a 	bl	8007ec0 <hci_send_req>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	da01      	bge.n	8007836 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007832:	23ff      	movs	r3, #255	; 0xff
 8007834:	e004      	b.n	8007840 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800783e:	781b      	ldrb	r3, [r3, #0]
}
 8007840:	4618      	mov	r0, r3
 8007842:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b088      	sub	sp, #32
 800784e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007854:	f107 0308 	add.w	r3, r7, #8
 8007858:	2218      	movs	r2, #24
 800785a:	2100      	movs	r1, #0
 800785c:	4618      	mov	r0, r3
 800785e:	f000 f8a5 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x03;
 8007862:	2303      	movs	r3, #3
 8007864:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007866:	2303      	movs	r3, #3
 8007868:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800786a:	1dfb      	adds	r3, r7, #7
 800786c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800786e:	2301      	movs	r3, #1
 8007870:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007872:	f107 0308 	add.w	r3, r7, #8
 8007876:	2100      	movs	r1, #0
 8007878:	4618      	mov	r0, r3
 800787a:	f000 fb21 	bl	8007ec0 <hci_send_req>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	da01      	bge.n	8007888 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007884:	23ff      	movs	r3, #255	; 0xff
 8007886:	e000      	b.n	800788a <hci_reset+0x40>
  return status;
 8007888:	79fb      	ldrb	r3, [r7, #7]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007892:	b590      	push	{r4, r7, lr}
 8007894:	b0cd      	sub	sp, #308	; 0x134
 8007896:	af00      	add	r7, sp, #0
 8007898:	4604      	mov	r4, r0
 800789a:	4608      	mov	r0, r1
 800789c:	4611      	mov	r1, r2
 800789e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80078a6:	4622      	mov	r2, r4
 80078a8:	701a      	strb	r2, [r3, #0]
 80078aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80078b2:	4602      	mov	r2, r0
 80078b4:	701a      	strb	r2, [r3, #0]
 80078b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ba:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80078be:	460a      	mov	r2, r1
 80078c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80078c2:	f107 0310 	add.w	r3, r7, #16
 80078c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80078ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80078d2:	2200      	movs	r2, #0
 80078d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80078dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078e4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80078e8:	7812      	ldrb	r2, [r2, #0]
 80078ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80078ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078f0:	3301      	adds	r3, #1
 80078f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80078f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078fe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007902:	7812      	ldrb	r2, [r2, #0]
 8007904:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800790a:	3301      	adds	r3, #1
 800790c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007914:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007918:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800791c:	7812      	ldrb	r2, [r2, #0]
 800791e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007920:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007924:	3301      	adds	r3, #1
 8007926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800792a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800792e:	2218      	movs	r2, #24
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f000 f83a 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x08;
 8007938:	2308      	movs	r3, #8
 800793a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800793e:	2331      	movs	r3, #49	; 0x31
 8007940:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007944:	f107 0310 	add.w	r3, r7, #16
 8007948:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800794c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007950:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007954:	f107 030f 	add.w	r3, r7, #15
 8007958:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800795c:	2301      	movs	r3, #1
 800795e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007962:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007966:	2100      	movs	r1, #0
 8007968:	4618      	mov	r0, r3
 800796a:	f000 faa9 	bl	8007ec0 <hci_send_req>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	da01      	bge.n	8007978 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007974:	23ff      	movs	r3, #255	; 0xff
 8007976:	e004      	b.n	8007982 <hci_le_set_default_phy+0xf0>
  return status;
 8007978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007980:	781b      	ldrb	r3, [r3, #0]
}
 8007982:	4618      	mov	r0, r3
 8007984:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007988:	46bd      	mov	sp, r7
 800798a:	bd90      	pop	{r4, r7, pc}

0800798c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f002 f9f1 	bl	8009d84 <memcpy>
 80079a2:	4603      	mov	r3, r0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f002 f9b5 	bl	8009d2c <memset>
 80079c2:	4603      	mov	r3, r0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0
  return;
 80079d0:	bf00      	nop
}
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80079da:	b480      	push	{r7}
 80079dc:	af00      	add	r7, sp, #0
  return;
 80079de:	bf00      	nop
}
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0
  return;
 80079ec:	bf00      	nop
}
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80079f6:	b480      	push	{r7}
 80079f8:	af00      	add	r7, sp, #0
  return;
 80079fa:	bf00      	nop
}
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007a04:	b480      	push	{r7}
 8007a06:	af00      	add	r7, sp, #0
  return;
 8007a08:	bf00      	nop
}
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007a12:	b480      	push	{r7}
 8007a14:	af00      	add	r7, sp, #0
  return;
 8007a16:	bf00      	nop
}
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
  return;
 8007a24:	bf00      	nop
}
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007a2e:	b480      	push	{r7}
 8007a30:	af00      	add	r7, sp, #0
  return;
 8007a32:	bf00      	nop
}
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  return;
 8007a40:	bf00      	nop
}
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	af00      	add	r7, sp, #0
  return;
 8007a4e:	bf00      	nop
}
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  return;
 8007a5c:	bf00      	nop
}
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007a66:	b480      	push	{r7}
 8007a68:	af00      	add	r7, sp, #0
  return;
 8007a6a:	bf00      	nop
}
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
  return;
 8007a78:	bf00      	nop
}
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007a82:	b480      	push	{r7}
 8007a84:	af00      	add	r7, sp, #0
  return;
 8007a86:	bf00      	nop
}
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  return;
 8007a94:	bf00      	nop
}
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	af00      	add	r7, sp, #0
  return;
 8007aa2:	bf00      	nop
}
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
  return;
 8007ab0:	bf00      	nop
}
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
	...

08007abc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <SVCCTL_Init+0x18>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007ac6:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <SVCCTL_Init+0x1c>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007acc:	f000 f806 	bl	8007adc <SVCCTL_SvcInit>

  return;
 8007ad0:	bf00      	nop
}
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	2000002c 	.word	0x2000002c
 8007ad8:	2000004c 	.word	0x2000004c

08007adc <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  BAS_Init();
 8007ae0:	f7ff ff74 	bl	80079cc <BAS_Init>

  BLS_Init();
 8007ae4:	f7ff ff79 	bl	80079da <BLS_Init>

  CRS_STM_Init();
 8007ae8:	f7ff ff7e 	bl	80079e8 <CRS_STM_Init>

  DIS_Init();
 8007aec:	f7ff ff83 	bl	80079f6 <DIS_Init>

  EDS_STM_Init();
 8007af0:	f7ff ff88 	bl	8007a04 <EDS_STM_Init>

  HIDS_Init();
 8007af4:	f7ff ff8d 	bl	8007a12 <HIDS_Init>

  HRS_Init();
 8007af8:	f7ff ff92 	bl	8007a20 <HRS_Init>

  HTS_Init();
 8007afc:	f7ff ff97 	bl	8007a2e <HTS_Init>

  IAS_Init();
 8007b00:	f7ff ff9c 	bl	8007a3c <IAS_Init>

  LLS_Init();
 8007b04:	f7ff ffa1 	bl	8007a4a <LLS_Init>

  TPS_Init();
 8007b08:	f7ff ffa6 	bl	8007a58 <TPS_Init>

  MOTENV_STM_Init();
 8007b0c:	f7ff ffab 	bl	8007a66 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007b10:	f7ff ffb0 	bl	8007a74 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007b14:	f7ff ffb5 	bl	8007a82 <ZDD_STM_Init>

  OTAS_STM_Init();
 8007b18:	f7ff ffba 	bl	8007a90 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007b1c:	f7ff ffc6 	bl	8007aac <BVOPUS_STM_Init>

  MESH_Init();
 8007b20:	f7ff ffbd 	bl	8007a9e <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007b24:	f001 fb50 	bl	80091c8 <SVCCTL_InitCustomSvc>
  
  return;
 8007b28:	bf00      	nop
}
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007b34:	4b09      	ldr	r3, [pc, #36]	; (8007b5c <SVCCTL_RegisterSvcHandler+0x30>)
 8007b36:	7f1b      	ldrb	r3, [r3, #28]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4a08      	ldr	r2, [pc, #32]	; (8007b5c <SVCCTL_RegisterSvcHandler+0x30>)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007b42:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <SVCCTL_RegisterSvcHandler+0x30>)
 8007b44:	7f1b      	ldrb	r3, [r3, #28]
 8007b46:	3301      	adds	r3, #1
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <SVCCTL_RegisterSvcHandler+0x30>)
 8007b4c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007b4e:	bf00      	nop
}
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	2000002c 	.word	0x2000002c

08007b60 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2bff      	cmp	r3, #255	; 0xff
 8007b78:	d125      	bne.n	8007bc6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	3302      	adds	r3, #2
 8007b7e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b8e:	d118      	bne.n	8007bc2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007b90:	2300      	movs	r3, #0
 8007b92:	757b      	strb	r3, [r7, #21]
 8007b94:	e00d      	b.n	8007bb2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007b96:	7d7b      	ldrb	r3, [r7, #21]
 8007b98:	4a1a      	ldr	r2, [pc, #104]	; (8007c04 <SVCCTL_UserEvtRx+0xa4>)
 8007b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d108      	bne.n	8007bbe <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007bac:	7d7b      	ldrb	r3, [r7, #21]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	757b      	strb	r3, [r7, #21]
 8007bb2:	4b14      	ldr	r3, [pc, #80]	; (8007c04 <SVCCTL_UserEvtRx+0xa4>)
 8007bb4:	7f1b      	ldrb	r3, [r3, #28]
 8007bb6:	7d7a      	ldrb	r2, [r7, #21]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d3ec      	bcc.n	8007b96 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007bbc:	e002      	b.n	8007bc4 <SVCCTL_UserEvtRx+0x64>
              break;
 8007bbe:	bf00      	nop
          break;
 8007bc0:	e000      	b.n	8007bc4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007bc2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007bc4:	e000      	b.n	8007bc8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007bc6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d00f      	beq.n	8007bee <SVCCTL_UserEvtRx+0x8e>
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	dc10      	bgt.n	8007bf4 <SVCCTL_UserEvtRx+0x94>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <SVCCTL_UserEvtRx+0x7c>
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d006      	beq.n	8007be8 <SVCCTL_UserEvtRx+0x88>
 8007bda:	e00b      	b.n	8007bf4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 ff8f 	bl	8008b00 <SVCCTL_App_Notification>
 8007be2:	4603      	mov	r3, r0
 8007be4:	75bb      	strb	r3, [r7, #22]
      break;
 8007be6:	e008      	b.n	8007bfa <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007be8:	2301      	movs	r3, #1
 8007bea:	75bb      	strb	r3, [r7, #22]
      break;
 8007bec:	e005      	b.n	8007bfa <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	75bb      	strb	r3, [r7, #22]
      break;
 8007bf2:	e002      	b.n	8007bfa <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	75bb      	strb	r3, [r7, #22]
      break;
 8007bf8:	bf00      	nop
  }

  return (return_status);
 8007bfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	2000002c 	.word	0x2000002c

08007c08 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007c10:	f107 030c 	add.w	r3, r7, #12
 8007c14:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	212e      	movs	r1, #46	; 0x2e
 8007c20:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007c24:	f000 fae8 	bl	80081f8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	330b      	adds	r3, #11
 8007c2c:	78db      	ldrb	r3, [r3, #3]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3720      	adds	r7, #32
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b088      	sub	sp, #32
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007c3e:	f107 030c 	add.w	r3, r7, #12
 8007c42:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	210f      	movs	r1, #15
 8007c4e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007c52:	f000 fad1 	bl	80081f8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	330b      	adds	r3, #11
 8007c5a:	78db      	ldrb	r3, [r3, #3]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3720      	adds	r7, #32
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007c6c:	f107 030c 	add.w	r3, r7, #12
 8007c70:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	2110      	movs	r1, #16
 8007c78:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8007c7c:	f000 fabc 	bl	80081f8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	330b      	adds	r3, #11
 8007c84:	78db      	ldrb	r3, [r3, #3]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3720      	adds	r7, #32
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007c90:	b480      	push	{r7}
 8007c92:	b08b      	sub	sp, #44	; 0x2c
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007cb8:	4b4a      	ldr	r3, [pc, #296]	; (8007de4 <SHCI_GetWirelessFwInfo+0x154>)
 8007cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007cc0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007cca:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a44      	ldr	r2, [pc, #272]	; (8007de8 <SHCI_GetWirelessFwInfo+0x158>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d10f      	bne.n	8007cfc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	617b      	str	r3, [r7, #20]
 8007cfa:	e01a      	b.n	8007d32 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007d04:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007d08:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	0e1b      	lsrs	r3, r3, #24
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	0c1b      	lsrs	r3, r3, #16
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	0a1b      	lsrs	r3, r3, #8
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	091b      	lsrs	r3, r3, #4
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	f003 030f 	and.w	r3, r3, #15
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 030f 	and.w	r3, r3, #15
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	0e1b      	lsrs	r3, r3, #24
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	0c1b      	lsrs	r3, r3, #16
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	0e1b      	lsrs	r3, r3, #24
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	0c1b      	lsrs	r3, r3, #16
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	0a1b      	lsrs	r3, r3, #8
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	0e1b      	lsrs	r3, r3, #24
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	0c1b      	lsrs	r3, r3, #16
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	372c      	adds	r7, #44	; 0x2c
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	58004000 	.word	0x58004000
 8007de8:	a94656b9 	.word	0xa94656b9

08007dec <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	4a08      	ldr	r2, [pc, #32]	; (8007e1c <hci_init+0x30>)
 8007dfc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007dfe:	4a08      	ldr	r2, [pc, #32]	; (8007e20 <hci_init+0x34>)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007e04:	4806      	ldr	r0, [pc, #24]	; (8007e20 <hci_init+0x34>)
 8007e06:	f000 f979 	bl	80080fc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 f8da 	bl	8007fc8 <TlInit>

  return;
 8007e14:	bf00      	nop
}
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20000280 	.word	0x20000280
 8007e20:	20000258 	.word	0x20000258

08007e24 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007e2a:	4822      	ldr	r0, [pc, #136]	; (8007eb4 <hci_user_evt_proc+0x90>)
 8007e2c:	f000 fd32 	bl	8008894 <LST_is_empty>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d12b      	bne.n	8007e8e <hci_user_evt_proc+0x6a>
 8007e36:	4b20      	ldr	r3, [pc, #128]	; (8007eb8 <hci_user_evt_proc+0x94>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d027      	beq.n	8007e8e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007e3e:	f107 030c 	add.w	r3, r7, #12
 8007e42:	4619      	mov	r1, r3
 8007e44:	481b      	ldr	r0, [pc, #108]	; (8007eb4 <hci_user_evt_proc+0x90>)
 8007e46:	f000 fdb4 	bl	80089b2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007e4a:	4b1c      	ldr	r3, [pc, #112]	; (8007ebc <hci_user_evt_proc+0x98>)
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00c      	beq.n	8007e6c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007e56:	2301      	movs	r3, #1
 8007e58:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007e5a:	4b18      	ldr	r3, [pc, #96]	; (8007ebc <hci_user_evt_proc+0x98>)
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	1d3a      	adds	r2, r7, #4
 8007e60:	4610      	mov	r0, r2
 8007e62:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007e64:	793a      	ldrb	r2, [r7, #4]
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <hci_user_evt_proc+0x94>)
 8007e68:	701a      	strb	r2, [r3, #0]
 8007e6a:	e002      	b.n	8007e72 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007e6c:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <hci_user_evt_proc+0x94>)
 8007e6e:	2201      	movs	r2, #1
 8007e70:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007e72:	4b11      	ldr	r3, [pc, #68]	; (8007eb8 <hci_user_evt_proc+0x94>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d004      	beq.n	8007e84 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 fc0d 	bl	800869c <TL_MM_EvtDone>
 8007e82:	e004      	b.n	8007e8e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4619      	mov	r1, r3
 8007e88:	480a      	ldr	r0, [pc, #40]	; (8007eb4 <hci_user_evt_proc+0x90>)
 8007e8a:	f000 fd25 	bl	80088d8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007e8e:	4809      	ldr	r0, [pc, #36]	; (8007eb4 <hci_user_evt_proc+0x90>)
 8007e90:	f000 fd00 	bl	8008894 <LST_is_empty>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d107      	bne.n	8007eaa <hci_user_evt_proc+0x86>
 8007e9a:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <hci_user_evt_proc+0x94>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007ea2:	4804      	ldr	r0, [pc, #16]	; (8007eb4 <hci_user_evt_proc+0x90>)
 8007ea4:	f001 f844 	bl	8008f30 <hci_notify_asynch_evt>
  }


  return;
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop
}
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20000054 	.word	0x20000054
 8007eb8:	20000060 	.word	0x20000060
 8007ebc:	20000258 	.word	0x20000258

08007ec0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007ecc:	2000      	movs	r0, #0
 8007ece:	f000 f8d1 	bl	8008074 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	885b      	ldrh	r3, [r3, #2]
 8007eda:	b21b      	sxth	r3, r3
 8007edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ee0:	b21a      	sxth	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	029b      	lsls	r3, r3, #10
 8007ee8:	b21b      	sxth	r3, r3
 8007eea:	4313      	orrs	r3, r2
 8007eec:	b21b      	sxth	r3, r3
 8007eee:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8007ef0:	4b33      	ldr	r3, [pc, #204]	; (8007fc0 <hci_send_req+0x100>)
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	b2d9      	uxtb	r1, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	8bbb      	ldrh	r3, [r7, #28]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 f890 	bl	8008028 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007f08:	e04e      	b.n	8007fa8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007f0a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007f0e:	f001 f826 	bl	8008f5e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007f12:	e043      	b.n	8007f9c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007f14:	f107 030c 	add.w	r3, r7, #12
 8007f18:	4619      	mov	r1, r3
 8007f1a:	482a      	ldr	r0, [pc, #168]	; (8007fc4 <hci_send_req+0x104>)
 8007f1c:	f000 fd49 	bl	80089b2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	7a5b      	ldrb	r3, [r3, #9]
 8007f24:	2b0f      	cmp	r3, #15
 8007f26:	d114      	bne.n	8007f52 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	330b      	adds	r3, #11
 8007f2c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	885b      	ldrh	r3, [r3, #2]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	8bba      	ldrh	r2, [r7, #28]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d104      	bne.n	8007f44 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	7812      	ldrb	r2, [r2, #0]
 8007f42:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	785b      	ldrb	r3, [r3, #1]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d027      	beq.n	8007f9c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	77fb      	strb	r3, [r7, #31]
 8007f50:	e024      	b.n	8007f9c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	330b      	adds	r3, #11
 8007f56:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	8bba      	ldrh	r2, [r7, #28]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d114      	bne.n	8007f90 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	7a9b      	ldrb	r3, [r3, #10]
 8007f6a:	3b03      	subs	r3, #3
 8007f6c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	695a      	ldr	r2, [r3, #20]
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	bfa8      	it	ge
 8007f78:	461a      	movge	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6918      	ldr	r0, [r3, #16]
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	1cd9      	adds	r1, r3, #3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f001 fefa 	bl	8009d84 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007f9c:	4809      	ldr	r0, [pc, #36]	; (8007fc4 <hci_send_req+0x104>)
 8007f9e:	f000 fc79 	bl	8008894 <LST_is_empty>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0b5      	beq.n	8007f14 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007fa8:	7ffb      	ldrb	r3, [r7, #31]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0ad      	beq.n	8007f0a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007fae:	2001      	movs	r0, #1
 8007fb0:	f000 f860 	bl	8008074 <NotifyCmdStatus>

  return 0;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3720      	adds	r7, #32
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000284 	.word	0x20000284
 8007fc4:	20000278 	.word	0x20000278

08007fc8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007fd0:	480f      	ldr	r0, [pc, #60]	; (8008010 <TlInit+0x48>)
 8007fd2:	f000 fc4f 	bl	8008874 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007fd6:	4a0f      	ldr	r2, [pc, #60]	; (8008014 <TlInit+0x4c>)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007fdc:	480e      	ldr	r0, [pc, #56]	; (8008018 <TlInit+0x50>)
 8007fde:	f000 fc49 	bl	8008874 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007fe2:	4b0e      	ldr	r3, [pc, #56]	; (800801c <TlInit+0x54>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007fe8:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <TlInit+0x58>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007ff4:	4b0b      	ldr	r3, [pc, #44]	; (8008024 <TlInit+0x5c>)
 8007ff6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007ff8:	4b09      	ldr	r3, [pc, #36]	; (8008020 <TlInit+0x58>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f107 0208 	add.w	r2, r7, #8
 8008000:	4610      	mov	r0, r2
 8008002:	4798      	blx	r3
  }

  return;
 8008004:	bf00      	nop
 8008006:	bf00      	nop
}
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	20000278 	.word	0x20000278
 8008014:	2000005c 	.word	0x2000005c
 8008018:	20000054 	.word	0x20000054
 800801c:	20000060 	.word	0x20000060
 8008020:	20000258 	.word	0x20000258
 8008024:	080080b5 	.word	0x080080b5

08008028 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	603a      	str	r2, [r7, #0]
 8008032:	80fb      	strh	r3, [r7, #6]
 8008034:	460b      	mov	r3, r1
 8008036:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008038:	4b0c      	ldr	r3, [pc, #48]	; (800806c <SendCmd+0x44>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	88fa      	ldrh	r2, [r7, #6]
 800803e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008042:	4b0a      	ldr	r3, [pc, #40]	; (800806c <SendCmd+0x44>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	797a      	ldrb	r2, [r7, #5]
 8008048:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800804a:	4b08      	ldr	r3, [pc, #32]	; (800806c <SendCmd+0x44>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	330c      	adds	r3, #12
 8008050:	797a      	ldrb	r2, [r7, #5]
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	4618      	mov	r0, r3
 8008056:	f001 fe95 	bl	8009d84 <memcpy>

  hciContext.io.Send(0,0);
 800805a:	4b05      	ldr	r3, [pc, #20]	; (8008070 <SendCmd+0x48>)
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2100      	movs	r1, #0
 8008060:	2000      	movs	r0, #0
 8008062:	4798      	blx	r3

  return;
 8008064:	bf00      	nop
}
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	2000005c 	.word	0x2000005c
 8008070:	20000258 	.word	0x20000258

08008074 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d108      	bne.n	8008096 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008084:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <NotifyCmdStatus+0x3c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00d      	beq.n	80080a8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800808c:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <NotifyCmdStatus+0x3c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2000      	movs	r0, #0
 8008092:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008094:	e008      	b.n	80080a8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008096:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <NotifyCmdStatus+0x3c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d004      	beq.n	80080a8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800809e:	4b04      	ldr	r3, [pc, #16]	; (80080b0 <NotifyCmdStatus+0x3c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2001      	movs	r0, #1
 80080a4:	4798      	blx	r3
  return;
 80080a6:	bf00      	nop
 80080a8:	bf00      	nop
}
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20000280 	.word	0x20000280

080080b4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	7a5b      	ldrb	r3, [r3, #9]
 80080c0:	2b0f      	cmp	r3, #15
 80080c2:	d003      	beq.n	80080cc <TlEvtReceived+0x18>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	7a5b      	ldrb	r3, [r3, #9]
 80080c8:	2b0e      	cmp	r3, #14
 80080ca:	d107      	bne.n	80080dc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80080cc:	6879      	ldr	r1, [r7, #4]
 80080ce:	4809      	ldr	r0, [pc, #36]	; (80080f4 <TlEvtReceived+0x40>)
 80080d0:	f000 fc28 	bl	8008924 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80080d4:	2000      	movs	r0, #0
 80080d6:	f000 ff37 	bl	8008f48 <hci_cmd_resp_release>
 80080da:	e006      	b.n	80080ea <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80080dc:	6879      	ldr	r1, [r7, #4]
 80080de:	4806      	ldr	r0, [pc, #24]	; (80080f8 <TlEvtReceived+0x44>)
 80080e0:	f000 fc20 	bl	8008924 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80080e4:	4804      	ldr	r0, [pc, #16]	; (80080f8 <TlEvtReceived+0x44>)
 80080e6:	f000 ff23 	bl	8008f30 <hci_notify_asynch_evt>
  }

  return;
 80080ea:	bf00      	nop
}
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20000278 	.word	0x20000278
 80080f8:	20000054 	.word	0x20000054

080080fc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a05      	ldr	r2, [pc, #20]	; (800811c <hci_register_io_bus+0x20>)
 8008108:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a04      	ldr	r2, [pc, #16]	; (8008120 <hci_register_io_bus+0x24>)
 800810e:	611a      	str	r2, [r3, #16]

  return;
 8008110:	bf00      	nop
}
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	08008415 	.word	0x08008415
 8008120:	0800847d 	.word	0x0800847d

08008124 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4a08      	ldr	r2, [pc, #32]	; (8008154 <shci_init+0x30>)
 8008134:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008136:	4a08      	ldr	r2, [pc, #32]	; (8008158 <shci_init+0x34>)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800813c:	4806      	ldr	r0, [pc, #24]	; (8008158 <shci_init+0x34>)
 800813e:	f000 f915 	bl	800836c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4618      	mov	r0, r3
 8008148:	f000 f898 	bl	800827c <TlInit>

  return;
 800814c:	bf00      	nop
}
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	200002a8 	.word	0x200002a8
 8008158:	20000288 	.word	0x20000288

0800815c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008162:	4822      	ldr	r0, [pc, #136]	; (80081ec <shci_user_evt_proc+0x90>)
 8008164:	f000 fb96 	bl	8008894 <LST_is_empty>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d12b      	bne.n	80081c6 <shci_user_evt_proc+0x6a>
 800816e:	4b20      	ldr	r3, [pc, #128]	; (80081f0 <shci_user_evt_proc+0x94>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d027      	beq.n	80081c6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008176:	f107 030c 	add.w	r3, r7, #12
 800817a:	4619      	mov	r1, r3
 800817c:	481b      	ldr	r0, [pc, #108]	; (80081ec <shci_user_evt_proc+0x90>)
 800817e:	f000 fc18 	bl	80089b2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008182:	4b1c      	ldr	r3, [pc, #112]	; (80081f4 <shci_user_evt_proc+0x98>)
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00c      	beq.n	80081a4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800818e:	2301      	movs	r3, #1
 8008190:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008192:	4b18      	ldr	r3, [pc, #96]	; (80081f4 <shci_user_evt_proc+0x98>)
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	1d3a      	adds	r2, r7, #4
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800819c:	793a      	ldrb	r2, [r7, #4]
 800819e:	4b14      	ldr	r3, [pc, #80]	; (80081f0 <shci_user_evt_proc+0x94>)
 80081a0:	701a      	strb	r2, [r3, #0]
 80081a2:	e002      	b.n	80081aa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80081a4:	4b12      	ldr	r3, [pc, #72]	; (80081f0 <shci_user_evt_proc+0x94>)
 80081a6:	2201      	movs	r2, #1
 80081a8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80081aa:	4b11      	ldr	r3, [pc, #68]	; (80081f0 <shci_user_evt_proc+0x94>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d004      	beq.n	80081bc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 fa71 	bl	800869c <TL_MM_EvtDone>
 80081ba:	e004      	b.n	80081c6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4619      	mov	r1, r3
 80081c0:	480a      	ldr	r0, [pc, #40]	; (80081ec <shci_user_evt_proc+0x90>)
 80081c2:	f000 fb89 	bl	80088d8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80081c6:	4809      	ldr	r0, [pc, #36]	; (80081ec <shci_user_evt_proc+0x90>)
 80081c8:	f000 fb64 	bl	8008894 <LST_is_empty>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d107      	bne.n	80081e2 <shci_user_evt_proc+0x86>
 80081d2:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <shci_user_evt_proc+0x94>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80081da:	4804      	ldr	r0, [pc, #16]	; (80081ec <shci_user_evt_proc+0x90>)
 80081dc:	f7f8 fb6f 	bl	80008be <shci_notify_asynch_evt>
  }


  return;
 80081e0:	bf00      	nop
 80081e2:	bf00      	nop
}
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000064 	.word	0x20000064
 80081f0:	20000074 	.word	0x20000074
 80081f4:	20000288 	.word	0x20000288

080081f8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60ba      	str	r2, [r7, #8]
 8008200:	607b      	str	r3, [r7, #4]
 8008202:	4603      	mov	r3, r0
 8008204:	81fb      	strh	r3, [r7, #14]
 8008206:	460b      	mov	r3, r1
 8008208:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800820a:	2000      	movs	r0, #0
 800820c:	f000 f868 	bl	80082e0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008210:	4b17      	ldr	r3, [pc, #92]	; (8008270 <shci_send+0x78>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	89fa      	ldrh	r2, [r7, #14]
 8008216:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800821a:	4b15      	ldr	r3, [pc, #84]	; (8008270 <shci_send+0x78>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	7b7a      	ldrb	r2, [r7, #13]
 8008220:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008222:	4b13      	ldr	r3, [pc, #76]	; (8008270 <shci_send+0x78>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	330c      	adds	r3, #12
 8008228:	7b7a      	ldrb	r2, [r7, #13]
 800822a:	68b9      	ldr	r1, [r7, #8]
 800822c:	4618      	mov	r0, r3
 800822e:	f001 fda9 	bl	8009d84 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8008232:	4b10      	ldr	r3, [pc, #64]	; (8008274 <shci_send+0x7c>)
 8008234:	2201      	movs	r2, #1
 8008236:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8008238:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <shci_send+0x80>)
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	2100      	movs	r1, #0
 800823e:	2000      	movs	r0, #0
 8008240:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008242:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008246:	f7f8 fb51 	bl	80008ec <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f103 0008 	add.w	r0, r3, #8
 8008250:	4b07      	ldr	r3, [pc, #28]	; (8008270 <shci_send+0x78>)
 8008252:	6819      	ldr	r1, [r3, #0]
 8008254:	4b06      	ldr	r3, [pc, #24]	; (8008270 <shci_send+0x78>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	789b      	ldrb	r3, [r3, #2]
 800825a:	3303      	adds	r3, #3
 800825c:	461a      	mov	r2, r3
 800825e:	f001 fd91 	bl	8009d84 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008262:	2001      	movs	r0, #1
 8008264:	f000 f83c 	bl	80082e0 <Cmd_SetStatus>

  return;
 8008268:	bf00      	nop
}
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20000070 	.word	0x20000070
 8008274:	200002ac 	.word	0x200002ac
 8008278:	20000288 	.word	0x20000288

0800827c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008284:	4a10      	ldr	r2, [pc, #64]	; (80082c8 <TlInit+0x4c>)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800828a:	4810      	ldr	r0, [pc, #64]	; (80082cc <TlInit+0x50>)
 800828c:	f000 faf2 	bl	8008874 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008290:	2001      	movs	r0, #1
 8008292:	f000 f825 	bl	80082e0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008296:	4b0e      	ldr	r3, [pc, #56]	; (80082d0 <TlInit+0x54>)
 8008298:	2201      	movs	r2, #1
 800829a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800829c:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <TlInit+0x58>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00c      	beq.n	80082be <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80082a8:	4b0b      	ldr	r3, [pc, #44]	; (80082d8 <TlInit+0x5c>)
 80082aa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80082ac:	4b0b      	ldr	r3, [pc, #44]	; (80082dc <TlInit+0x60>)
 80082ae:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80082b0:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <TlInit+0x58>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f107 020c 	add.w	r2, r7, #12
 80082b8:	4610      	mov	r0, r2
 80082ba:	4798      	blx	r3
  }

  return;
 80082bc:	bf00      	nop
 80082be:	bf00      	nop
}
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20000070 	.word	0x20000070
 80082cc:	20000064 	.word	0x20000064
 80082d0:	20000074 	.word	0x20000074
 80082d4:	20000288 	.word	0x20000288
 80082d8:	08008331 	.word	0x08008331
 80082dc:	08008349 	.word	0x08008349

080082e0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10b      	bne.n	8008308 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80082f0:	4b0d      	ldr	r3, [pc, #52]	; (8008328 <Cmd_SetStatus+0x48>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80082f8:	4b0b      	ldr	r3, [pc, #44]	; (8008328 <Cmd_SetStatus+0x48>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2000      	movs	r0, #0
 80082fe:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008300:	4b0a      	ldr	r3, [pc, #40]	; (800832c <Cmd_SetStatus+0x4c>)
 8008302:	2200      	movs	r2, #0
 8008304:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008306:	e00b      	b.n	8008320 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008308:	4b08      	ldr	r3, [pc, #32]	; (800832c <Cmd_SetStatus+0x4c>)
 800830a:	2201      	movs	r2, #1
 800830c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800830e:	4b06      	ldr	r3, [pc, #24]	; (8008328 <Cmd_SetStatus+0x48>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d004      	beq.n	8008320 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008316:	4b04      	ldr	r3, [pc, #16]	; (8008328 <Cmd_SetStatus+0x48>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2001      	movs	r0, #1
 800831c:	4798      	blx	r3
  return;
 800831e:	bf00      	nop
 8008320:	bf00      	nop
}
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	200002a8 	.word	0x200002a8
 800832c:	2000006c 	.word	0x2000006c

08008330 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008338:	2000      	movs	r0, #0
 800833a:	f7f8 facc 	bl	80008d6 <shci_cmd_resp_release>

  return;
 800833e:	bf00      	nop
}
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	4805      	ldr	r0, [pc, #20]	; (8008368 <TlUserEvtReceived+0x20>)
 8008354:	f000 fae6 	bl	8008924 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008358:	4803      	ldr	r0, [pc, #12]	; (8008368 <TlUserEvtReceived+0x20>)
 800835a:	f7f8 fab0 	bl	80008be <shci_notify_asynch_evt>

  return;
 800835e:	bf00      	nop
}
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20000064 	.word	0x20000064

0800836c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a05      	ldr	r2, [pc, #20]	; (800838c <shci_register_io_bus+0x20>)
 8008378:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a04      	ldr	r2, [pc, #16]	; (8008390 <shci_register_io_bus+0x24>)
 800837e:	611a      	str	r2, [r3, #16]

  return;
 8008380:	bf00      	nop
}
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	08008529 	.word	0x08008529
 8008390:	0800857d 	.word	0x0800857d

08008394 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008398:	f001 f976 	bl	8009688 <HW_IPCC_Enable>

  return;
 800839c:	bf00      	nop
}
 800839e:	bd80      	pop	{r7, pc}

080083a0 <TL_Init>:


void TL_Init( void )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80083a4:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <TL_Init+0x48>)
 80083a6:	4a11      	ldr	r2, [pc, #68]	; (80083ec <TL_Init+0x4c>)
 80083a8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80083aa:	4b0f      	ldr	r3, [pc, #60]	; (80083e8 <TL_Init+0x48>)
 80083ac:	4a10      	ldr	r2, [pc, #64]	; (80083f0 <TL_Init+0x50>)
 80083ae:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80083b0:	4b0d      	ldr	r3, [pc, #52]	; (80083e8 <TL_Init+0x48>)
 80083b2:	4a10      	ldr	r2, [pc, #64]	; (80083f4 <TL_Init+0x54>)
 80083b4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80083b6:	4b0c      	ldr	r3, [pc, #48]	; (80083e8 <TL_Init+0x48>)
 80083b8:	4a0f      	ldr	r2, [pc, #60]	; (80083f8 <TL_Init+0x58>)
 80083ba:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80083bc:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <TL_Init+0x48>)
 80083be:	4a0f      	ldr	r2, [pc, #60]	; (80083fc <TL_Init+0x5c>)
 80083c0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80083c2:	4b09      	ldr	r3, [pc, #36]	; (80083e8 <TL_Init+0x48>)
 80083c4:	4a0e      	ldr	r2, [pc, #56]	; (8008400 <TL_Init+0x60>)
 80083c6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80083c8:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <TL_Init+0x48>)
 80083ca:	4a0e      	ldr	r2, [pc, #56]	; (8008404 <TL_Init+0x64>)
 80083cc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80083ce:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <TL_Init+0x48>)
 80083d0:	4a0d      	ldr	r2, [pc, #52]	; (8008408 <TL_Init+0x68>)
 80083d2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80083d4:	4b04      	ldr	r3, [pc, #16]	; (80083e8 <TL_Init+0x48>)
 80083d6:	4a0d      	ldr	r2, [pc, #52]	; (800840c <TL_Init+0x6c>)
 80083d8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80083da:	4b03      	ldr	r3, [pc, #12]	; (80083e8 <TL_Init+0x48>)
 80083dc:	4a0c      	ldr	r2, [pc, #48]	; (8008410 <TL_Init+0x70>)
 80083de:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80083e0:	f001 f966 	bl	80096b0 <HW_IPCC_Init>

  return;
 80083e4:	bf00      	nop
}
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20030000 	.word	0x20030000
 80083ec:	20030028 	.word	0x20030028
 80083f0:	20030048 	.word	0x20030048
 80083f4:	20030058 	.word	0x20030058
 80083f8:	20030068 	.word	0x20030068
 80083fc:	20030070 	.word	0x20030070
 8008400:	20030078 	.word	0x20030078
 8008404:	20030080 	.word	0x20030080
 8008408:	2003009c 	.word	0x2003009c
 800840c:	200300a0 	.word	0x200300a0
 8008410:	200300ac 	.word	0x200300ac

08008414 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008420:	4811      	ldr	r0, [pc, #68]	; (8008468 <TL_BLE_Init+0x54>)
 8008422:	f000 fa27 	bl	8008874 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008426:	4b11      	ldr	r3, [pc, #68]	; (800846c <TL_BLE_Init+0x58>)
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	689a      	ldr	r2, [r3, #8]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	68da      	ldr	r2, [r3, #12]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	4a0c      	ldr	r2, [pc, #48]	; (8008470 <TL_BLE_Init+0x5c>)
 8008440:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	4a08      	ldr	r2, [pc, #32]	; (8008468 <TL_BLE_Init+0x54>)
 8008446:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008448:	f001 f948 	bl	80096dc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a08      	ldr	r2, [pc, #32]	; (8008474 <TL_BLE_Init+0x60>)
 8008452:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	4a07      	ldr	r2, [pc, #28]	; (8008478 <TL_BLE_Init+0x64>)
 800845a:	6013      	str	r3, [r2, #0]

  return 0;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	200300c8 	.word	0x200300c8
 800846c:	20030000 	.word	0x20030000
 8008470:	20030a58 	.word	0x20030a58
 8008474:	200002b8 	.word	0x200002b8
 8008478:	200002bc 	.word	0x200002bc

0800847c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008488:	4b09      	ldr	r3, [pc, #36]	; (80084b0 <TL_BLE_SendCmd+0x34>)
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2201      	movs	r2, #1
 8008490:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008492:	4b07      	ldr	r3, [pc, #28]	; (80084b0 <TL_BLE_SendCmd+0x34>)
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4619      	mov	r1, r3
 800849a:	2001      	movs	r0, #1
 800849c:	f000 f96c 	bl	8008778 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80084a0:	f001 f926 	bl	80096f0 <HW_IPCC_BLE_SendCmd>

  return 0;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20030000 	.word	0x20030000

080084b4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80084ba:	e01c      	b.n	80084f6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80084bc:	1d3b      	adds	r3, r7, #4
 80084be:	4619      	mov	r1, r3
 80084c0:	4812      	ldr	r0, [pc, #72]	; (800850c <HW_IPCC_BLE_RxEvtNot+0x58>)
 80084c2:	f000 fa76 	bl	80089b2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	7a5b      	ldrb	r3, [r3, #9]
 80084ca:	2b0f      	cmp	r3, #15
 80084cc:	d003      	beq.n	80084d6 <HW_IPCC_BLE_RxEvtNot+0x22>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	7a5b      	ldrb	r3, [r3, #9]
 80084d2:	2b0e      	cmp	r3, #14
 80084d4:	d105      	bne.n	80084e2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4619      	mov	r1, r3
 80084da:	2002      	movs	r0, #2
 80084dc:	f000 f94c 	bl	8008778 <OutputDbgTrace>
 80084e0:	e004      	b.n	80084ec <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4619      	mov	r1, r3
 80084e6:	2003      	movs	r0, #3
 80084e8:	f000 f946 	bl	8008778 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80084ec:	4b08      	ldr	r3, [pc, #32]	; (8008510 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	4610      	mov	r0, r2
 80084f4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80084f6:	4805      	ldr	r0, [pc, #20]	; (800850c <HW_IPCC_BLE_RxEvtNot+0x58>)
 80084f8:	f000 f9cc 	bl	8008894 <LST_is_empty>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0dc      	beq.n	80084bc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008502:	bf00      	nop
}
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200300c8 	.word	0x200300c8
 8008510:	200002b8 	.word	0x200002b8

08008514 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008518:	4b02      	ldr	r3, [pc, #8]	; (8008524 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4798      	blx	r3

  return;
 800851e:	bf00      	nop
}
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	200002bc 	.word	0x200002bc

08008528 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008534:	480d      	ldr	r0, [pc, #52]	; (800856c <TL_SYS_Init+0x44>)
 8008536:	f000 f99d 	bl	8008874 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800853a:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <TL_SYS_Init+0x48>)
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4a08      	ldr	r2, [pc, #32]	; (800856c <TL_SYS_Init+0x44>)
 800854c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800854e:	f001 f8f1 	bl	8009734 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a07      	ldr	r2, [pc, #28]	; (8008574 <TL_SYS_Init+0x4c>)
 8008558:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	4a06      	ldr	r2, [pc, #24]	; (8008578 <TL_SYS_Init+0x50>)
 8008560:	6013      	str	r3, [r2, #0]

  return 0;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	200300d0 	.word	0x200300d0
 8008570:	20030000 	.word	0x20030000
 8008574:	200002c0 	.word	0x200002c0
 8008578:	200002c4 	.word	0x200002c4

0800857c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008588:	4b09      	ldr	r3, [pc, #36]	; (80085b0 <TL_SYS_SendCmd+0x34>)
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2210      	movs	r2, #16
 8008590:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008592:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <TL_SYS_SendCmd+0x34>)
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4619      	mov	r1, r3
 800859a:	2004      	movs	r0, #4
 800859c:	f000 f8ec 	bl	8008778 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80085a0:	f001 f8d2 	bl	8009748 <HW_IPCC_SYS_SendCmd>

  return 0;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20030000 	.word	0x20030000

080085b4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80085b8:	4b07      	ldr	r3, [pc, #28]	; (80085d8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4619      	mov	r1, r3
 80085c0:	2005      	movs	r0, #5
 80085c2:	f000 f8d9 	bl	8008778 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80085c6:	4b05      	ldr	r3, [pc, #20]	; (80085dc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a03      	ldr	r2, [pc, #12]	; (80085d8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80085cc:	68d2      	ldr	r2, [r2, #12]
 80085ce:	6812      	ldr	r2, [r2, #0]
 80085d0:	4610      	mov	r0, r2
 80085d2:	4798      	blx	r3

  return;
 80085d4:	bf00      	nop
}
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	20030000 	.word	0x20030000
 80085dc:	200002c0 	.word	0x200002c0

080085e0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80085e6:	e00e      	b.n	8008606 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80085e8:	1d3b      	adds	r3, r7, #4
 80085ea:	4619      	mov	r1, r3
 80085ec:	480b      	ldr	r0, [pc, #44]	; (800861c <HW_IPCC_SYS_EvtNot+0x3c>)
 80085ee:	f000 f9e0 	bl	80089b2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4619      	mov	r1, r3
 80085f6:	2006      	movs	r0, #6
 80085f8:	f000 f8be 	bl	8008778 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80085fc:	4b08      	ldr	r3, [pc, #32]	; (8008620 <HW_IPCC_SYS_EvtNot+0x40>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	4610      	mov	r0, r2
 8008604:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008606:	4805      	ldr	r0, [pc, #20]	; (800861c <HW_IPCC_SYS_EvtNot+0x3c>)
 8008608:	f000 f944 	bl	8008894 <LST_is_empty>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0ea      	beq.n	80085e8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008612:	bf00      	nop
}
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	200300d0 	.word	0x200300d0
 8008620:	200002c4 	.word	0x200002c4

08008624 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800862c:	4817      	ldr	r0, [pc, #92]	; (800868c <TL_MM_Init+0x68>)
 800862e:	f000 f921 	bl	8008874 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008632:	4817      	ldr	r0, [pc, #92]	; (8008690 <TL_MM_Init+0x6c>)
 8008634:	f000 f91e 	bl	8008874 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008638:	4b16      	ldr	r3, [pc, #88]	; (8008694 <TL_MM_Init+0x70>)
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	4a16      	ldr	r2, [pc, #88]	; (8008698 <TL_MM_Init+0x74>)
 800863e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008640:	4b15      	ldr	r3, [pc, #84]	; (8008698 <TL_MM_Init+0x74>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	6892      	ldr	r2, [r2, #8]
 8008648:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800864a:	4b13      	ldr	r3, [pc, #76]	; (8008698 <TL_MM_Init+0x74>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	68d2      	ldr	r2, [r2, #12]
 8008652:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008654:	4b10      	ldr	r3, [pc, #64]	; (8008698 <TL_MM_Init+0x74>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a0c      	ldr	r2, [pc, #48]	; (800868c <TL_MM_Init+0x68>)
 800865a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800865c:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <TL_MM_Init+0x74>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6812      	ldr	r2, [r2, #0]
 8008664:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008666:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <TL_MM_Init+0x74>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	6852      	ldr	r2, [r2, #4]
 800866e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008670:	4b09      	ldr	r3, [pc, #36]	; (8008698 <TL_MM_Init+0x74>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	6912      	ldr	r2, [r2, #16]
 8008678:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800867a:	4b07      	ldr	r3, [pc, #28]	; (8008698 <TL_MM_Init+0x74>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	6952      	ldr	r2, [r2, #20]
 8008682:	619a      	str	r2, [r3, #24]

  return;
 8008684:	bf00      	nop
}
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	200300b8 	.word	0x200300b8
 8008690:	200002b0 	.word	0x200002b0
 8008694:	20030000 	.word	0x20030000
 8008698:	200002c8 	.word	0x200002c8

0800869c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	4807      	ldr	r0, [pc, #28]	; (80086c4 <TL_MM_EvtDone+0x28>)
 80086a8:	f000 f93c 	bl	8008924 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80086ac:	6879      	ldr	r1, [r7, #4]
 80086ae:	2000      	movs	r0, #0
 80086b0:	f000 f862 	bl	8008778 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80086b4:	4804      	ldr	r0, [pc, #16]	; (80086c8 <TL_MM_EvtDone+0x2c>)
 80086b6:	f001 f86d 	bl	8009794 <HW_IPCC_MM_SendFreeBuf>

  return;
 80086ba:	bf00      	nop
}
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	200002b0 	.word	0x200002b0
 80086c8:	080086cd 	.word	0x080086cd

080086cc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80086d2:	e00c      	b.n	80086ee <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80086d4:	1d3b      	adds	r3, r7, #4
 80086d6:	4619      	mov	r1, r3
 80086d8:	480a      	ldr	r0, [pc, #40]	; (8008704 <SendFreeBuf+0x38>)
 80086da:	f000 f96a 	bl	80089b2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80086de:	4b0a      	ldr	r3, [pc, #40]	; (8008708 <SendFreeBuf+0x3c>)
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 f91b 	bl	8008924 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80086ee:	4805      	ldr	r0, [pc, #20]	; (8008704 <SendFreeBuf+0x38>)
 80086f0:	f000 f8d0 	bl	8008894 <LST_is_empty>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0ec      	beq.n	80086d4 <SendFreeBuf+0x8>
  }

  return;
 80086fa:	bf00      	nop
}
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	200002b0 	.word	0x200002b0
 8008708:	20030000 	.word	0x20030000

0800870c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008710:	4805      	ldr	r0, [pc, #20]	; (8008728 <TL_TRACES_Init+0x1c>)
 8008712:	f000 f8af 	bl	8008874 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008716:	4b05      	ldr	r3, [pc, #20]	; (800872c <TL_TRACES_Init+0x20>)
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	4a03      	ldr	r2, [pc, #12]	; (8008728 <TL_TRACES_Init+0x1c>)
 800871c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800871e:	f001 f86f 	bl	8009800 <HW_IPCC_TRACES_Init>

  return;
 8008722:	bf00      	nop
}
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	200300c0 	.word	0x200300c0
 800872c:	20030000 	.word	0x20030000

08008730 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008736:	e008      	b.n	800874a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008738:	1d3b      	adds	r3, r7, #4
 800873a:	4619      	mov	r1, r3
 800873c:	4808      	ldr	r0, [pc, #32]	; (8008760 <HW_IPCC_TRACES_EvtNot+0x30>)
 800873e:	f000 f938 	bl	80089b2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4618      	mov	r0, r3
 8008746:	f000 f80d 	bl	8008764 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800874a:	4805      	ldr	r0, [pc, #20]	; (8008760 <HW_IPCC_TRACES_EvtNot+0x30>)
 800874c:	f000 f8a2 	bl	8008894 <LST_is_empty>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0f0      	beq.n	8008738 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008756:	bf00      	nop
}
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	200300c0 	.word	0x200300c0

08008764 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	6039      	str	r1, [r7, #0]
 8008782:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	2b06      	cmp	r3, #6
 8008788:	d845      	bhi.n	8008816 <OutputDbgTrace+0x9e>
 800878a:	a201      	add	r2, pc, #4	; (adr r2, 8008790 <OutputDbgTrace+0x18>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	080087ad 	.word	0x080087ad
 8008794:	080087d1 	.word	0x080087d1
 8008798:	080087d7 	.word	0x080087d7
 800879c:	080087eb 	.word	0x080087eb
 80087a0:	080087f7 	.word	0x080087f7
 80087a4:	080087fd 	.word	0x080087fd
 80087a8:	0800880b 	.word	0x0800880b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	7a5b      	ldrb	r3, [r3, #9]
 80087b4:	2bff      	cmp	r3, #255	; 0xff
 80087b6:	d005      	beq.n	80087c4 <OutputDbgTrace+0x4c>
 80087b8:	2bff      	cmp	r3, #255	; 0xff
 80087ba:	dc05      	bgt.n	80087c8 <OutputDbgTrace+0x50>
 80087bc:	2b0e      	cmp	r3, #14
 80087be:	d005      	beq.n	80087cc <OutputDbgTrace+0x54>
 80087c0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80087c2:	e001      	b.n	80087c8 <OutputDbgTrace+0x50>
          break;
 80087c4:	bf00      	nop
 80087c6:	e027      	b.n	8008818 <OutputDbgTrace+0xa0>
          break;
 80087c8:	bf00      	nop
 80087ca:	e025      	b.n	8008818 <OutputDbgTrace+0xa0>
          break;
 80087cc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80087ce:	e023      	b.n	8008818 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80087d4:	e020      	b.n	8008818 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	7a5b      	ldrb	r3, [r3, #9]
 80087de:	2b0e      	cmp	r3, #14
 80087e0:	d001      	beq.n	80087e6 <OutputDbgTrace+0x6e>
 80087e2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80087e4:	e000      	b.n	80087e8 <OutputDbgTrace+0x70>
          break;
 80087e6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80087e8:	e016      	b.n	8008818 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	7a5b      	ldrb	r3, [r3, #9]
 80087f2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80087f4:	e010      	b.n	8008818 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80087fa:	e00d      	b.n	8008818 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	7a5b      	ldrb	r3, [r3, #9]
 8008804:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008806:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008808:	e006      	b.n	8008818 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	7a5b      	ldrb	r3, [r3, #9]
 8008812:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008814:	e000      	b.n	8008818 <OutputDbgTrace+0xa0>

    default:
      break;
 8008816:	bf00      	nop
  }

  return;
 8008818:	bf00      	nop
}
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800882e:	4b0f      	ldr	r3, [pc, #60]	; (800886c <OTP_Read+0x48>)
 8008830:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008832:	e002      	b.n	800883a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3b08      	subs	r3, #8
 8008838:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3307      	adds	r3, #7
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	79fa      	ldrb	r2, [r7, #7]
 8008842:	429a      	cmp	r2, r3
 8008844:	d003      	beq.n	800884e <OTP_Read+0x2a>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4a09      	ldr	r2, [pc, #36]	; (8008870 <OTP_Read+0x4c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d1f2      	bne.n	8008834 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3307      	adds	r3, #7
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	79fa      	ldrb	r2, [r7, #7]
 8008856:	429a      	cmp	r2, r3
 8008858:	d001      	beq.n	800885e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800885a:	2300      	movs	r3, #0
 800885c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800885e:	68fb      	ldr	r3, [r7, #12]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	1fff73f8 	.word	0x1fff73f8
 8008870:	1fff7000 	.word	0x1fff7000

08008874 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	605a      	str	r2, [r3, #4]
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800889c:	f3ef 8310 	mrs	r3, PRIMASK
 80088a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80088a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80088a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80088a6:	b672      	cpsid	i
}
 80088a8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d102      	bne.n	80088ba <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80088b4:	2301      	movs	r3, #1
 80088b6:	75fb      	strb	r3, [r7, #23]
 80088b8:	e001      	b.n	80088be <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f383 8810 	msr	PRIMASK, r3
}
 80088c8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	371c      	adds	r7, #28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088e2:	f3ef 8310 	mrs	r3, PRIMASK
 80088e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80088e8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80088ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80088ec:	b672      	cpsid	i
}
 80088ee:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	605a      	str	r2, [r3, #4]
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f383 8810 	msr	PRIMASK, r3
}
 8008916:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008918:	bf00      	nop
 800891a:	371c      	adds	r7, #28
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800892e:	f3ef 8310 	mrs	r3, PRIMASK
 8008932:	60fb      	str	r3, [r7, #12]
  return(result);
 8008934:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008936:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008938:	b672      	cpsid	i
}
 800893a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f383 8810 	msr	PRIMASK, r3
}
 8008962:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008964:	bf00      	nop
 8008966:	371c      	adds	r7, #28
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008978:	f3ef 8310 	mrs	r3, PRIMASK
 800897c:	60fb      	str	r3, [r7, #12]
  return(result);
 800897e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008980:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008982:	b672      	cpsid	i
}
 8008984:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6812      	ldr	r2, [r2, #0]
 800898e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	6852      	ldr	r2, [r2, #4]
 8008998:	605a      	str	r2, [r3, #4]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f383 8810 	msr	PRIMASK, r3
}
 80089a4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80089a6:	bf00      	nop
 80089a8:	371c      	adds	r7, #28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b086      	sub	sp, #24
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089bc:	f3ef 8310 	mrs	r3, PRIMASK
 80089c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80089c2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80089c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80089c6:	b672      	cpsid	i
}
 80089c8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff ffca 	bl	8008970 <LST_remove_node>
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f383 8810 	msr	PRIMASK, r3
}
 80089e6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80089e8:	bf00      	nop
 80089ea:	3718      	adds	r7, #24
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80089f4:	4b03      	ldr	r3, [pc, #12]	; (8008a04 <LL_FLASH_GetUDN+0x14>)
 80089f6:	681b      	ldr	r3, [r3, #0]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	1fff7580 	.word	0x1fff7580

08008a08 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008a0c:	4b03      	ldr	r3, [pc, #12]	; (8008a1c <LL_FLASH_GetDeviceID+0x14>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	b2db      	uxtb	r3, r3
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	1fff7584 	.word	0x1fff7584

08008a20 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008a20:	b480      	push	{r7}
 8008a22:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008a24:	4b03      	ldr	r3, [pc, #12]	; (8008a34 <LL_FLASH_GetSTCompanyID+0x14>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	0a1b      	lsrs	r3, r3, #8
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	1fff7584 	.word	0x1fff7584

08008a38 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008a38:	b5b0      	push	{r4, r5, r7, lr}
 8008a3a:	b090      	sub	sp, #64	; 0x40
 8008a3c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008a3e:	2392      	movs	r3, #146	; 0x92
 8008a40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1 << CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 8008a44:	4a29      	ldr	r2, [pc, #164]	; (8008aec <APP_BLE_Init+0xb4>)
 8008a46:	2100      	movs	r1, #0
 8008a48:	2004      	movs	r0, #4
 8008a4a:	f001 f82d 	bl	8009aa8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8008a4e:	2100      	movs	r1, #0
 8008a50:	2004      	movs	r0, #4
 8008a52:	f001 f84b 	bl	8009aec <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008a56:	4b26      	ldr	r3, [pc, #152]	; (8008af0 <APP_BLE_Init+0xb8>)
 8008a58:	1d3c      	adds	r4, r7, #4
 8008a5a:	461d      	mov	r5, r3
 8008a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a6c:	c403      	stmia	r4!, {r0, r1}
 8008a6e:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008a70:	f000 f906 	bl	8008c80 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008a74:	2101      	movs	r1, #1
 8008a76:	2002      	movs	r0, #2
 8008a78:	f000 feea 	bl	8009850 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008a7c:	4a1d      	ldr	r2, [pc, #116]	; (8008af4 <APP_BLE_Init+0xbc>)
 8008a7e:	2100      	movs	r1, #0
 8008a80:	2002      	movs	r0, #2
 8008a82:	f001 f811 	bl	8009aa8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008a86:	1d3b      	adds	r3, r7, #4
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff f8bd 	bl	8007c08 <SHCI_C2_BLE_Init>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8008a94:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8008a9c:	f7f8 ff58 	bl	8001950 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008aa0:	f000 f904 	bl	8008cac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008aa4:	f7ff f80a 	bl	8007abc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008aa8:	4b13      	ldr	r3, [pc, #76]	; (8008af8 <APP_BLE_Init+0xc0>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008ab0:	4b11      	ldr	r3, [pc, #68]	; (8008af8 <APP_BLE_Init+0xc0>)
 8008ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ab6:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008ab8:	4a10      	ldr	r2, [pc, #64]	; (8008afc <APP_BLE_Init+0xc4>)
 8008aba:	2100      	movs	r1, #0
 8008abc:	2001      	movs	r0, #1
 8008abe:	f000 fff3 	bl	8009aa8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008ac2:	2006      	movs	r0, #6
 8008ac4:	f7fe fe6d 	bl	80077a2 <aci_hal_set_radio_activity_mask>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008ace:	f000 fadb 	bl	8009088 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008ad2:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <APP_BLE_Init+0xc0>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008ad8:	4b07      	ldr	r3, [pc, #28]	; (8008af8 <APP_BLE_Init+0xc0>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008ade:	2001      	movs	r0, #1
 8008ae0:	f000 f998 	bl	8008e14 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008ae4:	bf00      	nop
}
 8008ae6:	3740      	adds	r7, #64	; 0x40
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bdb0      	pop	{r4, r5, r7, pc}
 8008aec:	08008fe5 	.word	0x08008fe5
 8008af0:	08009e04 	.word	0x08009e04
 8008af4:	08007e25 	.word	0x08007e25
 8008af8:	200002d4 	.word	0x200002d4
 8008afc:	08008efd 	.word	0x08008efd

08008b00 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08a      	sub	sp, #40	; 0x28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008b08:	2392      	movs	r3, #146	; 0x92
 8008b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3301      	adds	r3, #1
 8008b12:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2bff      	cmp	r3, #255	; 0xff
 8008b1a:	d053      	beq.n	8008bc4 <SVCCTL_App_Notification+0xc4>
 8008b1c:	2bff      	cmp	r3, #255	; 0xff
 8008b1e:	f300 80a1 	bgt.w	8008c64 <SVCCTL_App_Notification+0x164>
 8008b22:	2b05      	cmp	r3, #5
 8008b24:	d002      	beq.n	8008b2c <SVCCTL_App_Notification+0x2c>
 8008b26:	2b3e      	cmp	r3, #62	; 0x3e
 8008b28:	d020      	beq.n	8008b6c <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008b2a:	e09b      	b.n	8008c64 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	3302      	adds	r3, #2
 8008b30:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	4b4e      	ldr	r3, [pc, #312]	; (8008c74 <SVCCTL_App_Notification+0x174>)
 8008b3c:	8adb      	ldrh	r3, [r3, #22]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d106      	bne.n	8008b50 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008b42:	4b4c      	ldr	r3, [pc, #304]	; (8008c74 <SVCCTL_App_Notification+0x174>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008b48:	4b4a      	ldr	r3, [pc, #296]	; (8008c74 <SVCCTL_App_Notification+0x174>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008b50:	2001      	movs	r0, #1
 8008b52:	f000 f95f 	bl	8008e14 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008b56:	4b48      	ldr	r3, [pc, #288]	; (8008c78 <SVCCTL_App_Notification+0x178>)
 8008b58:	2201      	movs	r2, #1
 8008b5a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008b5c:	4b45      	ldr	r3, [pc, #276]	; (8008c74 <SVCCTL_App_Notification+0x174>)
 8008b5e:	8ada      	ldrh	r2, [r3, #22]
 8008b60:	4b45      	ldr	r3, [pc, #276]	; (8008c78 <SVCCTL_App_Notification+0x178>)
 8008b62:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8008b64:	4844      	ldr	r0, [pc, #272]	; (8008c78 <SVCCTL_App_Notification+0x178>)
 8008b66:	f000 fa7b 	bl	8009060 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008b6a:	e07e      	b.n	8008c6a <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	3302      	adds	r3, #2
 8008b70:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d001      	beq.n	8008b7e <SVCCTL_App_Notification+0x7e>
 8008b7a:	2b03      	cmp	r3, #3
          break;
 8008b7c:	e021      	b.n	8008bc2 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	3301      	adds	r3, #1
 8008b82:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008b84:	4b3b      	ldr	r3, [pc, #236]	; (8008c74 <SVCCTL_App_Notification+0x174>)
 8008b86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d104      	bne.n	8008b98 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008b8e:	4b39      	ldr	r3, [pc, #228]	; (8008c74 <SVCCTL_App_Notification+0x174>)
 8008b90:	2206      	movs	r2, #6
 8008b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008b96:	e003      	b.n	8008ba0 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008b98:	4b36      	ldr	r3, [pc, #216]	; (8008c74 <SVCCTL_App_Notification+0x174>)
 8008b9a:	2205      	movs	r2, #5
 8008b9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	4b32      	ldr	r3, [pc, #200]	; (8008c74 <SVCCTL_App_Notification+0x174>)
 8008baa:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8008bac:	4b32      	ldr	r3, [pc, #200]	; (8008c78 <SVCCTL_App_Notification+0x178>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008bb2:	4b30      	ldr	r3, [pc, #192]	; (8008c74 <SVCCTL_App_Notification+0x174>)
 8008bb4:	8ada      	ldrh	r2, [r3, #22]
 8008bb6:	4b30      	ldr	r3, [pc, #192]	; (8008c78 <SVCCTL_App_Notification+0x178>)
 8008bb8:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8008bba:	482f      	ldr	r0, [pc, #188]	; (8008c78 <SVCCTL_App_Notification+0x178>)
 8008bbc:	f000 fa50 	bl	8009060 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008bc0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008bc2:	e052      	b.n	8008c6a <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	3302      	adds	r3, #2
 8008bc8:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bd4:	d040      	beq.n	8008c58 <SVCCTL_App_Notification+0x158>
 8008bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bda:	dc45      	bgt.n	8008c68 <SVCCTL_App_Notification+0x168>
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d03d      	beq.n	8008c5c <SVCCTL_App_Notification+0x15c>
 8008be0:	2b04      	cmp	r3, #4
 8008be2:	db41      	blt.n	8008c68 <SVCCTL_App_Notification+0x168>
 8008be4:	f240 420a 	movw	r2, #1034	; 0x40a
 8008be8:	4293      	cmp	r3, r2
 8008bea:	dc3d      	bgt.n	8008c68 <SVCCTL_App_Notification+0x168>
 8008bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bf0:	dd3a      	ble.n	8008c68 <SVCCTL_App_Notification+0x168>
 8008bf2:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8008bf6:	2b09      	cmp	r3, #9
 8008bf8:	d836      	bhi.n	8008c68 <SVCCTL_App_Notification+0x168>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <SVCCTL_App_Notification+0x100>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c51 	.word	0x08008c51
 8008c04:	08008c29 	.word	0x08008c29
 8008c08:	08008c69 	.word	0x08008c69
 8008c0c:	08008c69 	.word	0x08008c69
 8008c10:	08008c69 	.word	0x08008c69
 8008c14:	08008c69 	.word	0x08008c69
 8008c18:	08008c61 	.word	0x08008c61
 8008c1c:	08008c69 	.word	0x08008c69
 8008c20:	08008c3d 	.word	0x08008c3d
 8008c24:	08008c61 	.word	0x08008c61
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008c28:	4b12      	ldr	r3, [pc, #72]	; (8008c74 <SVCCTL_App_Notification+0x174>)
 8008c2a:	8adb      	ldrh	r3, [r3, #22]
 8008c2c:	4913      	ldr	r1, [pc, #76]	; (8008c7c <SVCCTL_App_Notification+0x17c>)
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fe f80e 	bl	8006c50 <aci_gap_pass_key_resp>
 8008c34:	4603      	mov	r3, r0
 8008c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8008c3a:	e012      	b.n	8008c62 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <SVCCTL_App_Notification+0x174>)
 8008c3e:	8adb      	ldrh	r3, [r3, #22]
 8008c40:	2101      	movs	r1, #1
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe f9ae 	bl	8006fa4 <aci_gap_numeric_comparison_value_confirm_yesno>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8008c4e:	e008      	b.n	8008c62 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	3302      	adds	r3, #2
 8008c54:	61bb      	str	r3, [r7, #24]
          break;
 8008c56:	e004      	b.n	8008c62 <SVCCTL_App_Notification+0x162>
          break;
 8008c58:	bf00      	nop
 8008c5a:	e005      	b.n	8008c68 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008c5c:	bf00      	nop
 8008c5e:	e003      	b.n	8008c68 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008c60:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008c62:	e001      	b.n	8008c68 <SVCCTL_App_Notification+0x168>
      break;
 8008c64:	bf00      	nop
 8008c66:	e000      	b.n	8008c6a <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008c68:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008c6a:	2301      	movs	r3, #1
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3728      	adds	r7, #40	; 0x28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	200002d4 	.word	0x200002d4
 8008c78:	20000358 	.word	0x20000358
 8008c7c:	0001b207 	.word	0x0001b207

08008c80 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008c86:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <Ble_Tl_Init+0x20>)
 8008c88:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008c8a:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <Ble_Tl_Init+0x24>)
 8008c8c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008c8e:	463b      	mov	r3, r7
 8008c90:	4619      	mov	r1, r3
 8008c92:	4805      	ldr	r0, [pc, #20]	; (8008ca8 <Ble_Tl_Init+0x28>)
 8008c94:	f7ff f8aa 	bl	8007dec <hci_init>

  return;
 8008c98:	bf00      	nop
}
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	200300d8 	.word	0x200300d8
 8008ca4:	08008fad 	.word	0x08008fad
 8008ca8:	08008f75 	.word	0x08008f75

08008cac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cae:	b08d      	sub	sp, #52	; 0x34
 8008cb0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008cb6:	2392      	movs	r3, #146	; 0x92
 8008cb8:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008cba:	f7fe fdc6 	bl	800784a <hci_reset>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008cc2:	f000 f8d7 	bl	8008e74 <BleGetBdAddress>
 8008cc6:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	2106      	movs	r1, #6
 8008ccc:	2000      	movs	r0, #0
 8008cce:	f7fe fc7c 	bl	80075ca <aci_hal_write_config_data>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008cd6:	4a4a      	ldr	r2, [pc, #296]	; (8008e00 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8008cd8:	2110      	movs	r1, #16
 8008cda:	2018      	movs	r0, #24
 8008cdc:	f7fe fc75 	bl	80075ca <aci_hal_write_config_data>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008ce4:	4a47      	ldr	r2, [pc, #284]	; (8008e04 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8008ce6:	2110      	movs	r1, #16
 8008ce8:	2008      	movs	r0, #8
 8008cea:	f7fe fc6e 	bl	80075ca <aci_hal_write_config_data>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008cf2:	2118      	movs	r1, #24
 8008cf4:	2001      	movs	r0, #1
 8008cf6:	f7fe fced 	bl	80076d4 <aci_hal_set_tx_power_level>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008cfe:	f7fe f9b8 	bl	8007072 <aci_gatt_init>
 8008d02:	4603      	mov	r3, r0
 8008d04:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
 8008d0c:	f043 0301 	orr.w	r3, r3, #1
 8008d10:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01f      	beq.n	8008d58 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008d18:	4b3b      	ldr	r3, [pc, #236]	; (8008e08 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8008d1a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008d1c:	1dba      	adds	r2, r7, #6
 8008d1e:	7bf8      	ldrb	r0, [r7, #15]
 8008d20:	1cbb      	adds	r3, r7, #2
 8008d22:	9301      	str	r3, [sp, #4]
 8008d24:	1d3b      	adds	r3, r7, #4
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	2208      	movs	r2, #8
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	f7fd fff6 	bl	8006d1e <aci_gap_init>
 8008d32:	4603      	mov	r3, r0
 8008d34:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008d36:	88fc      	ldrh	r4, [r7, #6]
 8008d38:	88bd      	ldrh	r5, [r7, #4]
 8008d3a:	68b8      	ldr	r0, [r7, #8]
 8008d3c:	f7f7 fa1e 	bl	800017c <strlen>
 8008d40:	4603      	mov	r3, r0
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f7fe fb92 	bl	8007478 <aci_gatt_update_char_value>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008d58:	88f8      	ldrh	r0, [r7, #6]
 8008d5a:	8879      	ldrh	r1, [r7, #2]
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	2302      	movs	r3, #2
 8008d62:	2200      	movs	r2, #0
 8008d64:	f7fe fb88 	bl	8007478 <aci_gatt_update_char_value>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	2102      	movs	r1, #2
 8008d70:	2000      	movs	r0, #0
 8008d72:	f7fe fd8e 	bl	8007892 <hci_le_set_default_phy>
 8008d76:	4603      	mov	r3, r0
 8008d78:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008d7a:	4b24      	ldr	r3, [pc, #144]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008d80:	4b22      	ldr	r3, [pc, #136]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fd fe4b 	bl	8006a20 <aci_gap_set_io_capability>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008d8e:	4b1f      	ldr	r3, [pc, #124]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008d90:	2201      	movs	r2, #1
 8008d92:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008d94:	4b1d      	ldr	r3, [pc, #116]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008d96:	2208      	movs	r2, #8
 8008d98:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008d9a:	4b1c      	ldr	r3, [pc, #112]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008d9c:	2210      	movs	r2, #16
 8008d9e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008da0:	4b1a      	ldr	r3, [pc, #104]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008da6:	4b19      	ldr	r3, [pc, #100]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008da8:	4a19      	ldr	r2, [pc, #100]	; (8008e10 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8008daa:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008dac:	4b17      	ldr	r3, [pc, #92]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008db2:	4b16      	ldr	r3, [pc, #88]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008db4:	789c      	ldrb	r4, [r3, #2]
 8008db6:	4b15      	ldr	r3, [pc, #84]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008db8:	785d      	ldrb	r5, [r3, #1]
 8008dba:	4b14      	ldr	r3, [pc, #80]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008dbc:	791b      	ldrb	r3, [r3, #4]
 8008dbe:	4a13      	ldr	r2, [pc, #76]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008dc0:	7952      	ldrb	r2, [r2, #5]
 8008dc2:	4912      	ldr	r1, [pc, #72]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008dc4:	78c9      	ldrb	r1, [r1, #3]
 8008dc6:	4811      	ldr	r0, [pc, #68]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008dc8:	6880      	ldr	r0, [r0, #8]
 8008dca:	2600      	movs	r6, #0
 8008dcc:	9604      	str	r6, [sp, #16]
 8008dce:	9003      	str	r0, [sp, #12]
 8008dd0:	9102      	str	r1, [sp, #8]
 8008dd2:	9201      	str	r2, [sp, #4]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	2201      	movs	r2, #1
 8008dda:	4629      	mov	r1, r5
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f7fd fe73 	bl	8006ac8 <aci_gap_set_authentication_requirement>
 8008de2:	4603      	mov	r3, r0
 8008de4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008de6:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008de8:	789b      	ldrb	r3, [r3, #2]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8008dee:	f7fe f8b5 	bl	8006f5c <aci_gap_configure_filter_accept_list>
 8008df2:	4603      	mov	r3, r0
 8008df4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8008df6:	bf00      	nop
 8008df8:	371c      	adds	r7, #28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	0800a064 	.word	0x0800a064
 8008e04:	0800a074 	.word	0x0800a074
 8008e08:	08009e40 	.word	0x08009e40
 8008e0c:	200002d4 	.word	0x200002d4
 8008e10:	0001b207 	.word	0x0001b207

08008e14 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08c      	sub	sp, #48	; 0x30
 8008e18:	af08      	add	r7, sp, #32
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008e1e:	2392      	movs	r3, #146	; 0x92
 8008e20:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8008e22:	4a12      	ldr	r2, [pc, #72]	; (8008e6c <Adv_Request+0x58>)
 8008e24:	79fb      	ldrb	r3, [r7, #7]
 8008e26:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9306      	str	r3, [sp, #24]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9305      	str	r3, [sp, #20]
 8008e32:	2300      	movs	r3, #0
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	2300      	movs	r3, #0
 8008e38:	9303      	str	r3, [sp, #12]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	9302      	str	r3, [sp, #8]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	2300      	movs	r3, #0
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	2300      	movs	r3, #0
 8008e48:	22a0      	movs	r2, #160	; 0xa0
 8008e4a:	2180      	movs	r1, #128	; 0x80
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	f7fd fced 	bl	800682c <aci_gap_set_discoverable>
 8008e52:	4603      	mov	r3, r0
 8008e54:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8008e56:	4906      	ldr	r1, [pc, #24]	; (8008e70 <Adv_Request+0x5c>)
 8008e58:	200d      	movs	r0, #13
 8008e5a:	f7fe f80d 	bl	8006e78 <aci_gap_update_adv_data>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8008e62:	bf00      	nop
}
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	200002d4 	.word	0x200002d4
 8008e70:	20000014 	.word	0x20000014

08008e74 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008e7a:	f7ff fdb9 	bl	80089f0 <LL_FLASH_GetUDN>
 8008e7e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e86:	d023      	beq.n	8008ed0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008e88:	f7ff fdca 	bl	8008a20 <LL_FLASH_GetSTCompanyID>
 8008e8c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008e8e:	f7ff fdbb 	bl	8008a08 <LL_FLASH_GetDeviceID>
 8008e92:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	4b16      	ldr	r3, [pc, #88]	; (8008ef4 <BleGetBdAddress+0x80>)
 8008e9a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	0a1b      	lsrs	r3, r3, #8
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	4b14      	ldr	r3, [pc, #80]	; (8008ef4 <BleGetBdAddress+0x80>)
 8008ea4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	4b12      	ldr	r3, [pc, #72]	; (8008ef4 <BleGetBdAddress+0x80>)
 8008eac:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	4b10      	ldr	r3, [pc, #64]	; (8008ef4 <BleGetBdAddress+0x80>)
 8008eb4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	0a1b      	lsrs	r3, r3, #8
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	4b0d      	ldr	r3, [pc, #52]	; (8008ef4 <BleGetBdAddress+0x80>)
 8008ebe:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	0c1b      	lsrs	r3, r3, #16
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	4b0b      	ldr	r3, [pc, #44]	; (8008ef4 <BleGetBdAddress+0x80>)
 8008ec8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8008eca:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <BleGetBdAddress+0x80>)
 8008ecc:	617b      	str	r3, [r7, #20]
 8008ece:	e00b      	b.n	8008ee8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	f7ff fca7 	bl	8008824 <OTP_Read>
 8008ed6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	617b      	str	r3, [r7, #20]
 8008ee2:	e001      	b.n	8008ee8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008ee4:	4b04      	ldr	r3, [pc, #16]	; (8008ef8 <BleGetBdAddress+0x84>)
 8008ee6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8008ee8:	697b      	ldr	r3, [r7, #20]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3718      	adds	r7, #24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	200002cc 	.word	0x200002cc
 8008ef8:	0800a05c 	.word	0x0800a05c

08008efc <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008f02:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <Adv_Cancel+0x30>)
 8008f04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f08:	2b05      	cmp	r3, #5
 8008f0a:	d00a      	beq.n	8008f22 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008f0c:	2392      	movs	r3, #146	; 0x92
 8008f0e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008f10:	f7fd fc68 	bl	80067e4 <aci_gap_set_non_discoverable>
 8008f14:	4603      	mov	r3, r0
 8008f16:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008f18:	4b04      	ldr	r3, [pc, #16]	; (8008f2c <Adv_Cancel+0x30>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008f20:	bf00      	nop
 8008f22:	bf00      	nop
}
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	200002d4 	.word	0x200002d4

08008f30 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008f38:	2100      	movs	r1, #0
 8008f3a:	2002      	movs	r0, #2
 8008f3c:	f000 fdd6 	bl	8009aec <UTIL_SEQ_SetTask>

  return;
 8008f40:	bf00      	nop
}
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008f50:	2001      	movs	r0, #1
 8008f52:	f000 fe37 	bl	8009bc4 <UTIL_SEQ_SetEvt>

  return;
 8008f56:	bf00      	nop
}
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b082      	sub	sp, #8
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008f66:	2001      	movs	r0, #1
 8008f68:	f000 fe4c 	bl	8009c04 <UTIL_SEQ_WaitEvt>

  return;
 8008f6c:	bf00      	nop
}
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	3308      	adds	r3, #8
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fdea 	bl	8007b60 <SVCCTL_UserEvtRx>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008f9c:	e003      	b.n	8008fa6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	701a      	strb	r2, [r3, #0]
  return;
 8008fa4:	bf00      	nop
}
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <BLE_StatusNot+0x16>
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d006      	beq.n	8008fce <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008fc0:	e00b      	b.n	8008fda <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008fc2:	2307      	movs	r3, #7
 8008fc4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 fdbc 	bl	8009b44 <UTIL_SEQ_PauseTask>
      break;
 8008fcc:	e005      	b.n	8008fda <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008fce:	2307      	movs	r3, #7
 8008fd0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f000 fdd6 	bl	8009b84 <UTIL_SEQ_ResumeTask>
      break;
 8008fd8:	bf00      	nop
  }

  return;
 8008fda:	bf00      	nop
}
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <myTask>:
/* Message */
static void Custom_Receive_Update_Char(void);
static void Custom_Receive_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void){
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8008fe8:	2110      	movs	r1, #16
 8008fea:	480c      	ldr	r0, [pc, #48]	; (800901c <myTask+0x38>)
 8008fec:	f7f9 fb06 	bl	80025fc <HAL_GPIO_ReadPin>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00c      	beq.n	8009010 <myTask+0x2c>
		UpdateCharData[0] ^= 0x1;
 8008ff6:	4b0a      	ldr	r3, [pc, #40]	; (8009020 <myTask+0x3c>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	f083 0301 	eor.w	r3, r3, #1
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	4b07      	ldr	r3, [pc, #28]	; (8009020 <myTask+0x3c>)
 8009002:	701a      	strb	r2, [r3, #0]
		Custom_Receive_Update_Char();
 8009004:	f000 f848 	bl	8009098 <Custom_Receive_Update_Char>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8009008:	2101      	movs	r1, #1
 800900a:	4806      	ldr	r0, [pc, #24]	; (8009024 <myTask+0x40>)
 800900c:	f7f9 fb26 	bl	800265c <HAL_GPIO_TogglePin>
	}
	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8009010:	2100      	movs	r1, #0
 8009012:	2004      	movs	r0, #4
 8009014:	f000 fd6a 	bl	8009aec <UTIL_SEQ_SetTask>
}
 8009018:	bf00      	nop
 800901a:	bd80      	pop	{r7, pc}
 800901c:	48000800 	.word	0x48000800
 8009020:	2000035c 	.word	0x2000035c
 8009024:	48000400 	.word	0x48000400

08009028 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b02      	cmp	r3, #2
 8009036:	d006      	beq.n	8009046 <Custom_STM_App_Notification+0x1e>
 8009038:	2b02      	cmp	r3, #2
 800903a:	dc06      	bgt.n	800904a <Custom_STM_App_Notification+0x22>
 800903c:	2b00      	cmp	r3, #0
 800903e:	d006      	beq.n	800904e <Custom_STM_App_Notification+0x26>
 8009040:	2b01      	cmp	r3, #1
 8009042:	d006      	beq.n	8009052 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8009044:	e001      	b.n	800904a <Custom_STM_App_Notification+0x22>
      break;
 8009046:	bf00      	nop
 8009048:	e004      	b.n	8009054 <Custom_STM_App_Notification+0x2c>
      break;
 800904a:	bf00      	nop
 800904c:	e002      	b.n	8009054 <Custom_STM_App_Notification+0x2c>
      break;
 800904e:	bf00      	nop
 8009050:	e000      	b.n	8009054 <Custom_STM_App_Notification+0x2c>
      break;
 8009052:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8009054:	bf00      	nop
}
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <Custom_APP_Notification+0x16>
 8009070:	2b01      	cmp	r3, #1
 8009072:	d002      	beq.n	800907a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8009074:	e002      	b.n	800907c <Custom_APP_Notification+0x1c>
      break;
 8009076:	bf00      	nop
 8009078:	e000      	b.n	800907c <Custom_APP_Notification+0x1c>
      break;
 800907a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800907c:	bf00      	nop
}
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8009088:	b480      	push	{r7}
 800908a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800908c:	bf00      	nop
}
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
	...

08009098 <Custom_Receive_Update_Char>:
 *
 *************************************************************/

/* Message */
void Custom_Receive_Update_Char(void) /* Property Read */
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Receive_UC_1*/

  /* USER CODE END Receive_UC_1*/

  if (updateflag != 0)
 80090a2:	79fb      	ldrb	r3, [r7, #7]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d004      	beq.n	80090b2 <Custom_Receive_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_RECEIVE, (uint8_t *)UpdateCharData);
 80090a8:	4904      	ldr	r1, [pc, #16]	; (80090bc <Custom_Receive_Update_Char+0x24>)
 80090aa:	2001      	movs	r0, #1
 80090ac:	f000 f93e 	bl	800932c <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Receive_UC_Last*/

  /* USER CODE END Receive_UC_Last*/
  return;
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
}
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	2000035c 	.word	0x2000035c

080090c0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b08c      	sub	sp, #48	; 0x30
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80090c8:	2300      	movs	r3, #0
 80090ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3301      	adds	r3, #1
 80090d2:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (event_pckt->evt)
 80090d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2bff      	cmp	r3, #255	; 0xff
 80090da:	d166      	bne.n	80091aa <Custom_STM_Event_Handler+0xea>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	3302      	adds	r3, #2
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f640 4214 	movw	r2, #3092	; 0xc14
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d056      	beq.n	800919e <Custom_STM_Event_Handler+0xde>
 80090f0:	f640 4214 	movw	r2, #3092	; 0xc14
 80090f4:	4293      	cmp	r3, r2
 80090f6:	dc54      	bgt.n	80091a2 <Custom_STM_Event_Handler+0xe2>
 80090f8:	f640 4201 	movw	r2, #3073	; 0xc01
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d003      	beq.n	8009108 <Custom_STM_Event_Handler+0x48>
 8009100:	f640 4213 	movw	r2, #3091	; 0xc13
 8009104:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8009106:	e04f      	b.n	80091a8 <Custom_STM_Event_Handler+0xe8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	3302      	adds	r3, #2
 800910c:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomReceiveHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	885b      	ldrh	r3, [r3, #2]
 8009112:	b29b      	uxth	r3, r3
 8009114:	461a      	mov	r2, r3
 8009116:	4b28      	ldr	r3, [pc, #160]	; (80091b8 <Custom_STM_Event_Handler+0xf8>)
 8009118:	889b      	ldrh	r3, [r3, #4]
 800911a:	3302      	adds	r3, #2
 800911c:	429a      	cmp	r2, r3
 800911e:	d119      	bne.n	8009154 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009120:	2301      	movs	r3, #1
 8009122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	7a1b      	ldrb	r3, [r3, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <Custom_STM_Event_Handler+0x74>
 800912e:	2b01      	cmp	r3, #1
 8009130:	d008      	beq.n	8009144 <Custom_STM_Event_Handler+0x84>
              break;
 8009132:	e033      	b.n	800919c <Custom_STM_Event_Handler+0xdc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_RECEIVE_NOTIFY_DISABLED_EVT;
 8009134:	2302      	movs	r3, #2
 8009136:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8009138:	f107 030c 	add.w	r3, r7, #12
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff ff73 	bl	8009028 <Custom_STM_App_Notification>
                break;
 8009142:	e02b      	b.n	800919c <Custom_STM_Event_Handler+0xdc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_RECEIVE_NOTIFY_ENABLED_EVT;
 8009144:	2301      	movs	r3, #1
 8009146:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8009148:	f107 030c 	add.w	r3, r7, #12
 800914c:	4618      	mov	r0, r3
 800914e:	f7ff ff6b 	bl	8009028 <Custom_STM_App_Notification>
                break;
 8009152:	e023      	b.n	800919c <Custom_STM_Event_Handler+0xdc>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomWriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	885b      	ldrh	r3, [r3, #2]
 8009158:	b29b      	uxth	r3, r3
 800915a:	461a      	mov	r2, r3
 800915c:	4b16      	ldr	r3, [pc, #88]	; (80091b8 <Custom_STM_Event_Handler+0xf8>)
 800915e:	885b      	ldrh	r3, [r3, #2]
 8009160:	3301      	adds	r3, #1
 8009162:	429a      	cmp	r2, r3
 8009164:	d11f      	bne.n	80091a6 <Custom_STM_Event_Handler+0xe6>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009166:	2301      	movs	r3, #1
 8009168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            HAL_UART_Transmit(&huart1, (uint8_t*) "Message Received", 22, 100);
 800916c:	2364      	movs	r3, #100	; 0x64
 800916e:	2216      	movs	r2, #22
 8009170:	4912      	ldr	r1, [pc, #72]	; (80091bc <Custom_STM_Event_Handler+0xfc>)
 8009172:	4813      	ldr	r0, [pc, #76]	; (80091c0 <Custom_STM_Event_Handler+0x100>)
 8009174:	f7fb fb2e 	bl	80047d4 <HAL_UART_Transmit>
            char* message = (char*) attribute_modified->Attr_Data;
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	3308      	adds	r3, #8
 800917c:	61fb      	str	r3, [r7, #28]
            HAL_UART_Transmit(&huart1, message, attribute_modified->Attr_Data_Length, 100);
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	88db      	ldrh	r3, [r3, #6]
 8009182:	b29a      	uxth	r2, r3
 8009184:	2364      	movs	r3, #100	; 0x64
 8009186:	69f9      	ldr	r1, [r7, #28]
 8009188:	480d      	ldr	r0, [pc, #52]	; (80091c0 <Custom_STM_Event_Handler+0x100>)
 800918a:	f7fb fb23 	bl	80047d4 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, (uint8_t*) "\n\r", 5, 100);
 800918e:	2364      	movs	r3, #100	; 0x64
 8009190:	2205      	movs	r2, #5
 8009192:	490c      	ldr	r1, [pc, #48]	; (80091c4 <Custom_STM_Event_Handler+0x104>)
 8009194:	480a      	ldr	r0, [pc, #40]	; (80091c0 <Custom_STM_Event_Handler+0x100>)
 8009196:	f7fb fb1d 	bl	80047d4 <HAL_UART_Transmit>
          break;
 800919a:	e004      	b.n	80091a6 <Custom_STM_Event_Handler+0xe6>
 800919c:	e003      	b.n	80091a6 <Custom_STM_Event_Handler+0xe6>
          break;
 800919e:	bf00      	nop
 80091a0:	e004      	b.n	80091ac <Custom_STM_Event_Handler+0xec>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80091a2:	bf00      	nop
 80091a4:	e002      	b.n	80091ac <Custom_STM_Event_Handler+0xec>
          break;
 80091a6:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80091a8:	e000      	b.n	80091ac <Custom_STM_Event_Handler+0xec>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80091aa:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80091ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 80091b0:	4618      	mov	r0, r3
 80091b2:	3730      	adds	r7, #48	; 0x30
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20000454 	.word	0x20000454
 80091bc:	08009e4c 	.word	0x08009e4c
 80091c0:	20000194 	.word	0x20000194
 80091c4:	08009e60 	.word	0x08009e60

080091c8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08c      	sub	sp, #48	; 0x30
 80091cc:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80091ce:	2392      	movs	r3, #146	; 0x92
 80091d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80091d2:	4850      	ldr	r0, [pc, #320]	; (8009314 <SVCCTL_InitCustomSvc+0x14c>)
 80091d4:	f7fe fcaa 	bl	8007b2c <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 80091d8:	2306      	movs	r3, #6
 80091da:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MESSAGE_UUID(uuid.Char_UUID_128);
 80091dc:	238f      	movs	r3, #143	; 0x8f
 80091de:	713b      	strb	r3, [r7, #4]
 80091e0:	23e5      	movs	r3, #229	; 0xe5
 80091e2:	717b      	strb	r3, [r7, #5]
 80091e4:	23b3      	movs	r3, #179	; 0xb3
 80091e6:	71bb      	strb	r3, [r7, #6]
 80091e8:	23d5      	movs	r3, #213	; 0xd5
 80091ea:	71fb      	strb	r3, [r7, #7]
 80091ec:	232e      	movs	r3, #46	; 0x2e
 80091ee:	723b      	strb	r3, [r7, #8]
 80091f0:	237f      	movs	r3, #127	; 0x7f
 80091f2:	727b      	strb	r3, [r7, #9]
 80091f4:	234a      	movs	r3, #74	; 0x4a
 80091f6:	72bb      	strb	r3, [r7, #10]
 80091f8:	2398      	movs	r3, #152	; 0x98
 80091fa:	72fb      	strb	r3, [r7, #11]
 80091fc:	232a      	movs	r3, #42	; 0x2a
 80091fe:	733b      	strb	r3, [r7, #12]
 8009200:	2348      	movs	r3, #72	; 0x48
 8009202:	737b      	strb	r3, [r7, #13]
 8009204:	237a      	movs	r3, #122	; 0x7a
 8009206:	73bb      	strb	r3, [r7, #14]
 8009208:	23cc      	movs	r3, #204	; 0xcc
 800920a:	73fb      	strb	r3, [r7, #15]
 800920c:	2300      	movs	r3, #0
 800920e:	743b      	strb	r3, [r7, #16]
 8009210:	2300      	movs	r3, #0
 8009212:	747b      	strb	r3, [r7, #17]
 8009214:	2300      	movs	r3, #0
 8009216:	74bb      	strb	r3, [r7, #18]
 8009218:	2300      	movs	r3, #0
 800921a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800921c:	7dbb      	ldrb	r3, [r7, #22]
 800921e:	1d39      	adds	r1, r7, #4
 8009220:	4a3d      	ldr	r2, [pc, #244]	; (8009318 <SVCCTL_InitCustomSvc+0x150>)
 8009222:	9200      	str	r2, [sp, #0]
 8009224:	2201      	movs	r2, #1
 8009226:	2002      	movs	r0, #2
 8009228:	f7fd ff48 	bl	80070bc <aci_gatt_add_service>
 800922c:	4603      	mov	r3, r0
 800922e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Write
   */
  COPY_WRITE_UUID(uuid.Char_UUID_128);
 8009230:	2319      	movs	r3, #25
 8009232:	713b      	strb	r3, [r7, #4]
 8009234:	23ed      	movs	r3, #237	; 0xed
 8009236:	717b      	strb	r3, [r7, #5]
 8009238:	2382      	movs	r3, #130	; 0x82
 800923a:	71bb      	strb	r3, [r7, #6]
 800923c:	23ae      	movs	r3, #174	; 0xae
 800923e:	71fb      	strb	r3, [r7, #7]
 8009240:	23ed      	movs	r3, #237	; 0xed
 8009242:	723b      	strb	r3, [r7, #8]
 8009244:	2321      	movs	r3, #33	; 0x21
 8009246:	727b      	strb	r3, [r7, #9]
 8009248:	234c      	movs	r3, #76	; 0x4c
 800924a:	72bb      	strb	r3, [r7, #10]
 800924c:	239d      	movs	r3, #157	; 0x9d
 800924e:	72fb      	strb	r3, [r7, #11]
 8009250:	2341      	movs	r3, #65	; 0x41
 8009252:	733b      	strb	r3, [r7, #12]
 8009254:	2345      	movs	r3, #69	; 0x45
 8009256:	737b      	strb	r3, [r7, #13]
 8009258:	2322      	movs	r3, #34	; 0x22
 800925a:	73bb      	strb	r3, [r7, #14]
 800925c:	238e      	movs	r3, #142	; 0x8e
 800925e:	73fb      	strb	r3, [r7, #15]
 8009260:	2300      	movs	r3, #0
 8009262:	743b      	strb	r3, [r7, #16]
 8009264:	2300      	movs	r3, #0
 8009266:	747b      	strb	r3, [r7, #17]
 8009268:	2300      	movs	r3, #0
 800926a:	74bb      	strb	r3, [r7, #18]
 800926c:	2300      	movs	r3, #0
 800926e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMessageHdle,
 8009270:	4b29      	ldr	r3, [pc, #164]	; (8009318 <SVCCTL_InitCustomSvc+0x150>)
 8009272:	8818      	ldrh	r0, [r3, #0]
 8009274:	4b29      	ldr	r3, [pc, #164]	; (800931c <SVCCTL_InitCustomSvc+0x154>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	1d3a      	adds	r2, r7, #4
 800927c:	4928      	ldr	r1, [pc, #160]	; (8009320 <SVCCTL_InitCustomSvc+0x158>)
 800927e:	9105      	str	r1, [sp, #20]
 8009280:	2101      	movs	r1, #1
 8009282:	9104      	str	r1, [sp, #16]
 8009284:	2110      	movs	r1, #16
 8009286:	9103      	str	r1, [sp, #12]
 8009288:	2101      	movs	r1, #1
 800928a:	9102      	str	r1, [sp, #8]
 800928c:	2100      	movs	r1, #0
 800928e:	9101      	str	r1, [sp, #4]
 8009290:	2108      	movs	r1, #8
 8009292:	9100      	str	r1, [sp, #0]
 8009294:	2102      	movs	r1, #2
 8009296:	f7fd ffe7 	bl	8007268 <aci_gatt_add_char>
 800929a:	4603      	mov	r3, r0
 800929c:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  Receive
   */
  COPY_RECEIVE_UUID(uuid.Char_UUID_128);
 800929e:	2319      	movs	r3, #25
 80092a0:	713b      	strb	r3, [r7, #4]
 80092a2:	23ed      	movs	r3, #237	; 0xed
 80092a4:	717b      	strb	r3, [r7, #5]
 80092a6:	2382      	movs	r3, #130	; 0x82
 80092a8:	71bb      	strb	r3, [r7, #6]
 80092aa:	23ae      	movs	r3, #174	; 0xae
 80092ac:	71fb      	strb	r3, [r7, #7]
 80092ae:	23ed      	movs	r3, #237	; 0xed
 80092b0:	723b      	strb	r3, [r7, #8]
 80092b2:	2321      	movs	r3, #33	; 0x21
 80092b4:	727b      	strb	r3, [r7, #9]
 80092b6:	234c      	movs	r3, #76	; 0x4c
 80092b8:	72bb      	strb	r3, [r7, #10]
 80092ba:	239d      	movs	r3, #157	; 0x9d
 80092bc:	72fb      	strb	r3, [r7, #11]
 80092be:	2341      	movs	r3, #65	; 0x41
 80092c0:	733b      	strb	r3, [r7, #12]
 80092c2:	2345      	movs	r3, #69	; 0x45
 80092c4:	737b      	strb	r3, [r7, #13]
 80092c6:	2322      	movs	r3, #34	; 0x22
 80092c8:	73bb      	strb	r3, [r7, #14]
 80092ca:	238e      	movs	r3, #142	; 0x8e
 80092cc:	73fb      	strb	r3, [r7, #15]
 80092ce:	2301      	movs	r3, #1
 80092d0:	743b      	strb	r3, [r7, #16]
 80092d2:	2300      	movs	r3, #0
 80092d4:	747b      	strb	r3, [r7, #17]
 80092d6:	2300      	movs	r3, #0
 80092d8:	74bb      	strb	r3, [r7, #18]
 80092da:	2300      	movs	r3, #0
 80092dc:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMessageHdle,
 80092de:	4b0e      	ldr	r3, [pc, #56]	; (8009318 <SVCCTL_InitCustomSvc+0x150>)
 80092e0:	8818      	ldrh	r0, [r3, #0]
 80092e2:	4b10      	ldr	r3, [pc, #64]	; (8009324 <SVCCTL_InitCustomSvc+0x15c>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	1d3a      	adds	r2, r7, #4
 80092ea:	490f      	ldr	r1, [pc, #60]	; (8009328 <SVCCTL_InitCustomSvc+0x160>)
 80092ec:	9105      	str	r1, [sp, #20]
 80092ee:	2101      	movs	r1, #1
 80092f0:	9104      	str	r1, [sp, #16]
 80092f2:	2110      	movs	r1, #16
 80092f4:	9103      	str	r1, [sp, #12]
 80092f6:	2107      	movs	r1, #7
 80092f8:	9102      	str	r1, [sp, #8]
 80092fa:	2100      	movs	r1, #0
 80092fc:	9101      	str	r1, [sp, #4]
 80092fe:	2110      	movs	r1, #16
 8009300:	9100      	str	r1, [sp, #0]
 8009302:	2102      	movs	r1, #2
 8009304:	f7fd ffb0 	bl	8007268 <aci_gatt_add_char>
 8009308:	4603      	mov	r3, r0
 800930a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800930c:	bf00      	nop
}
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	080090c1 	.word	0x080090c1
 8009318:	20000454 	.word	0x20000454
 800931c:	20000021 	.word	0x20000021
 8009320:	20000456 	.word	0x20000456
 8009324:	20000022 	.word	0x20000022
 8009328:	20000458 	.word	0x20000458

0800932c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af02      	add	r7, sp, #8
 8009332:	4603      	mov	r3, r0
 8009334:	6039      	str	r1, [r7, #0]
 8009336:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009338:	2392      	movs	r3, #146	; 0x92
 800933a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d002      	beq.n	8009348 <Custom_STM_App_Update_Char+0x1c>
 8009342:	2b01      	cmp	r3, #1
 8009344:	d00f      	beq.n	8009366 <Custom_STM_App_Update_Char+0x3a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 8009346:	e01d      	b.n	8009384 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomMessageHdle,
 8009348:	4b11      	ldr	r3, [pc, #68]	; (8009390 <Custom_STM_App_Update_Char+0x64>)
 800934a:	8818      	ldrh	r0, [r3, #0]
 800934c:	4b10      	ldr	r3, [pc, #64]	; (8009390 <Custom_STM_App_Update_Char+0x64>)
 800934e:	8859      	ldrh	r1, [r3, #2]
 8009350:	4b10      	ldr	r3, [pc, #64]	; (8009394 <Custom_STM_App_Update_Char+0x68>)
 8009352:	781a      	ldrb	r2, [r3, #0]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	4613      	mov	r3, r2
 800935a:	2200      	movs	r2, #0
 800935c:	f7fe f88c 	bl	8007478 <aci_gatt_update_char_value>
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]
      break;
 8009364:	e00e      	b.n	8009384 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomMessageHdle,
 8009366:	4b0a      	ldr	r3, [pc, #40]	; (8009390 <Custom_STM_App_Update_Char+0x64>)
 8009368:	8818      	ldrh	r0, [r3, #0]
 800936a:	4b09      	ldr	r3, [pc, #36]	; (8009390 <Custom_STM_App_Update_Char+0x64>)
 800936c:	8899      	ldrh	r1, [r3, #4]
 800936e:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <Custom_STM_App_Update_Char+0x6c>)
 8009370:	781a      	ldrb	r2, [r3, #0]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	4613      	mov	r3, r2
 8009378:	2200      	movs	r2, #0
 800937a:	f7fe f87d 	bl	8007478 <aci_gatt_update_char_value>
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]
      break;
 8009382:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8009384:	7bfb      	ldrb	r3, [r7, #15]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	20000454 	.word	0x20000454
 8009394:	20000021 	.word	0x20000021
 8009398:	20000022 	.word	0x20000022

0800939c <LL_PWR_EnableBootC2>:
{
 800939c:	b480      	push	{r7}
 800939e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80093a0:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <LL_PWR_EnableBootC2+0x1c>)
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	4a04      	ldr	r2, [pc, #16]	; (80093b8 <LL_PWR_EnableBootC2+0x1c>)
 80093a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093aa:	60d3      	str	r3, [r2, #12]
}
 80093ac:	bf00      	nop
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	58000400 	.word	0x58000400

080093bc <LL_C2_EXTI_EnableEvent_32_63>:
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80093c4:	4b06      	ldr	r3, [pc, #24]	; (80093e0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80093c6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80093ca:	4905      	ldr	r1, [pc, #20]	; (80093e0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	58000800 	.word	0x58000800

080093e4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80093ee:	6a1a      	ldr	r2, [r3, #32]
 80093f0:	4904      	ldr	r1, [pc, #16]	; (8009404 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	620b      	str	r3, [r1, #32]
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr
 8009404:	58000800 	.word	0x58000800

08009408 <LL_AHB3_GRP1_EnableClock>:
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009414:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4313      	orrs	r3, r2
 800941e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4013      	ands	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800942c:	68fb      	ldr	r3, [r7, #12]
}
 800942e:	bf00      	nop
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009446:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800944a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4313      	orrs	r3, r2
 8009452:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800945a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4013      	ands	r3, r2
 8009462:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009464:	68fb      	ldr	r3, [r7, #12]
}
 8009466:	bf00      	nop
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8009472:	b480      	push	{r7}
 8009474:	b083      	sub	sp, #12
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	601a      	str	r2, [r3, #0]
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f043 0201 	orr.w	r2, r3, #1
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]
}
 80094a6:	bf00      	nop
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	041b      	lsls	r3, r3, #16
 80094c4:	43db      	mvns	r3, r3
 80094c6:	401a      	ands	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	605a      	str	r2, [r3, #4]
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	041b      	lsls	r3, r3, #16
 80094ea:	431a      	orrs	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	605a      	str	r2, [r3, #4]
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	43db      	mvns	r3, r3
 800950e:	401a      	ands	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	605a      	str	r2, [r3, #4]
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	609a      	str	r2, [r3, #8]
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	041a      	lsls	r2, r3, #16
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	609a      	str	r2, [r3, #8]
}
 800954e:	bf00      	nop
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800955a:	b480      	push	{r7}
 800955c:	b083      	sub	sp, #12
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	68da      	ldr	r2, [r3, #12]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	4013      	ands	r3, r2
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	429a      	cmp	r2, r3
 8009570:	d101      	bne.n	8009576 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009572:	2301      	movs	r3, #1
 8009574:	e000      	b.n	8009578 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	69da      	ldr	r2, [r3, #28]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	4013      	ands	r3, r2
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	429a      	cmp	r2, r3
 800959a:	d101      	bne.n	80095a0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800959c:	2301      	movs	r3, #1
 800959e:	e000      	b.n	80095a2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
	...

080095b0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80095b4:	2102      	movs	r1, #2
 80095b6:	4818      	ldr	r0, [pc, #96]	; (8009618 <HW_IPCC_Rx_Handler+0x68>)
 80095b8:	f7ff ffe4 	bl	8009584 <LL_C2_IPCC_IsActiveFlag_CHx>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d008      	beq.n	80095d4 <HW_IPCC_Rx_Handler+0x24>
 80095c2:	4b15      	ldr	r3, [pc, #84]	; (8009618 <HW_IPCC_Rx_Handler+0x68>)
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d102      	bne.n	80095d4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80095ce:	f000 f8d5 	bl	800977c <HW_IPCC_SYS_EvtHandler>
 80095d2:	e01e      	b.n	8009612 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80095d4:	2101      	movs	r1, #1
 80095d6:	4810      	ldr	r0, [pc, #64]	; (8009618 <HW_IPCC_Rx_Handler+0x68>)
 80095d8:	f7ff ffd4 	bl	8009584 <LL_C2_IPCC_IsActiveFlag_CHx>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d008      	beq.n	80095f4 <HW_IPCC_Rx_Handler+0x44>
 80095e2:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <HW_IPCC_Rx_Handler+0x68>)
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d102      	bne.n	80095f4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80095ee:	f000 f889 	bl	8009704 <HW_IPCC_BLE_EvtHandler>
 80095f2:	e00e      	b.n	8009612 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80095f4:	2108      	movs	r1, #8
 80095f6:	4808      	ldr	r0, [pc, #32]	; (8009618 <HW_IPCC_Rx_Handler+0x68>)
 80095f8:	f7ff ffc4 	bl	8009584 <LL_C2_IPCC_IsActiveFlag_CHx>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d008      	beq.n	8009614 <HW_IPCC_Rx_Handler+0x64>
 8009602:	4b05      	ldr	r3, [pc, #20]	; (8009618 <HW_IPCC_Rx_Handler+0x68>)
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	f003 0308 	and.w	r3, r3, #8
 800960a:	2b00      	cmp	r3, #0
 800960c:	d102      	bne.n	8009614 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800960e:	f000 f901 	bl	8009814 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009612:	bf00      	nop
 8009614:	bf00      	nop
}
 8009616:	bd80      	pop	{r7, pc}
 8009618:	58000c00 	.word	0x58000c00

0800961c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009620:	2102      	movs	r1, #2
 8009622:	4818      	ldr	r0, [pc, #96]	; (8009684 <HW_IPCC_Tx_Handler+0x68>)
 8009624:	f7ff ff99 	bl	800955a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d108      	bne.n	8009640 <HW_IPCC_Tx_Handler+0x24>
 800962e:	4b15      	ldr	r3, [pc, #84]	; (8009684 <HW_IPCC_Tx_Handler+0x68>)
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d102      	bne.n	8009640 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800963a:	f000 f893 	bl	8009764 <HW_IPCC_SYS_CmdEvtHandler>
 800963e:	e01e      	b.n	800967e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009640:	2108      	movs	r1, #8
 8009642:	4810      	ldr	r0, [pc, #64]	; (8009684 <HW_IPCC_Tx_Handler+0x68>)
 8009644:	f7ff ff89 	bl	800955a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d108      	bne.n	8009660 <HW_IPCC_Tx_Handler+0x44>
 800964e:	4b0d      	ldr	r3, [pc, #52]	; (8009684 <HW_IPCC_Tx_Handler+0x68>)
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d102      	bne.n	8009660 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800965a:	f000 f8bd 	bl	80097d8 <HW_IPCC_MM_FreeBufHandler>
 800965e:	e00e      	b.n	800967e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009660:	2120      	movs	r1, #32
 8009662:	4808      	ldr	r0, [pc, #32]	; (8009684 <HW_IPCC_Tx_Handler+0x68>)
 8009664:	f7ff ff79 	bl	800955a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d108      	bne.n	8009680 <HW_IPCC_Tx_Handler+0x64>
 800966e:	4b05      	ldr	r3, [pc, #20]	; (8009684 <HW_IPCC_Tx_Handler+0x68>)
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009676:	2b00      	cmp	r3, #0
 8009678:	d102      	bne.n	8009680 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800967a:	f000 f84f 	bl	800971c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800967e:	bf00      	nop
 8009680:	bf00      	nop
}
 8009682:	bd80      	pop	{r7, pc}
 8009684:	58000c00 	.word	0x58000c00

08009688 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800968c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009690:	f7ff fed3 	bl	800943a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009694:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009698:	f7ff fea4 	bl	80093e4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800969c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80096a0:	f7ff fe8c 	bl	80093bc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80096a4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80096a6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80096a8:	f7ff fe78 	bl	800939c <LL_PWR_EnableBootC2>

  return;
 80096ac:	bf00      	nop
}
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80096b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80096b8:	f7ff fea6 	bl	8009408 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80096bc:	4806      	ldr	r0, [pc, #24]	; (80096d8 <HW_IPCC_Init+0x28>)
 80096be:	f7ff fee8 	bl	8009492 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80096c2:	4805      	ldr	r0, [pc, #20]	; (80096d8 <HW_IPCC_Init+0x28>)
 80096c4:	f7ff fed5 	bl	8009472 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80096c8:	202c      	movs	r0, #44	; 0x2c
 80096ca:	f7f8 fd24 	bl	8002116 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80096ce:	202d      	movs	r0, #45	; 0x2d
 80096d0:	f7f8 fd21 	bl	8002116 <HAL_NVIC_EnableIRQ>

  return;
 80096d4:	bf00      	nop
}
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	58000c00 	.word	0x58000c00

080096dc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80096e0:	2101      	movs	r1, #1
 80096e2:	4802      	ldr	r0, [pc, #8]	; (80096ec <HW_IPCC_BLE_Init+0x10>)
 80096e4:	f7ff ff0a 	bl	80094fc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80096e8:	bf00      	nop
}
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	58000c00 	.word	0x58000c00

080096f0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80096f4:	2101      	movs	r1, #1
 80096f6:	4802      	ldr	r0, [pc, #8]	; (8009700 <HW_IPCC_BLE_SendCmd+0x10>)
 80096f8:	f7ff ff20 	bl	800953c <LL_C1_IPCC_SetFlag_CHx>

  return;
 80096fc:	bf00      	nop
}
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	58000c00 	.word	0x58000c00

08009704 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009708:	f7fe fed4 	bl	80084b4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800970c:	2101      	movs	r1, #1
 800970e:	4802      	ldr	r0, [pc, #8]	; (8009718 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009710:	f7ff ff06 	bl	8009520 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009714:	bf00      	nop
}
 8009716:	bd80      	pop	{r7, pc}
 8009718:	58000c00 	.word	0x58000c00

0800971c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009720:	2120      	movs	r1, #32
 8009722:	4803      	ldr	r0, [pc, #12]	; (8009730 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009724:	f7ff fed8 	bl	80094d8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009728:	f7fe fef4 	bl	8008514 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800972c:	bf00      	nop
}
 800972e:	bd80      	pop	{r7, pc}
 8009730:	58000c00 	.word	0x58000c00

08009734 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009738:	2102      	movs	r1, #2
 800973a:	4802      	ldr	r0, [pc, #8]	; (8009744 <HW_IPCC_SYS_Init+0x10>)
 800973c:	f7ff fede 	bl	80094fc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009740:	bf00      	nop
}
 8009742:	bd80      	pop	{r7, pc}
 8009744:	58000c00 	.word	0x58000c00

08009748 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800974c:	2102      	movs	r1, #2
 800974e:	4804      	ldr	r0, [pc, #16]	; (8009760 <HW_IPCC_SYS_SendCmd+0x18>)
 8009750:	f7ff fef4 	bl	800953c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009754:	2102      	movs	r1, #2
 8009756:	4802      	ldr	r0, [pc, #8]	; (8009760 <HW_IPCC_SYS_SendCmd+0x18>)
 8009758:	f7ff feab 	bl	80094b2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800975c:	bf00      	nop
}
 800975e:	bd80      	pop	{r7, pc}
 8009760:	58000c00 	.word	0x58000c00

08009764 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009768:	2102      	movs	r1, #2
 800976a:	4803      	ldr	r0, [pc, #12]	; (8009778 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800976c:	f7ff feb4 	bl	80094d8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009770:	f7fe ff20 	bl	80085b4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009774:	bf00      	nop
}
 8009776:	bd80      	pop	{r7, pc}
 8009778:	58000c00 	.word	0x58000c00

0800977c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009780:	f7fe ff2e 	bl	80085e0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009784:	2102      	movs	r1, #2
 8009786:	4802      	ldr	r0, [pc, #8]	; (8009790 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009788:	f7ff feca 	bl	8009520 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800978c:	bf00      	nop
}
 800978e:	bd80      	pop	{r7, pc}
 8009790:	58000c00 	.word	0x58000c00

08009794 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800979c:	2108      	movs	r1, #8
 800979e:	480c      	ldr	r0, [pc, #48]	; (80097d0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80097a0:	f7ff fedb 	bl	800955a <LL_C1_IPCC_IsActiveFlag_CHx>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d007      	beq.n	80097ba <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80097aa:	4a0a      	ldr	r2, [pc, #40]	; (80097d4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80097b0:	2108      	movs	r1, #8
 80097b2:	4807      	ldr	r0, [pc, #28]	; (80097d0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80097b4:	f7ff fe7d 	bl	80094b2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80097b8:	e006      	b.n	80097c8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80097be:	2108      	movs	r1, #8
 80097c0:	4803      	ldr	r0, [pc, #12]	; (80097d0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80097c2:	f7ff febb 	bl	800953c <LL_C1_IPCC_SetFlag_CHx>
  return;
 80097c6:	bf00      	nop
}
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	58000c00 	.word	0x58000c00
 80097d4:	2000045c 	.word	0x2000045c

080097d8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80097dc:	2108      	movs	r1, #8
 80097de:	4806      	ldr	r0, [pc, #24]	; (80097f8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80097e0:	f7ff fe7a 	bl	80094d8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <HW_IPCC_MM_FreeBufHandler+0x24>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80097ea:	2108      	movs	r1, #8
 80097ec:	4802      	ldr	r0, [pc, #8]	; (80097f8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80097ee:	f7ff fea5 	bl	800953c <LL_C1_IPCC_SetFlag_CHx>

  return;
 80097f2:	bf00      	nop
}
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	58000c00 	.word	0x58000c00
 80097fc:	2000045c 	.word	0x2000045c

08009800 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009804:	2108      	movs	r1, #8
 8009806:	4802      	ldr	r0, [pc, #8]	; (8009810 <HW_IPCC_TRACES_Init+0x10>)
 8009808:	f7ff fe78 	bl	80094fc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800980c:	bf00      	nop
}
 800980e:	bd80      	pop	{r7, pc}
 8009810:	58000c00 	.word	0x58000c00

08009814 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009818:	f7fe ff8a 	bl	8008730 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800981c:	2108      	movs	r1, #8
 800981e:	4802      	ldr	r0, [pc, #8]	; (8009828 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009820:	f7ff fe7e 	bl	8009520 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009824:	bf00      	nop
}
 8009826:	bd80      	pop	{r7, pc}
 8009828:	58000c00 	.word	0x58000c00

0800982c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009830:	4b05      	ldr	r3, [pc, #20]	; (8009848 <UTIL_LPM_Init+0x1c>)
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009836:	4b05      	ldr	r3, [pc, #20]	; (800984c <UTIL_LPM_Init+0x20>)
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800983c:	bf00      	nop
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	20000460 	.word	0x20000460
 800984c:	20000464 	.word	0x20000464

08009850 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800985c:	f3ef 8310 	mrs	r3, PRIMASK
 8009860:	613b      	str	r3, [r7, #16]
  return(result);
 8009862:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009864:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009866:	b672      	cpsid	i
}
 8009868:	bf00      	nop
  
  switch(state)
 800986a:	78fb      	ldrb	r3, [r7, #3]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d008      	beq.n	8009882 <UTIL_LPM_SetOffMode+0x32>
 8009870:	2b01      	cmp	r3, #1
 8009872:	d10e      	bne.n	8009892 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009874:	4b0d      	ldr	r3, [pc, #52]	; (80098ac <UTIL_LPM_SetOffMode+0x5c>)
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4313      	orrs	r3, r2
 800987c:	4a0b      	ldr	r2, [pc, #44]	; (80098ac <UTIL_LPM_SetOffMode+0x5c>)
 800987e:	6013      	str	r3, [r2, #0]
      break;
 8009880:	e008      	b.n	8009894 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	43da      	mvns	r2, r3
 8009886:	4b09      	ldr	r3, [pc, #36]	; (80098ac <UTIL_LPM_SetOffMode+0x5c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4013      	ands	r3, r2
 800988c:	4a07      	ldr	r2, [pc, #28]	; (80098ac <UTIL_LPM_SetOffMode+0x5c>)
 800988e:	6013      	str	r3, [r2, #0]
      break;
 8009890:	e000      	b.n	8009894 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009892:	bf00      	nop
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f383 8810 	msr	PRIMASK, r3
}
 800989e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80098a0:	bf00      	nop
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	20000464 	.word	0x20000464

080098b0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b090      	sub	sp, #64	; 0x40
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80098b8:	4b73      	ldr	r3, [pc, #460]	; (8009a88 <UTIL_SEQ_Run+0x1d8>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80098be:	4b72      	ldr	r3, [pc, #456]	; (8009a88 <UTIL_SEQ_Run+0x1d8>)
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4013      	ands	r3, r2
 80098c6:	4a70      	ldr	r2, [pc, #448]	; (8009a88 <UTIL_SEQ_Run+0x1d8>)
 80098c8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80098ca:	4b70      	ldr	r3, [pc, #448]	; (8009a8c <UTIL_SEQ_Run+0x1dc>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80098d0:	4b6f      	ldr	r3, [pc, #444]	; (8009a90 <UTIL_SEQ_Run+0x1e0>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80098d6:	4b6f      	ldr	r3, [pc, #444]	; (8009a94 <UTIL_SEQ_Run+0x1e4>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 80098dc:	4b6e      	ldr	r3, [pc, #440]	; (8009a98 <UTIL_SEQ_Run+0x1e8>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80098e2:	e08d      	b.n	8009a00 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80098e4:	2300      	movs	r3, #0
 80098e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80098e8:	e002      	b.n	80098f0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80098ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ec:	3301      	adds	r3, #1
 80098ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80098f0:	4a6a      	ldr	r2, [pc, #424]	; (8009a9c <UTIL_SEQ_Run+0x1ec>)
 80098f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80098f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fa:	401a      	ands	r2, r3
 80098fc:	4b62      	ldr	r3, [pc, #392]	; (8009a88 <UTIL_SEQ_Run+0x1d8>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4013      	ands	r3, r2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0f1      	beq.n	80098ea <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009906:	4a65      	ldr	r2, [pc, #404]	; (8009a9c <UTIL_SEQ_Run+0x1ec>)
 8009908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800990a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	401a      	ands	r2, r3
 8009912:	4b5d      	ldr	r3, [pc, #372]	; (8009a88 <UTIL_SEQ_Run+0x1d8>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4013      	ands	r3, r2
 8009918:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800991a:	4a60      	ldr	r2, [pc, #384]	; (8009a9c <UTIL_SEQ_Run+0x1ec>)
 800991c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	4413      	add	r3, r2
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	4013      	ands	r3, r2
 8009928:	2b00      	cmp	r3, #0
 800992a:	d106      	bne.n	800993a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800992c:	4a5b      	ldr	r2, [pc, #364]	; (8009a9c <UTIL_SEQ_Run+0x1ec>)
 800992e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009930:	00db      	lsls	r3, r3, #3
 8009932:	4413      	add	r3, r2
 8009934:	f04f 32ff 	mov.w	r2, #4294967295
 8009938:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800993a:	4a58      	ldr	r2, [pc, #352]	; (8009a9c <UTIL_SEQ_Run+0x1ec>)
 800993c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	4413      	add	r3, r2
 8009942:	685a      	ldr	r2, [r3, #4]
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	4013      	ands	r3, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f000 f9b3 	bl	8009cb4 <SEQ_BitPosition>
 800994e:	4603      	mov	r3, r0
 8009950:	461a      	mov	r2, r3
 8009952:	4b53      	ldr	r3, [pc, #332]	; (8009aa0 <UTIL_SEQ_Run+0x1f0>)
 8009954:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009956:	4a51      	ldr	r2, [pc, #324]	; (8009a9c <UTIL_SEQ_Run+0x1ec>)
 8009958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	4413      	add	r3, r2
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	4b4f      	ldr	r3, [pc, #316]	; (8009aa0 <UTIL_SEQ_Run+0x1f0>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2101      	movs	r1, #1
 8009966:	fa01 f303 	lsl.w	r3, r1, r3
 800996a:	43db      	mvns	r3, r3
 800996c:	401a      	ands	r2, r3
 800996e:	494b      	ldr	r1, [pc, #300]	; (8009a9c <UTIL_SEQ_Run+0x1ec>)
 8009970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	440b      	add	r3, r1
 8009976:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009978:	f3ef 8310 	mrs	r3, PRIMASK
 800997c:	61bb      	str	r3, [r7, #24]
  return(result);
 800997e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009980:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009982:	b672      	cpsid	i
}
 8009984:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009986:	4b46      	ldr	r3, [pc, #280]	; (8009aa0 <UTIL_SEQ_Run+0x1f0>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2201      	movs	r2, #1
 800998c:	fa02 f303 	lsl.w	r3, r2, r3
 8009990:	43da      	mvns	r2, r3
 8009992:	4b3e      	ldr	r3, [pc, #248]	; (8009a8c <UTIL_SEQ_Run+0x1dc>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4013      	ands	r3, r2
 8009998:	4a3c      	ldr	r2, [pc, #240]	; (8009a8c <UTIL_SEQ_Run+0x1dc>)
 800999a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800999c:	2302      	movs	r3, #2
 800999e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099a0:	e013      	b.n	80099ca <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80099a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a4:	3b01      	subs	r3, #1
 80099a6:	4a3d      	ldr	r2, [pc, #244]	; (8009a9c <UTIL_SEQ_Run+0x1ec>)
 80099a8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80099ac:	4b3c      	ldr	r3, [pc, #240]	; (8009aa0 <UTIL_SEQ_Run+0x1f0>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2201      	movs	r2, #1
 80099b2:	fa02 f303 	lsl.w	r3, r2, r3
 80099b6:	43da      	mvns	r2, r3
 80099b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ba:	3b01      	subs	r3, #1
 80099bc:	400a      	ands	r2, r1
 80099be:	4937      	ldr	r1, [pc, #220]	; (8009a9c <UTIL_SEQ_Run+0x1ec>)
 80099c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80099c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c6:	3b01      	subs	r3, #1
 80099c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1e8      	bne.n	80099a2 <UTIL_SEQ_Run+0xf2>
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f383 8810 	msr	PRIMASK, r3
}
 80099da:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80099dc:	4b30      	ldr	r3, [pc, #192]	; (8009aa0 <UTIL_SEQ_Run+0x1f0>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a30      	ldr	r2, [pc, #192]	; (8009aa4 <UTIL_SEQ_Run+0x1f4>)
 80099e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099e6:	4798      	blx	r3

    local_taskset = TaskSet;
 80099e8:	4b28      	ldr	r3, [pc, #160]	; (8009a8c <UTIL_SEQ_Run+0x1dc>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80099ee:	4b28      	ldr	r3, [pc, #160]	; (8009a90 <UTIL_SEQ_Run+0x1e0>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80099f4:	4b27      	ldr	r3, [pc, #156]	; (8009a94 <UTIL_SEQ_Run+0x1e4>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 80099fa:	4b27      	ldr	r3, [pc, #156]	; (8009a98 <UTIL_SEQ_Run+0x1e8>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	401a      	ands	r2, r3
 8009a06:	4b20      	ldr	r3, [pc, #128]	; (8009a88 <UTIL_SEQ_Run+0x1d8>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <UTIL_SEQ_Run+0x16c>
 8009a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	4013      	ands	r3, r2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f43f af64 	beq.w	80098e4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009a1c:	4b20      	ldr	r3, [pc, #128]	; (8009aa0 <UTIL_SEQ_Run+0x1f0>)
 8009a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a22:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009a24:	f000 f938 	bl	8009c98 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a28:	f3ef 8310 	mrs	r3, PRIMASK
 8009a2c:	613b      	str	r3, [r7, #16]
  return(result);
 8009a2e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009a30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a32:	b672      	cpsid	i
}
 8009a34:	bf00      	nop
  local_taskset = TaskSet;
 8009a36:	4b15      	ldr	r3, [pc, #84]	; (8009a8c <UTIL_SEQ_Run+0x1dc>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009a3c:	4b14      	ldr	r3, [pc, #80]	; (8009a90 <UTIL_SEQ_Run+0x1e0>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009a42:	4b14      	ldr	r3, [pc, #80]	; (8009a94 <UTIL_SEQ_Run+0x1e4>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4c:	401a      	ands	r2, r3
 8009a4e:	4b0e      	ldr	r3, [pc, #56]	; (8009a88 <UTIL_SEQ_Run+0x1d8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4013      	ands	r3, r2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d107      	bne.n	8009a68 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009a58:	4b0f      	ldr	r3, [pc, #60]	; (8009a98 <UTIL_SEQ_Run+0x1e8>)
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a5e:	4013      	ands	r3, r2
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009a64:	f7f6 ff17 	bl	8000896 <UTIL_SEQ_Idle>
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f383 8810 	msr	PRIMASK, r3
}
 8009a72:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009a74:	f000 f917 	bl	8009ca6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009a78:	4a03      	ldr	r2, [pc, #12]	; (8009a88 <UTIL_SEQ_Run+0x1d8>)
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	6013      	str	r3, [r2, #0]

  return;
 8009a7e:	bf00      	nop
}
 8009a80:	3740      	adds	r7, #64	; 0x40
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	20000028 	.word	0x20000028
 8009a8c:	20000468 	.word	0x20000468
 8009a90:	2000046c 	.word	0x2000046c
 8009a94:	20000024 	.word	0x20000024
 8009a98:	20000470 	.word	0x20000470
 8009a9c:	200004f8 	.word	0x200004f8
 8009aa0:	20000474 	.word	0x20000474
 8009aa4:	20000478 	.word	0x20000478

08009aa8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b088      	sub	sp, #32
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ab8:	617b      	str	r3, [r7, #20]
  return(result);
 8009aba:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009abe:	b672      	cpsid	i
}
 8009ac0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f000 f8f6 	bl	8009cb4 <SEQ_BitPosition>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	4619      	mov	r1, r3
 8009acc:	4a06      	ldr	r2, [pc, #24]	; (8009ae8 <UTIL_SEQ_RegTask+0x40>)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	f383 8810 	msr	PRIMASK, r3
}
 8009ade:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009ae0:	bf00      	nop
}
 8009ae2:	3720      	adds	r7, #32
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	20000478 	.word	0x20000478

08009aec <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009af6:	f3ef 8310 	mrs	r3, PRIMASK
 8009afa:	60fb      	str	r3, [r7, #12]
  return(result);
 8009afc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009afe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b00:	b672      	cpsid	i
}
 8009b02:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009b04:	4b0d      	ldr	r3, [pc, #52]	; (8009b3c <UTIL_SEQ_SetTask+0x50>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	4a0b      	ldr	r2, [pc, #44]	; (8009b3c <UTIL_SEQ_SetTask+0x50>)
 8009b0e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009b10:	4a0b      	ldr	r2, [pc, #44]	; (8009b40 <UTIL_SEQ_SetTask+0x54>)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	4908      	ldr	r1, [pc, #32]	; (8009b40 <UTIL_SEQ_SetTask+0x54>)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	f383 8810 	msr	PRIMASK, r3
}
 8009b2e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009b30:	bf00      	nop
}
 8009b32:	371c      	adds	r7, #28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	20000468 	.word	0x20000468
 8009b40:	200004f8 	.word	0x200004f8

08009b44 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b087      	sub	sp, #28
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009b50:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b52:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009b54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b56:	b672      	cpsid	i
}
 8009b58:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	43da      	mvns	r2, r3
 8009b5e:	4b08      	ldr	r3, [pc, #32]	; (8009b80 <UTIL_SEQ_PauseTask+0x3c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4013      	ands	r3, r2
 8009b64:	4a06      	ldr	r2, [pc, #24]	; (8009b80 <UTIL_SEQ_PauseTask+0x3c>)
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f383 8810 	msr	PRIMASK, r3
}
 8009b72:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009b74:	bf00      	nop
}
 8009b76:	371c      	adds	r7, #28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	20000024 	.word	0x20000024

08009b84 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8009b90:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b92:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009b94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b96:	b672      	cpsid	i
}
 8009b98:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009b9a:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <UTIL_SEQ_ResumeTask+0x3c>)
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	4a07      	ldr	r2, [pc, #28]	; (8009bc0 <UTIL_SEQ_ResumeTask+0x3c>)
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	f383 8810 	msr	PRIMASK, r3
}
 8009bb0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009bb2:	bf00      	nop
}
 8009bb4:	371c      	adds	r7, #28
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	20000024 	.word	0x20000024

08009bc4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009bd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bd6:	b672      	cpsid	i
}
 8009bd8:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009bda:	4b09      	ldr	r3, [pc, #36]	; (8009c00 <UTIL_SEQ_SetEvt+0x3c>)
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	4a07      	ldr	r2, [pc, #28]	; (8009c00 <UTIL_SEQ_SetEvt+0x3c>)
 8009be4:	6013      	str	r3, [r2, #0]
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f383 8810 	msr	PRIMASK, r3
}
 8009bf0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009bf2:	bf00      	nop
}
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	2000046c 	.word	0x2000046c

08009c04 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b088      	sub	sp, #32
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009c0c:	4b1f      	ldr	r3, [pc, #124]	; (8009c8c <UTIL_SEQ_WaitEvt+0x88>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009c12:	4b1e      	ldr	r3, [pc, #120]	; (8009c8c <UTIL_SEQ_WaitEvt+0x88>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1a:	d102      	bne.n	8009c22 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61fb      	str	r3, [r7, #28]
 8009c20:	e005      	b.n	8009c2e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8009c22:	4b1a      	ldr	r3, [pc, #104]	; (8009c8c <UTIL_SEQ_WaitEvt+0x88>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2201      	movs	r2, #1
 8009c28:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009c2e:	4b18      	ldr	r3, [pc, #96]	; (8009c90 <UTIL_SEQ_WaitEvt+0x8c>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009c34:	4a16      	ldr	r2, [pc, #88]	; (8009c90 <UTIL_SEQ_WaitEvt+0x8c>)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009c3a:	e003      	b.n	8009c44 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009c3c:	6879      	ldr	r1, [r7, #4]
 8009c3e:	69f8      	ldr	r0, [r7, #28]
 8009c40:	f7f6 fe30 	bl	80008a4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009c44:	4b13      	ldr	r3, [pc, #76]	; (8009c94 <UTIL_SEQ_WaitEvt+0x90>)
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d0f5      	beq.n	8009c3c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009c50:	4a0e      	ldr	r2, [pc, #56]	; (8009c8c <UTIL_SEQ_WaitEvt+0x88>)
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c56:	f3ef 8310 	mrs	r3, PRIMASK
 8009c5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c5c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c60:	b672      	cpsid	i
}
 8009c62:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	43da      	mvns	r2, r3
 8009c68:	4b0a      	ldr	r3, [pc, #40]	; (8009c94 <UTIL_SEQ_WaitEvt+0x90>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	4a09      	ldr	r2, [pc, #36]	; (8009c94 <UTIL_SEQ_WaitEvt+0x90>)
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f383 8810 	msr	PRIMASK, r3
}
 8009c7c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009c7e:	4a04      	ldr	r2, [pc, #16]	; (8009c90 <UTIL_SEQ_WaitEvt+0x8c>)
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	6013      	str	r3, [r2, #0]
  return;
 8009c84:	bf00      	nop
}
 8009c86:	3720      	adds	r7, #32
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	20000474 	.word	0x20000474
 8009c90:	20000470 	.word	0x20000470
 8009c94:	2000046c 	.word	0x2000046c

08009c98 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009c9c:	bf00      	nop
}
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009caa:	bf00      	nop
}
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	0c1b      	lsrs	r3, r3, #16
 8009cc8:	041b      	lsls	r3, r3, #16
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d104      	bne.n	8009cd8 <SEQ_BitPosition+0x24>
 8009cce:	2310      	movs	r3, #16
 8009cd0:	73fb      	strb	r3, [r7, #15]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	041b      	lsls	r3, r3, #16
 8009cd6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d105      	bne.n	8009cee <SEQ_BitPosition+0x3a>
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
 8009ce4:	3308      	adds	r3, #8
 8009ce6:	73fb      	strb	r3, [r7, #15]
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	021b      	lsls	r3, r3, #8
 8009cec:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d105      	bne.n	8009d04 <SEQ_BitPosition+0x50>
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	73fb      	strb	r3, [r7, #15]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	011b      	lsls	r3, r3, #4
 8009d02:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	0f1b      	lsrs	r3, r3, #28
 8009d08:	4a07      	ldr	r2, [pc, #28]	; (8009d28 <SEQ_BitPosition+0x74>)
 8009d0a:	5cd2      	ldrb	r2, [r2, r3]
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	4413      	add	r3, r2
 8009d10:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
 8009d14:	f1c3 031f 	rsb	r3, r3, #31
 8009d18:	b2db      	uxtb	r3, r3
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	0800a084 	.word	0x0800a084

08009d2c <memset>:
 8009d2c:	4402      	add	r2, r0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d100      	bne.n	8009d36 <memset+0xa>
 8009d34:	4770      	bx	lr
 8009d36:	f803 1b01 	strb.w	r1, [r3], #1
 8009d3a:	e7f9      	b.n	8009d30 <memset+0x4>

08009d3c <__libc_init_array>:
 8009d3c:	b570      	push	{r4, r5, r6, lr}
 8009d3e:	4d0d      	ldr	r5, [pc, #52]	; (8009d74 <__libc_init_array+0x38>)
 8009d40:	4c0d      	ldr	r4, [pc, #52]	; (8009d78 <__libc_init_array+0x3c>)
 8009d42:	1b64      	subs	r4, r4, r5
 8009d44:	10a4      	asrs	r4, r4, #2
 8009d46:	2600      	movs	r6, #0
 8009d48:	42a6      	cmp	r6, r4
 8009d4a:	d109      	bne.n	8009d60 <__libc_init_array+0x24>
 8009d4c:	4d0b      	ldr	r5, [pc, #44]	; (8009d7c <__libc_init_array+0x40>)
 8009d4e:	4c0c      	ldr	r4, [pc, #48]	; (8009d80 <__libc_init_array+0x44>)
 8009d50:	f000 f826 	bl	8009da0 <_init>
 8009d54:	1b64      	subs	r4, r4, r5
 8009d56:	10a4      	asrs	r4, r4, #2
 8009d58:	2600      	movs	r6, #0
 8009d5a:	42a6      	cmp	r6, r4
 8009d5c:	d105      	bne.n	8009d6a <__libc_init_array+0x2e>
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d64:	4798      	blx	r3
 8009d66:	3601      	adds	r6, #1
 8009d68:	e7ee      	b.n	8009d48 <__libc_init_array+0xc>
 8009d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d6e:	4798      	blx	r3
 8009d70:	3601      	adds	r6, #1
 8009d72:	e7f2      	b.n	8009d5a <__libc_init_array+0x1e>
 8009d74:	0800a09c 	.word	0x0800a09c
 8009d78:	0800a09c 	.word	0x0800a09c
 8009d7c:	0800a09c 	.word	0x0800a09c
 8009d80:	0800a0a0 	.word	0x0800a0a0

08009d84 <memcpy>:
 8009d84:	440a      	add	r2, r1
 8009d86:	4291      	cmp	r1, r2
 8009d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d8c:	d100      	bne.n	8009d90 <memcpy+0xc>
 8009d8e:	4770      	bx	lr
 8009d90:	b510      	push	{r4, lr}
 8009d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d9a:	4291      	cmp	r1, r2
 8009d9c:	d1f9      	bne.n	8009d92 <memcpy+0xe>
 8009d9e:	bd10      	pop	{r4, pc}

08009da0 <_init>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	bf00      	nop
 8009da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da6:	bc08      	pop	{r3}
 8009da8:	469e      	mov	lr, r3
 8009daa:	4770      	bx	lr

08009dac <_fini>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	bf00      	nop
 8009db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db2:	bc08      	pop	{r3}
 8009db4:	469e      	mov	lr, r3
 8009db6:	4770      	bx	lr
